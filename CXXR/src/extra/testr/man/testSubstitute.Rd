% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/testr.r
\name{testSubstitute}
\alias{testSubstitute}
\title{Substitutes given string or AST with the specified environment.}
\usage{
testSubstitute(code, env)
}
\arguments{
\item{code}{AST or string of the code that is to be replaced.}

\item{env}{list of the environment used for the replacement.}
}
\value{
Same type as the code, with replacements from env as described above.
}
\description{
Substitutes given string or AST with the specified environment.
}
\details{
This function works in a way similar to the substitute function known in R with two main differences:

1) if the argument code is character, a string replacement is used instead of substitution and a character with replaced portions is returned.
2) substitution on AST objects also works for function calls and operators, not just variables.

Due to the above mentioned points, the correctness of the produced R code is not guaranteed.

Variables and function calls are replaced according to the expected behavior. That is variable of the same name as a generator name is replaced by the value of that generator. Function with the same name as a generator is also replaced by the generator's value - this applies only to function name, not the function call itself.

Operators can be replaced if they are written in a form of %A% where A is the name of the generator. It is assumed the generator will then list character identifiers fully replacing the operator.

For character replacement, %A where A is name of the generator, is replaced by the generator value. %% will be replaced by %.
}
\examples{
testSubstitute(a + b, list(a = 1)) # 1 + b
testSubstitute(1 \%x\% 2, list (x = "+")) # 1 + 2
testSubstitute(f(1, 2), list( f = "foo")) # foo(1, 2)
testSubstitute("\%a + \%b \%c \%\%in\%\% container", list(a = 1, b = 2, c = 3)) # "1 + 2 3 \%in\% container" -- invalid R code
}
\seealso{
customGenerator, test
}

