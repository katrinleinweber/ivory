diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/Surv.S Recommended/survival/R/Surv.S
9,10c9,10
<     if (missing(time)) stop ("Must have a time argument")
<     if (!is.numeric(time)) stop ("Time variable is not numeric")
---
>     if (missing(time)) stop(gettextf("'%s' argument is required", "time"))
>     if (!is.numeric(time)) stop(gettextf("'%s' argument must be numeric", "time"))
26c26
<         else stop ("No time variable!") # no time variable at all!
---
>         else stop("no time variable!") # no time variable at all!
31c31
< 		stop("Wrong number of args for this type of survival data")
---
> 		stop("wrong number of arguments for this type of survival data")
33c33
< 		stop("Wrong number of args for this type of survival data")
---
> 		stop("wrong number of arguments for this type of survival data")
37c37
<         if (!is.numeric(time)) stop("Time variable is not numeric")
---
>         if (!is.numeric(time)) stop(gettextf("'%s' argument must be numeric", "time"))
42c42
<         if (!is.numeric(time)) stop("Time variable is not numeric")
---
>         if (!is.numeric(time)) stop(gettextf("'%s' argument must be numeric", "time"))
47c47
<         if (length(event) != nn) stop ("Time and status are different lengths")
---
>         if (length(event) != nn) stop(gettextf("'%s' and '%s' arguments are of different lengths", "time", "event"))
62c62
< 		    warning("Invalid status value, converted to NA")
---
> 		    warning("invalid status value, converted to NA")
64c64
<             else stop("Invalid status value, must be logical or numeric")
---
>             else stop("invalid status value, must be logical or numeric")
69,72c69,72
< 	if (length(time2) !=nn) stop ("Start and stop are different lengths")
< 	if (length(event)!=nn) stop ("Start and event are different lengths")
<         if (!is.numeric(time))  stop("Start time is not numeric")
< 	if (!is.numeric(time2)) stop("Stop time is not numeric")
---
> 	if (length(time2) !=nn) stop("'time' and 'time2' arguments (start and stop time) are of different lengths")
> 	if (length(event)!=nn) stop("'time' (start time) and 'event' arguments are of different lengths")
>         if (!is.numeric(time))  stop(gettextf("'time' argument (start time) must be numeric", "time"))
> 	if (!is.numeric(time2)) stop(gettextf("'time2' argument (stop time) must be numeric", "time2"))
76c76
< 	    warning("Stop time must be > start time, NA created")
---
> 	    warning("stop time must be > start time, NA created")
92c92
< 		    warning("Invalid status value, converted to NA")
---
> 		    warning("invalid status value, converted to NA")
94c94
< 	    else stop("Invalid status value")
---
> 	    else stop("invalid status value")
102c102
< 	    if (!is.numeric(time2)) stop("Time2 must be numeric")
---
> 	    if (!is.numeric(time2)) stop(gettextf("'%s' argument must be numeric", "time2"))
104c104
< 		    stop ("time and time2 are different lengths")
---
> 		    stop(gettextf("'%s' and '%s' arguments are of different lengths", "time", "time2"))
115c115
<                 warning("Invalid interval: start > stop, NA created")
---
>                 warning("invalid interval: start > stop, NA created")
123c123
< 		    stop("Time and status are different lengths")
---
> 		    stop(gettextf("'%s' and '%s' arguments are of different lengths", "time", "event"))
125c125
< 		   stop("Invalid status value, must be logical or numeric")
---
> 		   stop("invalid status value, must be logical or numeric")
129c129
<                 warning("Status must be 0, 1, 2 or 3; converted to NA")
---
>                 warning("status must be 0, 1, 2 or 3; converted to NA")
132c132
< 		if (!is.numeric(time2)) stop("Time2 must be numeric")
---
> 		if (!is.numeric(time2)) stop(gettextf("'%s' argument must be numeric", "time2"))
134c134
< 		    stop ("time and time2 are different lengths")
---
> 		    stop(gettextf("'%s' and '%s' arguments are of different lengths", "time", "time2"))
138c138
<                     warning("Invalid interval: start > stop, NA created")
---
>                     warning("invalid interval: start > stop, NA created")
262,264c262,264
< Math.Surv <- function(...)  stop("Invalid operation on a survival time")
< Ops.Surv  <- function(...)  stop("Invalid operation on a survival time")
< Summary.Surv<-function(...) stop("Invalid operation on a survival time")
---
> Math.Surv <- function(...)  stop("invalid operation on a survival time")
> Ops.Surv  <- function(...)  stop("invalid operation on a survival time")
> Summary.Surv<-function(...) stop("invalid operation on a survival time")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/aareg.S Recommended/survival/R/aareg.S
29c29
<     if (!inherits(Y, "Surv")) stop("Response must be a survival object")
---
>     if (!inherits(Y, "Surv")) stop(gettextf("response is not an object of class %s", dQuote("Surv")))
52c52
< 	if (any(ord>1)) stop ("Cluster can not be used in an interaction")
---
> 	if (any(ord>1)) stop("cluster cannot be used in an interaction")
58c58
<     else cluster <- 1:nrow(m)
---
>     else cluster <- seq_len(nrow(m))
70c70
<        stop("Strata terms not allowed")
---
>        stop("strata terms not allowed")
82,83c82
< 	stop(paste("Aalen model doesn't support \"", type,
< 			  "\" survival data", sep=''))
---
> 	stop(gettextf("Aalen model doesn't support \"%s\" survival data", type))
127,128c126,127
<                                      ff$event2[1:ndeath]),
< 	       time = times[ff$index[1:ndeath]],
---
>                                      ff$event2[seq_len(ndeath)]),
> 	       time = times[ff$index[seq_len(ndeath)]],
130c129
< 	       nevent=ff$event2[1:ndeath])  #weighted number of events
---
> 	       nevent=ff$event2[seq_len(ndeath)])  #weighted number of events
154c153
<     index <- match(times, dt$time[1:ndeath], nomatch=0) * status
---
>     index <- match(times, dt$time[seq_len(ndeath)], nomatch=0) * status
168c167
<         resid[nevent*((1:nused)[deaths]-1) + 1:nevent] <- 1.0 
---
>         resid[nevent*((seq_len(nused))[deaths]-1) + seq_len(nevent)] <- 1.0 
253c252
<         dindex2 <- (1:nused)[deaths]  # row number of each death
---
>         dindex2 <- (seq_len(nused))[deaths]  # row number of each death
258c257
< 	for (i in 1:nevent) {	    
---
> 	for (i in seq_len(nevent)) {	    
368c367
<     if (!inherits(x, 'aareg')) stop ("Must be an aareg object")
---
>     if (!inherits(x, 'aareg')) stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("aareg")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/agsurv.R Recommended/survival/R/agsurv.R
22c22
<         indx  <- approx(etime, 1:length(etime), time, method='constant',
---
>         indx  <- approx(etime, seq_along(etime), time, method='constant',
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/anova.coxph.R Recommended/survival/R/anova.coxph.R
4c4
<         stop ("argument must be a cox model")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "object", dQuote("coxph")))
15,17c15,18
<         warning(paste("The following arguments to anova.coxph(..)", 
<             "are invalid and dropped:", paste(deparse(dotargs[named]), 
<                 collapse = ", ")))
---
> 	{
> 	tmp_n <- paste(deparse(dotargs[named]), collapse = ", ") 
>         warning(gettextf("the following arguments passed to 'anova.coxph()' are invalid and dropped: %s", tmp_n))
> 	}
25c26
<             stop("All arguments must be Cox models")
---
>             stop(gettextf("all arguments must be an objects of class %s or %s", dQuote("coxph"), dQuote("coxme")))
32c33
<                 stop("a coxme model was found and library coxme is not loaded")
---
>                 stop("a 'coxme' model was found and library 'coxme' is not loaded")
46c47
<         stop("Can't do anova tables with robust variances")
---
>         stop("cannot do anova tables with robust variances")
111,114c112,113
<     title <- paste("Analysis of Deviance Table\n Cox model: response is ",
< 		   deparse(object$terms[[2]]),
< 		   "\nTerms added sequentially (first to last)\n", 
< 		   sep = "")
---
>     title <- paste(gettext("Analysis of Deviance Table"), "\n ", gettextf("Cox model: response is %s", deparse(object$terms[[2]]), domain = "R-survival"), "\n", 
> 		   gettext("Terms added sequentially (first to last)"), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/anova.coxphlist.S Recommended/survival/R/anova.coxphlist.S
4c4
<     if (!is.list(object)) stop("First argument must be a list")
---
>     if (!is.list(object)) stop(gettextf("'%s' argument must be a list", "object"))
6c6
< 	     stop("Argument must be a list of coxph models")
---
> 	     stop("'object' argument must be a list of objects of class \"coxph\"")
8c8
<         stop("Can't do anova tables with robust variances")
---
>         stop("cannot do anova tables with robust variances")
15,16c15
<         warning(paste("Models with response", deparse(responses[!sameresp]), 
<             "removed because response differs from", "model 1"))
---
> 	warning(gettextf("models with response %s removed because response differs from model 1", deparse(responses[!sameresp])))
37c36
<     dimnames(table) <- list(1:nmodels, 
---
>     dimnames(table) <- list(seq_len(nmodels), 
39,42c38,39
<     title <- paste("Analysis of Deviance Table\n Cox model: response is ",
< 		   responses[1]) 
<     topnote <- paste(" Model ", format(1:nmodels), ": ", variables, 
< 		     sep = "", collapse = "\n")
---
>     title <- paste(gettext("Analysis of Deviance Table"), "\n ", gettextf("Cox model: response is %s", responses[1]), sep = "")
>     topnote <- paste(gettextf(" Model %s:", format(seq_len(nmodels))), variables, collapse = "\n")
46,49c43,44
<     if (is.R()) structure(table, heading = c(title, topnote), 
< 			  class = c("anova", "data.frame"))
<     else structure(table, heading = c(title, topnote), 
< 			  class = "anova")	     
---
>     if (is.R()) structure(table, heading = c(title, topnote), class = c("anova", "data.frame"))
>     else structure(table, heading = c(title, topnote), class = "anova")	     
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/attrassign.R Recommended/survival/R/attrassign.R
27c27
<                 stop("need terms object")
---
>                 stop(gettextf("'%s' argument is not an object of class %s", "tt", dQuote("terms")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/basehaz.R Recommended/survival/R/basehaz.R
8c8
<         stop("must be a coxph object")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "fit", dQuote("coxph")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/cch.R Recommended/survival/R/cch.R
20c20
<         stop("Multiple records per id not allowed")
---
>         stop("multiple records per id not allowed")
25c25
<         stop("Permissible values for subcohort indicator are 0/1 or TRUE/FALSE")
---
>         stop("permissible values for subcohort indicator are 0/1 or TRUE/FALSE")
27c27
<         stop("Number of records greater than cohort size")
---
>         stop("number of records greater than cohort size")
35c35
<             warning("`robust' not implemented for stratified analysis.")
---
>             warning("'robust' argument is not implemented for stratified analysis")
37c37
<             stop("method (",method,") requires 'stratum'")
---
>             stop(gettextf("method (%s) requires 'stratum'", method))
39c39
<             stop("cohort.size and stratum do not match")
---
>             stop("'cohort.size' and 'stratum' levels lengths do not match")
45c45
<             warning("`robust' ignored for  method (",method,")")
---
>             warning(gettextf("'%s' argument ignored for method (%s)", "robust", method))
47c47
<             warning("'stratum' ignored for method (",method,")")
---
>             warning(gettextf("'%s' argument ignored for method (%s)", "stratum", method))
53c53
<         stop("Population smaller than sample in some strata")
---
>         stop("population smaller than sample in some strata")
62c62
<         stop("Response must be a survival object")
---
>         stop(gettextf("response is not an object of class %s", dQuote("Surv")))
66c66
<                  stop(paste("Cox model doesn't support \"", type, "\" survival data", sep = "")),
---
>                  stop(gettextf("cox model doesn't support \"%s\" survival data", type)),
70c70,73
<         stop(sum(!subcoh & !cens),"censored observations not in subcohort")
---
>         stop(sprintf(ngettext(sum(!subcoh & !cens),
> 				"%d censored observation not in subcohort",
> 				"%d censored observations not in subcohort", domain = "R-survival"),
> 			 sum(!subcoh & !cens)), domain = NA)
240c243
<   for (j in 1:jj) {
---
>   for (j in seq_len(jj)) {
292c295
<   for (j in 1:jj) {
---
>   for (j in seq_len(jj)) {
326,327c329
<     dimnames(coefficients) <- list(names(coef), c("Value", 
<                                                   "SE", "Z", "p"))
---
>     dimnames(coefficients) <- list(names(coef), c("Value", "SE", "Z", "p"))
335c337
<         cat("Exposure-stratified case-cohort analysis,", x$method, "method.\n")
---
>         cat(gettextf("Exposure-stratified case-cohort analysis, %s method.", x$method, domain = "R-survival"), "\n", sep = "")
339,341c341
<         cat("Case-cohort analysis,")
<         cat("x$method,", x$method,"\n with subcohort of",
<             x$subcohort.size,"from cohort of", x$cohort.size,"\n\n")
---
>         cat(gettextf("Case-cohort analysis, x$method, %s with subcohort of %s from cohort of %s", x$method, x$subcohort.size, x$cohort.size, domain = "R-survival"), "\n\n", sep = "")
343,344c343,344
<     cat("Call: "); print(x$call)
<     cat("\nCoefficients:\n")
---
>     cat(gettext("Call: ", domain = "R-survival")); print(x$call)
>     cat("\n", gettext("Coefficients:", domain = "R-survival"), "\n", sep = "")
362,363c362
<     dimnames(coefficients) <- list(names(coef), c("Value", 
<                                                   "SE", "Z", "p"))
---
>     dimnames(coefficients) <- list(names(coef), c("Value", "SE", "Z", "p"))
377c376
<         cat("Exposure-stratified case-cohort analysis,", x$method, "method.\n")
---
>         cat(gettextf("Exposure-stratified case-cohort analysis, %s method.", x$method, domain = "R-survival"), "\n", sep = "")
381,383c380
<         cat("Case-cohort analysis,")
<         cat("x$method,", x$method,"\n with subcohort of",
<             x$subcohort.size,"from cohort of", x$cohort.size,"\n\n")
---
>         cat(gettextf("Case-cohort analysis, x$method, %s with subcohort of %s from cohort of %s", x$method, x$subcohort.size, x$cohort.size, domain = "R-survival"), "\n\n", sep = "")
385,386c382,383
<     cat("Call: "); print(x$call)
<     cat("\nCoefficients:\n")
---
>     cat(gettext("Call: ", domain = "R-survival")); print(x$call)
>     cat("\n", gettext("Coefficients:", domain = "R-survival"), "\n", sep = "")
388,389c385,386
<                   "(95%"=exp(x$coefficients[,1]-1.96*x$coefficients[,2]),
<                   "CI)"=exp(x$coefficients[,1]+1.96*x$coefficients[,2]),
---
>                   "(95%"=exp(x$coefficients[,1] - qnorm(0.975)*x$coefficients[,2]),
>                   "CI)"=exp(x$coefficients[,1] + qnorm(0.975)*x$coefficients[,2]),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/clogit.R Recommended/survival/R/clogit.R
16c16
<     if (indx[1]==0) stop("A formula argument is required")
---
>     if (indx[1]==0) stop(gettextf("'%s' argument is required", "formula"))
66c66
<     stop("predicted survival curves are not defined for a clogit model")
---
>     stop("predicted survival curves are not defined for a 'clogit' model")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/coxph.R Recommended/survival/R/coxph.R
30c30
<     if (nrow(mf) ==0) stop("No (non-missing) observations")
---
>     if (nrow(mf) ==0) stop("no (non-missing) observations")
42,43c42
<             stop(gettextf("Argument %s not matched", names(extraArgs)[indx==0L]),
<                  domain = NA)
---
>             stop(gettextf("argument %s was not matched", names(extraArgs)[indx==0L]), domain = "R-survival")
51,52c50
<         stop(paste("Cox model doesn't support \"", type,
<                           "\" survival data", sep=''))
---
>         stop(gettextf("Cox model doesn't support \"%s\" survival data", type))
93c91
<                  stop("The tt argument must contain function or list of functions")
---
>                  stop(gettextf("'%s' argument must contain a function or list of functions", "tt"))
97c95
<                      for (i in 1:ntrans) temp[[i]] <- tt[[1]]
---
>                      for (i in seq_len(ntrans)) temp[[i]] <- tt[[1]]
100c98
<                  else stop("Wrong length for tt argument")
---
>                  else stop(gettextf("wrong length for '%s' argument", "tt"))
103c101
<          else stop("The tt argument must contain a function or list of functions")
---
>          else stop(gettextf("'%s' argument must contain a function or list of functions", "tt"))
151c149
<          for (i in 1:ntrans) {
---
>          for (i in seq_len(ntrans)) {
236c234
<         if (length(init) != ncol(X)) stop("wrong length for init argument")
---
>         if (length(init) != ncol(X)) stop(gettextf("wrong length for '%s' argument", "init"))
265c263
<         else stop(paste ("Unknown method", method))
---
>         else stop(gettextf("unknown '%s' method", method))
276,278c274,275
<            vars <- (1:length(fit$coefficients))[is.na(fit$coefficients)]
<            msg <-paste("X matrix deemed to be singular; variable",
<                            paste(vars, collapse=" "))
---
>            vars <- seq_along(fit$coefficients)[is.na(fit$coefficients)]
>            msg <- gettextf("X matrix deemed to be singular; variable %s", paste(vars, collapse=" "))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/coxph.control.S Recommended/survival/R/coxph.control.S
8,9c8,9
<     if (iter.max <0) stop("Invalid value for iterations")
<     if (eps <=0) stop ("Invalid convergence criteria")
---
>     if (iter.max <0) stop("invalid value for iterations")
>     if (eps <=0) stop("invalid convergence criteria")
11,12c11,12
< 	    warning("For numerical accuracy, tolerance should be < eps")
<     if (toler.inf <=0) stop ("The inf.warn setting must be >0")
---
> 	    warning("for numerical accuracy, tolerance should be < eps")
>     if (toler.inf <=0) stop("'toler.inf' argument must be >0")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/coxph.rvar.S Recommended/survival/R/coxph.rvar.S
5c5
< 	stop ("First argument must be a fitted Cox model")
---
> 	stop(gettextf("'%s' argument is not an object of class %s", "fit", dQuote("coxph")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/coxph.wtest.S Recommended/survival/R/coxph.wtest.S
18c18
< 	else stop("Argument lengths do not match")
---
> 	else stop(gettextf("'%s' and '%s' arguments are of different lengths", "var", "b"))
23c23
<         else stop("Argument lengths do not match")
---
>         else stop(gettextf("'%s' and '%s' arguments are of different lengths", "var", "b"))
27,28c27,28
<             stop("First argument must be a square matrix")
<     if (nrow(var) != nvar) stop("Argument lengths do not match")
---
>             stop("'var' argument is not a square matrix")
>     if (nrow(var) != nvar) stop(gettextf("'%s' and '%s' arguments are of different lengths", "var", "b"))
37c37
<     else          list(test=temp$tests[1:ntest], df=temp$df, 
---
>     else          list(test=temp$tests[seq_len(ntest)], df=temp$df, 
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/dsurvreg.S Recommended/survival/R/dsurvreg.S
6c6
<     if (is.null(dist)) stop("Distribution not found")
---
>     if (is.null(dist)) stop(gettextf("%s distribution was not found", sQuote(distribution)))
25c25
<     if (is.null(dist)) stop("Distribution not found")
---
>     if (is.null(dist)) stop(gettextf("%s distribution was not found", sQuote(distribution)))
41c41
<     if (is.null(dist)) stop("Distribution not found")
---
>     if (is.null(dist)) stop(gettextf("%s distribution was not found", sQuote(distribution)))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/finegray.R Recommended/survival/R/finegray.R
7c7
<     if (indx[1] ==0) stop("A formula argument is required")
---
>     if (indx[1] ==0) stop(gettextf("'%s' argument is required", "formula"))
17c17
<     if (nrow(mf) ==0) stop("No (non-missing) observations")
---
>     if (nrow(mf) ==0) stop("no (non-missing) observations")
21c21
<     if (!inherits(Y, "Surv")) stop("Response must be a survival object")
---
>     if (!inherits(Y, "Surv")) stop(gettextf("'%s' argument is not an object of class %s", "formula", dQuote("Surv")))
43c43
<         if (!is.null(id)) stop("an id argument and a cluster() term are redundant")
---
>         if (!is.null(id)) stop("'id' argument and a 'cluster()' term are redundant")
80c80
<             stop ("etype argument has a state that is not in the data")
---
>             stop("'etype' argument has a state that is not in the data")
186c186
<         tlist <- lapply(1:max(istrat), stratfun)
---
>         tlist <- lapply(seq_len(max(istrat)), stratfun)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/frailty.S Recommended/survival/R/frailty.S
12c12
< 	    stop(paste("Function '", temp, "' not found", sep=""))
---
> 	    stop(gettextf("function %s was not found", sQuote(temp)))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/frailty.brent.S Recommended/survival/R/frailty.brent.S
9c9
<     if (length(y) != n) stop ("Length mismatch for x and y")
---
>     if (length(y) != n) stop(gettextf("'%s' and '%s' arguments are of different lengths", "x", "y"))
18,19c18,19
<     best <- (1:n)[yy==max(y)]
<     if (length(best) >1) stop("Ties for max(y), I surrender") #fix this later
---
>     best <- seq_len(n)[yy == max(y)]
>     if (length(best) >1) stop("Ties for 'max(y)', I surrender") #fix this later
43,44c43
<     if (new < xx[1] || new > xx[3] ||
< 	      ( (n>4) && (new-x[n]) > .5*abs(x[n-1]-x[n-2]))) {
---
>     if (new < xx[1] || new > xx[3] || ( (n>4) && (new-x[n]) > .5*abs(x[n-1]-x[n-2]))) {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/frailty.controlaic.S Recommended/survival/R/frailty.controlaic.S
21,22c21
< 	history <- c(theta=old$theta, loglik=loglik,
< 		     df=df, aic=loglik-df, aicc=loglik - dfc)
---
> 	history <- c(theta = old$theta, loglik = loglik, df = df, aic = loglik - df, aicc = loglik - dfc)
29,30c28
<     history <- rbind(old$history,c(old$theta, loglik, df, loglik-df, 
< 				   loglik -dfc))
---
>     history <- rbind(old$history,c(old$theta, loglik, df, loglik - df, loglik - dfc))
48,49c46
<     else  newtheta <- frailty.brent(x, aic, lower=parms$lower, 
< 				    upper=parms$upper)
---
>     else  newtheta <- frailty.brent(x, aic, lower = parms$lower, upper = parms$upper)
53c50
< 	cat("    new theta=", format(newtheta), "\n\n")
---
> 	cat("    ", gettextf("new theta= %s", format(newtheta), domain = "R-survival"), "\n\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/frailty.controldf.S Recommended/survival/R/frailty.controldf.S
17,18c17
< 	return(list(theta=theta, done=FALSE, 
< 		    history=cbind(thetas=parms$thetas, dfs=parms$dfs)))
---
> 	return(list(theta = theta, done = FALSE, history = cbind(thetas = parms$thetas, dfs = parms$dfs)))
33,34c32
< 	return(list(theta=theta, done=FALSE,
< 		    history=cbind(thetas=thetas, dfs=dfs), half=0))
---
> 	return(list(theta = theta, done = FALSE, history = cbind(thetas = thetas, dfs = dfs), half = 0))
39,40c37
< 	done <- (iter>1 &&
< 		 (abs(dfs[nx]-parms$df) < eps))
---
> 	done <- (iter>1 && (abs(dfs[nx]-parms$df) < eps))
67,68c64
< 		    cat("  bisect:new theta=" , format( mean(x[b1+0:1])), 
< 			"\n\n")
---
> 		    cat("  ", gettextf("bisect:new theta= %s" , format( mean(x[b1+0:1])), domain = "R-survival"), "\n\n", sep = "")
70,72c66
< 		return(list(theta= mean(x[b1+0:1]),done=done, 
< 			      history=cbind(thetas=thetas, dfs=dfs), 
< 				            half=max(old$half, 0) +1))
---
> 		return(list(theta = mean(x[b1+0:1]),done = done, history = cbind(thetas = thetas, dfs = dfs), half = max(old$half, 0) +1))
77,78c71
< 	    if ((b1+1)==nx ||
< 		(b1>1 &&  ((target -y[b1]) < (y[b1+1] -target))))
---
> 	    if ((b1+1)==nx || (b1>1 &&  ((target -y[b1]) < (y[b1+1] -target))))
92c85
< 	    cat("  new theta=" , format(x[b1] + exp(newx)), "\n\n")
---
> 	    cat("  ", gettextf("new theta= %s" , format(x[b1] + exp(newx)), domain = "R-survival"), "\n\n", sep = "")
94,95c87
< 	list(theta=x[b1] + exp(newx), done=done, 
< 	     history=cbind(thetas=thetas, dfs=dfs), half=0)
---
> 	list(theta = x[b1] + exp(newx), done = done, history = cbind(thetas = thetas, dfs = dfs), half = 0)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/frailty.controlgam.S Recommended/survival/R/frailty.controlgam.S
26c26
< 	    if (is.matrix(group)) group <- c(group %*% 1:ncol(group))
---
> 	    if (is.matrix(group)) group <- c(group %*% seq_len(ncol(group)))
54c54
< 		    cat("    new theta=", theta, "\n\n")
---
> 		    cat("    ", gettextf("new theta= %s", theta, domain = "R-survival"), "\n\n", sep = "")
56,57c56
< 		list(theta=theta, done=FALSE, history=history,
< 		     c.loglik= loglik+correct)
---
> 		list(theta = theta, done = FALSE, history = history, c.loglik = loglik + correct)
70c69
< 		    cat("    new theta=", format(newtheta), "\n\n")
---
> 		    cat("    ", gettextf("new theta= %s", format(newtheta), domain = "R-survival"), "\n\n", sep = "")
72,73c71
< 		list(theta=newtheta, done=done, history=history, 
< 		     c.loglik = loglik + correct)
---
> 		list(theta = newtheta, done = done, history = history, c.loglik = loglik + correct)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/frailty.controlgauss.S Recommended/survival/R/frailty.controlgauss.S
44c44
< 		    cat("    new theta=", theta, "\n\n")
---
> 		    cat("    ", gettextf("new theta= %s", theta, domain = "R-survival"), "\n\n", sep = "")
59c59
< 		    b1 <- (1:iter)[ord==iter]
---
> 		    b1 <- seq_len(iter)[ord==iter]
82c82
< 		    cat("    new theta=", format(newtheta), "\n\n")
---
> 		    cat("    ", gettextf("new theta= %s", format(newtheta), domain = "R-survival"), "\n\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/is.ratetable.S Recommended/survival/R/is.ratetable.S
11,12c11
< 	if (length(att$dimnames)!=nd ||
< 			 length(att$cutpoints)!=nd) return(FALSE)
---
> 	if (length(att$dimnames) != nd || length(att$cutpoints) != nd) return(FALSE)
28c27
< 	for (i in 1:nd) {
---
> 	for (i in seq_len(nd)) {
32c31
< 	    if (fac[i]!=1 && any(order(att$cutpoints[[i]])!= 1:n)) return(FALSE)
---
> 	    if (fac[i]!=1 && any(order(att$cutpoints[[i]])!= seq_len(n))) return(FALSE)
41c40
<     if (!inherits(x, 'ratetable')) msg <- c(msg, "wrong class")
---
>     if (!inherits(x, 'ratetable')) msg <- c(msg, stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("ratetable"))))
46c45
<         msg <- c(msg, paste("missing attribute:", dlist[temp]))
---
>         msg <- c(msg, paste(gettext("missing attribute:"), dlist[temp]))
52c51
<         msg <- c(msg, 'length of the data does not match prod(dim)')
---
>         msg <- c(msg, gettext("length of the data does not match 'prod(dim)'"))
55c54
< 	     msg <- c(msg, 'dimnames is not a list')
---
> 	     msg <- c(msg, gettextf("'%s' component is not a list", "dimnames"))
57c56
< 	     msg <- c(msg, 'cutpoints is not a list')
---
> 	     msg <- c(msg, gettextf("'%s' component is not a list", "cutpoints"))
60c59
<         msg <- c(msg, 'wrong length for dimnames')
---
>         msg <- c(msg, gettextf("wrong length for '%s' component", "dimnames"))
62c61
<         msg <- c(msg, 'wrong length for dimid')
---
>         msg <- c(msg, gettextf("wrong length for '%s' component", "dimid"))
65c64
<         msg <- c(msg, 'wrong length for cutpoints')
---
>         msg <- c(msg, gettextf("wrong length for '%s' component", "cutpoints"))
69,70c68,69
<         if (any(is.na(fac))) msg <- c(msg, "illegal 'factor' level of NA")
<         if (any(fac <0)) msg <- c(msg, "illegal 'factor' attribute of <0")
---
>         if (any(is.na(fac))) msg <- c(msg, gettext("illegal 'factor' level of NA"))
>         if (any(fac <0)) msg <- c(msg, gettext("illegal 'factor' attribute of <0"))
72c71
<             msg <- c(msg, 'wrong length for factor')
---
>             msg <- c(msg, gettextf("wrong length for '%s' component", "factor"))
77c76
<             msg <- c(msg, 'type attribute must be 1, 2, 3, or 4')
---
>             msg <- c(msg, gettext("'type' attribute must be 1, 2, 3, or 4"))
80c79
<             msg <- c(msg, 'wrong length for type attribute')
---
>             msg <- c(msg, gettext("wrong length for 'type' attribute"))
82c81
<     else msg <- c(msg, "missing the 'type' attribute")
---
>     else msg <- c(msg, gettext("missing the 'type' attribute"))
84c83
<     for (i in 1:nd) {
---
>     for (i in seq_len(nd)) {
87c86
< 		msg <- c(msg, paste('dimname', i, 'is the wrong length'))
---
> 		msg <- c(msg, gettextf("dimname %d is the wrong length", i))
91,93c90,92
<                 msg <- c(msg, paste('wrong length for cutpoints', i))
<             else if (any(order(att$cutpoints[[i]])!= 1:n)) 
< 		msg <- c(msg, paste('unsorted cutpoints for dimension',i))
---
>                 msg <- c(msg, gettextf("wrong length for cutpoints %d", i))
>             else if (any(order(att$cutpoints[[i]])!= seq_len(n))) 
> 		msg <- c(msg, gettextf("unsorted cutpoints for dimension %d", i))
97,98c96
< 		msg <- c(msg, paste('type[', i, 
<                                     '] is 1; cutpoint should be null'))
---
> 		msg <- c(msg, gettextf("type[ %d ] is 1; cutpoint should be null", i))
101c99
< 		msg <- c(msg, 'only the last dimension can be interpolated')
---
> 		msg <- c(msg, gettext("only the last dimension can be interpolated"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/match.ratetable.S Recommended/survival/R/match.ratetable.S
10c10
<     if (!is.ratetable(ratetable)) stop("Invalid rate table")
---
>     if (!is.ratetable(ratetable)) stop("invalid rate table")
26c26
<         for (i in 1:nd) {
---
>         for (i in seq_len(nd)) {
39,40c39
<        stop(paste("Argument '", dimid[is.na(ord)],
< 	    "' needed by the ratetable was not found in the data", sep=''))
---
>        stop(gettextf("'%s' argument needed by the ratetable was not found in the data", dimid[is.na(ord)]))
44c43
<         stop("A ratetable argument appears twice in the data")
---
>         stop("'ratetable' argument appears twice in the data")
64,65c63
<         stop(paste("Data has a date type variable, but the reference",
<                    "ratetable is not a date for variable", dimid[indx]))
---
>         stop(gettextf("data has a date type variable, but the reference ratetable is not a date for variable %s", dimid[indx]))
67c65
<     for (i in (1:nd)) {
---
>     for (i in seq_len(nd)) {
69,70c67
< 	    if (rtype[i]!=1) stop(paste("In ratetable(),", dimid[i],
< 				     "must be a continuous variable"))
---
> 	    if (rtype[i]!=1) stop(gettextf("In 'ratetable()', %s must be a continuous variable", dimid[i]))
73,74c70
< 		stop(paste("Levels do not match for ratetable() variable",
< 			    dimid[i]))
---
> 		stop(gettextf("levels do not match for 'ratetable()' variable %s", dimid[i]))
76,77c72
<                 stop(paste("Non-unique ratetable match for variable",
<                                dimid[i]))
---
>                 stop(gettextf("non-unique ratetable match for variable %s", dimid[i]))
85,87c80,81
< 		if (any(floor(temp)!=temp) || any(temp<=0) ||
< 			    max(temp) > length(dtemp[[i]]))
< 		stop(paste("The variable", dimid[i], "is out of range"))
---
> 		if (any(floor(temp)!=temp) || any(temp<=0) || max(temp) > length(dtemp[[i]]))
> 		stop(gettextf("the variable %s is out of range", dimid[i]))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/neardate.R Recommended/survival/R/neardate.R
13,16c13,16
<     if (missing(id1)) stop("id1 argument is required")
<     if (missing(id2)) stop("id2 argument is required")
<     if (missing(y1))  stop("y1 argument is required")
<     if (missing(y2))  stop("y2 argument is required")
---
>     if (missing(id1)) stop(gettextf("'%s' argument is required", "id1"))
>     if (missing(id2)) stop(gettextf("'%s' argument is required", "id2"))
>     if (missing(y1))  stop(gettextf("'%s' argument is required","y1"))
>     if (missing(y2))  stop(gettextf("'%s' argument is required", "y2"))
18c18
<             stop("id1 and y1 have different lengths")
---
>             stop(gettextf("'%s' and '%s' arguments are of different lengths", "id1", "y1"))
20c20
<             stop("id2 and y2 have different lengths")
---
>             stop(gettextf("'%s' and '%s' arguments are of different lengths", "id2", "y2"))
28c28
<         stop("y1 and y2 must be sortable")
---
>         stop("'y1' and 'y2' arguments must be sortable")
38c38
<     rowid <- 1:length(y2)
---
>     rowid <- seq_len(length(y2))
69c69
<         indx2 <- approx(hash2, 1:n2, hash1, method="constant", yleft=NA,
---
>         indx2 <- approx(hash2, seq_len(n2), hash1, method="constant", yleft=NA,
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/predict.coxph.R Recommended/survival/R/predict.coxph.R
8c8
<         stop("Primary argument much be a coxph object")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "object", dQuote("coxph")))
19c19
<                     terms <1)) stop("Invalid terms argument")
---
>                     terms <1)) stop(gettextf("invalid '%s' argument", "terms"))
22c22
<            stop("a name given in the terms argument not found in the model")
---
>            stop("a name given in the 'terms' argument not found in the model")
170c170
<                     j1 <- approx(afit$time, 1:afit.n, y[indx,1], method='constant',
---
>                     j1 <- approx(afit$time, seq_len(afit.n), y[indx,1], method='constant',
181c181
<                         j2 <- approx(afit$time, 1:afit.n, y[indx,2], method='constant',
---
>                         j2 <- approx(afit$time, seq_len(afit.n), y[indx,2], method='constant',
198c198
<                     j1 <- approx(afit$time, 1:afit.n, newy[indx2,1], 
---
>                     j1 <- approx(afit$time, seq_len(afit.n), newy[indx2,1], 
214c214
<                         j2 <- approx(afit$time, 1:afit.n, newy[indx2,2], 
---
>                         j2 <- approx(afit$time, seq_len(afit.n), newy[indx2,2], 
281c281
<             for (i in 1:nterms) {
---
>             for (i in seq_len(nterms)) {
308c308
<         if (length(collapse) != n2) stop("Collapse vector is the wrong length")
---
>         if (length(collapse) != n2) stop("Collapse vector is of the wrong length")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/print.coxph.S Recommended/survival/R/print.coxph.S
5c5
< 	cat("Call:\n")
---
> 	cat(gettext("Call:", domain = "R-survival"), "\n", sep = "")
10c10
< 	cat(" Coxph failed.", x$fail, "\n")
---
> 	cat(gettext(" Coxph failed. ", domain = "R-survival"), x$fail, "\n", sep = "")
19c19
<         stop("Input is not valid")
---
>         stop("input is not valid")
43,44c43,44
<     cat("Likelihood ratio test=", format(round(logtest, 2)), "  on ",
< 	df, " df,", " p=", format(1 - pchisq(logtest, df)), "\n",  sep="")
---
>     cat(gettextf("Likelihood ratio test = %s on %s df, p=%s", format(round(logtest, 2)), df, format(1 - pchisq(logtest, df)), domain = "R-survival"))
>     cat("\n")
47c47
<     if (!is.null(x$nevent)) cat(", number of events=", x$nevent, "\n")
---
>     if (!is.null(x$nevent)) cat(", ", gettextf("number of events= %d", x$nevent, domain = "R-survival"), "\n", sep = "")
50c50
< 	cat("\   (", naprint(omit), ")\n", sep="")
---
> 	cat("   (", naprint(omit), ")\n", sep="")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/print.coxph.null.S Recommended/survival/R/print.coxph.null.S
6c6
< 	cat("Call:  ")
---
> 	cat(gettext("Call: ", domain = "R-survival"))
11c11
<     cat("Null model\n  log likelihood=", format(x$loglik), "\n")
---
>     cat(gettext("Null model", domain = "R-survival"), "\n  ", gettextf("log likelihood=%s", format(x$loglik), domain = "R-survival"), "\n", sep = "")
14,16c14,15
< 	cat("  n=", x$n, " (", naprint(omit), ")\n",
< 				sep="")
<     else cat("  n=", x$n, "\n")
---
> 	cat("  n=", x$n, " (", naprint(omit), ")\n", sep = "")
>     else cat("  n=", x$n, "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/print.ratetable.S Recommended/survival/R/print.ratetable.S
4c4
<   cat ("Rate table with dimension(s):", attr(x, 'dimid'), "\n")
---
>   cat(sprintf(ngettext(length(attr(x, 'dimid')), "Rate table with %d dimension:", "Rate table with %d dimensions:", domain = "R-survival"), length(attr(x, 'dimid'))), " ", paste(attr(x, 'dimid'), collapse = ", "), "\n", sep = "")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/pspline.R Recommended/survival/R/pspline.R
9c9
< 	if (theta <=0 || theta >=1) stop("Invalid value for theta")
---
> 	if (theta <=0 || theta >=1) stop(gettextf("invalid '%s' argument", "theta"))
18c18
< 	if (df <=1) stop ('Too few degrees of freedom')
---
> 	if (df <=1) stop("too few degrees of freedom")
21c21
<         if (df > nterm) stop("`nterm' too small for df=",df)
---
>         if (df > nterm) stop(gettextf("'nterm' argument is too small for df=%s", df))
29c29
<     if (nterm < 3) stop("Too few basis functions")
---
>     if (nterm < 3) stop("too few basis functions")
34c34
<             stop("Invalid values for Boundary.knots")
---
>             stop(gettextf("invalid '%s' argument", "Boundary.knots"))
76c76
<             stop("combine must be an increasing vector of positive integers")
---
>             stop("'combine' argument must be an increasing vector of positive integers")
79c79
<             stop("wrong length for combine")
---
>             stop("wrong length for 'combine' argument")
82c82
<         for (i in 1:length(uc)) tmat[combine==uc[i], i] <- 1
---
>         for (i in seq_along(uc)) tmat[combine==uc[i], i] <- 1
91c91
<     if (intercept) xnames <-paste('ps(', xname, ')', 1:nvar, sep='')
---
>     if (intercept) xnames <-paste('ps(', xname, ')', seq_len(nvar), sep='')
221c221
<         stop("Argment must be the result of a call to pspline")
---
>         stop(gettextf("'%s' argument is not an object of class %s", "x", dQuote("pspline")))
226c226
<         indx <- 1:(ncol(x)+1) + (nknot- (ncol(x) +1))/2
---
>         indx <- seq_len(ncol(x)+1) + (nknot- (ncol(x) +1))/2
230c230
<         indx <- 1:ncol(x) + (nknot - ncol(x))/2
---
>         indx <- seq_len(ncol(x)) + (nknot - ncol(x))/2
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/pyears.R Recommended/survival/R/pyears.R
23c23
<             stop("Can have only 1 ratetable() call in a formula")
---
>             stop("Can have only 1 'ratetable()' call in a formula")
28c28
<                 stop("The ratetable() call in a formula is depreciated")
---
>                 stop("The 'ratetable()' call in a formula is depreciated")
38c38
<                 stop ("Invalid rcall argument")
---
>                 stop(gettextf("invalid '%s' argument", "rcall"))
54c54
<             stop("Variable not found in the ratetable:", (names(rcall))[is.na(temp)])
---
>             stop(gettextf("Variable not found in the ratetable: %s", (names(rcall))[is.na(temp)]))
91,93c91
<                 warning(paste(nzero, 
<                          "observations with an event and 0 follow-up time,",
<                        "any rate calculations are statistically questionable"))
---
>                 warning(sprintf(ngettext(nzero, "%d observation with an event and 0 follow-up time, any rate calculations are statistically questionable","%d observations with an event and 0 follow-up time, any rate calculations are statistically questionable", domain = "R-survival"), nzero), domain = NA)
100c98
<     if (is.null(n) || n==0) stop("Data set has 0 observations")
---
>     if (is.null(n) || n==0) stop("data set has 0 observations")
140c138
<         for (i in 1:odim) {
---
>         for (i in seq_len(odim)) {
204c202
<             else stop("Can't find an appropriate date class\n") 
---
>             else stop("Can't find an appropriate date class") 
213c211
<                 cuts[[temp]] <- round(approx(nint*(1:nyear), cuts[[temp]],
---
>                 cuts[[temp]] <- round(approx(nint*(seq_len(nyear)), cuts[[temp]],
278c276
<         row.names(df) <- 1:nrow(df)
---
>         row.names(df) <- seq_len(nrow(df))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/ratetable.S Recommended/survival/R/ratetable.S
34c34
<     for (i in 1:nargs) {
---
>     for (i in seq_len(nargs)) {
37,38c37
<             stop(paste("Aguments do not all have the same length (arg ",
< 			i, ")", sep=''))
---
>             stop(gettextf("Aguments do not all have the same length (arg %d)", i))
41c40
<         if (inherits(args[[i]], 'cateogory') || is.character(args[[i]]))
---
>         if (inherits(args[[i]], 'category') || is.character(args[[i]]))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/residuals.coxph.S Recommended/survival/R/residuals.coxph.S
26c26
< 	stop(paste(type, 'residuals are not available for the exact method'))
---
> 	stop(gettextf("'%s' residuals are not available for the exact method", type))
169c169
< 	if (length(collapse) !=n) stop("Wrong length for 'collapse'")
---
> 	if (length(collapse) !=n) stop(gettextf("wrong length for '%s' argument", "collapse"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/residuals.coxph.null.S Recommended/survival/R/residuals.coxph.null.S
8,9c8
<     else stop(paste("\'", type, "\' residuals are not defined for a null model",
< 			sep=""))
---
>     else stop(gettextf("'%s' residuals are not defined for a null model", type))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/ridge.S Recommended/survival/R/ridge.S
10c10
< 	    stop("Only one of df or theta can be specified")
---
> 	    stop("only one of 'df' or 'theta' arguments can be specified")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/statefig.R Recommended/survival/R/statefig.R
30c30
<         space <- function(n) (1:n -.5)/n   # centers of the boxes
---
>         space <- function(n) (seq_len(n) -.5)/n   # centers of the boxes
38c38
<             for (i in 1:n) cbox[ix==i,2] <- 1 -space(layout[i])
---
>             for (i in seq_len(n)) cbox[ix==i,2] <- 1 -space(layout[i])
41c41
<             for (i in 1:n) cbox[ix==i,1] <- space(layout[i])
---
>             for (i in seq_len(n)) cbox[ix==i,1] <- space(layout[i])
57c57
<         for (i in 1:nstate) 
---
>         for (i in seq_len(nstate)) 
90,91c90,91
<     for (i in 1:nstate) {
<         for (j in 1:nstate) {
---
>     for (i in seq_len(nstate)) {
>         for (j in seq_len(nstate)) {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/strata.S Recommended/survival/R/strata.S
16c16
<         argname <- words[1:nterms]
---
>         argname <- words[seq_len(nterms)]
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/summary.coxph.S Recommended/survival/R/summary.coxph.S
10c10
<          stop("Input is not valid")
---
>          stop("input is not valid")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/summary.ratetable.S Recommended/survival/R/summary.ratetable.S
7c7
<     if (!inherits(rtable, 'ratetable')) stop("Argument is not a rate table")
---
>     if (!inherits(rtable, 'ratetable')) stop(gettextf("'%s' argument is not an object of class %s", "object", dQuote("ratetable")))
11,12c11,12
<     cat (" Rate table with", ncat, "dimensions:\n")
<     for (i in 1:ncat) {
---
>     cat(sprintf(ngettext(ncat, "Rate table with %d dimension:", "Rate table with %d dimensions:", domain = "R-survival"), ncat), "\n", sep = "")
>     for (i in seq_len(ncat)) {
16,19c16
<                 cat("\t", att$dimid[i], " ranges from ", 
<                     format(min(att$cutpoints[[i]])), " to ", 
<                     format(max(att$cutpoints[[i]])), "; with ", att$dim[i],
<                     " categories\n", sep='')
---
>                 cat("\t", gettextf("%s ranges from %s to %s; with %d categories\n", att$dimid[i], format(min(att$cutpoints[[i]])), format(max(att$cutpoints[[i]])), att$dim[i], domain = "R-survival"), sep = "")
22,23c19
<                 cat("\t", att$dimid[i], " has levels of: ",
<                     paste(att$dimnames[[i]], collapse=' '), "\n", sep='')
---
>                 cat("\t", gettextf("%s has levels of: %s", att$dimid[i], paste(att$dimnames[[i]], collapse = ' '), domain = "R-survival"), "\n", sep = '')
26,30c22
<                 cat("\t", att$dimid[i], " ranges from " , 
<                     format(min(att$cutpoints[[i]])), " to ", 
<                     format(max(att$cutpoints[[i]])), "; with ", att$dim[i],
<                     " categories,\n\t\tlinearly interpolated in ",
<                     att$factor[i], " steps per division\n", sep='')
---
>                 cat("\t", gettextf("%s ranges from %s to %s; with %d categories linearly interpolated in %d steps per division\n", att$dimid[i], format(min(att$cutpoints[[i]])), format(max(att$cutpoints[[i]])), att$dim[i], att$factor[i], domain = "R-survival"), sep = "")
35,36c27
<                 cat("\t", att$dimid[i], " has levels of: ",
<                     paste(att$dimnames[[i]], collapse=' '), "\n", sep='')
---
>                 cat("\t", gettextf("%s has levels of: %s", att$dimid[i], paste(att$dimnames[[i]], collapse = ' '), domain = "R-survival"), "\n", sep = '')
39,44c30,31
<                 cat("\t", att$dimid[i], " ranges from " , 
<                  format(as.Date(min(att$cutpoints[[i]]), origin='1960/01/01')),
<                     " to ", 
<                  format(as.Date(max(att$cutpoints[[i]]), origin='1960/01/01')),
<                     "; with ", att$dim[i],
<                     " categories\n", sep='')
---
>                 cat("\t", gettextf("%s ranges from %s to %s; with %d categories\n", att$dimid[i], format(as.Date(min(att$cutpoints[[i]]), origin='1960/01/01')),
>                  format(as.Date(max(att$cutpoints[[i]]), origin='1960/01/01')), att$dim[i], domain = "R-survival"), sep = '')
48,51c35,36
<                 cat("\t", att$dimid[i], " ranges from ", 
<                     format(min(att$cutpoints[[i]])), " to ", 
<                     format(max(att$cutpoints[[i]])), "; with ", att$dim[i],
<                     " categories\n", sep='')
---
>                 cat("\t", gettextf("%s ranges from %s to %s; with %d categories\n", att$dimid[i], format(min(att$cutpoints[[i]])),
> 		format(max(att$cutpoints[[i]])), att$dim[i], domain = "R-survival"), sep = '')
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survConcordance.R Recommended/survival/R/survConcordance.R
57c57
<         cat("Call:\n")
---
>         cat(gettext("Call:", domain = "R-survival"), "\n", sep = "")
65c65
<     cat("Concordance= ", format(x$concordance), " se= ", format(x$std.err),
---
>     cat(gettextf("Concordance= %s se= %s", format(x$concordance), format(x$std.err), domain = "R-survival"),
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survSplit.R Recommended/survival/R/survSplit.R
14c14
<             else  stop("a data frame is required")
---
>             else  stop(gettextf("'%s' argument is required", "data"))
17c17
<             stop("either a formula or the end and event arguments are required")
---
>             stop(gettextf("'%s' or '%s' and '%s arguments are required", "formula", "end", "event"))
21c21
<             stop("'event' must be a variable name in the data set")
---
>             stop(gettextf("'%s' argument must be a variable name in the data set", "event"))
25c25
<             stop("'end' must be a variable name in the data set")
---
>             stop(gettextf("'%s' argument must be a variable name in the data set", "end"))
28c28
<             stop("'start' must be a variable name")
---
>             stop(gettextf("'%s' argument must be a variable name", "start"))
35c35
<         stop("either a formula or the end and event arguments are required")
---
>         stop(gettextf("'%s' or '%s' and '%s arguments are required", "formula", "end", "event"))
49c49
<     if (!is.Surv(Y)) stop ("the model must have a Surv object as the response")
---
>     if (!is.Surv(Y)) stop ("the model must have an object of class \"Surv\" as the response")
51c51
<         stop(paste("not valid for", attr(Y, "type"), "censored survival data"))
---
>         stop(gettextf("not valid for %s censored survival data", attr(Y, "type")))
57c57
<         stop("cut must be a vector of finite numbers")
---
>         stop("'cut' argument must be a vector of finite numbers")
63c63
<         if (!is.character(id)) stop("id must be a variable name")
---
>         if (!is.character(id)) stop(gettextf("'%s' argument must be a variable name", "id"))
115c115
<             stop("left hand side not recognized")
---
>             stop("left hand side was not recognized")
121c121
<         if (!is.character(episode)) stop("episode must be a character string")
---
>         if (!is.character(episode)) stop(gettextf("'%s' argument must be a character string", "episode"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survcallback.S Recommended/survival/R/survcallback.S
13c13
< 	    stop("Invalid pcols or pattr arg")
---
> 	    stop(gettextf("invalid '%s' or '%s' argument", "pcols", "pattr"))
15c15
<     if (sum(sparse) >1) stop("Only one sparse penalty term allowed")
---
>     if (sum(sparse) >1) stop("only one sparse penalty term allowed")
39c39
< 	    stop("pcols and assign arguments disagree")
---
> 	    stop("'pcols' and 'assign' arguments disagree")
53c53
< 	if (length(fcol) > 1) stop("Sparse term must be single column")
---
> 	if (length(fcol) > 1) stop("sparse term must be single column")
111c111
< 		    stop("Invalid coxlist1")
---
> 		    stop("invalid 'coxlist1' object")
113c113
< 		    stop("Incorrect length in coxlist1")
---
> 		    stop("incorrect length in 'coxlist1' object")
129c129
<         stop("Cannot fit a model with no coefficients other than sparse ones")
---
>         stop("cannot fit a model with no coefficients other than sparse ones")
184c184
< 		    stop("Length error in coxlist2")
---
> 		    stop("length error in 'coxlist2' object")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survdiff.S Recommended/survival/R/survdiff.S
7c7
<         stop("The 'formula' argument is not a formula")
---
>         stop("'formula' argument is not a formula")
17,18c17,18
<     if (!inherits(y, "Surv")) stop("Response must be a survival object")
<     if (attr(y, 'type') != 'right') stop("Right censored data only")
---
>     if (!inherits(y, "Surv")) stop(gettextf("response is not an object of class %s", dQuote("Surv")))
>     if (attr(y, 'type') != 'right') stop("right censored data only")
27c27
< 		stop("Cannot have both an offset and groups")
---
> 		stop("cannot have both an offset and groups")
29c29
< 	    stop("The offset must be a survival probability")
---
> 	    stop("the offset must be a survival probability")
59c59
< 	if (length(ll) == 0) stop("No groups to test")
---
> 	if (length(ll) == 0) stop("no groups to test")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survexp.R Recommended/survival/R/survexp.R
21c21
<             stop("Can have only 1 ratetable() call in a formula")
---
>             stop("Can have only 1 'ratetable()' call in a formula")
24c24
<             stop("The ratetable() call in a formula is depreciated")
---
>             stop("The 'ratetable()' call in a formula is depreciated")
34c34
<             stop ("Invalid rcall argument")
---
>             stop(gettextf("invalid '%s' argument", "rcall"))
50c50
<         stop("Variable not found in the ratetable:", (names(rcall))[is.na(temp)])
---
>         stop(gettextf("Variable not found in the ratetable: %s", (names(rcall))[is.na(temp)]))
71c71
<     if (n==0) stop("Data set has 0 rows")
---
>     if (n==0) stop("data set has 0 rows")
73c73
<         warning("se.fit value ignored")
---
>         warning("'se.fit' value ignored")
92c92
<                 stop("either a times argument or a response is needed")
---
>                 stop("either a 'times' argument or a 'response' is needed")
148c148
<              temp <- survexp.fit (1:n, R, Y, max(Y), TRUE, ratetable)
---
>              temp <- survexp.fit (seq_len(n), R, Y, max(Y), TRUE, ratetable)
152c152
<             temp <- survexp.cfit(1:n, rdata, Y, 'individual', ratetable)
---
>             temp <- survexp.cfit(seq_len(n), rdata, Y, 'individual', ratetable)
164c164
<         for (i in 1:odim) {
---
>         for (i in seq_len(odim)) {
194c194
<             keep <- approx(temp$time, 1:n, xout=times, yleft=0,
---
>             keep <- approx(temp$time, seq_len(n), xout=times, yleft=0,
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survexp.cfit.R Recommended/survival/R/survexp.cfit.R
44c44
<     for (i in 1:ncurve) {
---
>     for (i in seq_len(ncurve)) {
58,59c58,59
<         indx <- rep(1:length(sfit$strata), sfit$strata)
<         for (i in 1:n) {
---
>         indx <- rep(seq_len(length(sfit$strata)), sfit$strata)
>         for (i in seq_len(n)) {
84c84
<             for (i in 1:ntime) {
---
>             for (i in seq_len(ntime)) {
92c92
<             for (i in 1:ntime) {
---
>             for (i in seq_len(ntime)) {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survfit.R Recommended/survival/R/survfit.R
22c22
<         temp <- 1:length(target)
---
>         temp <- seq_along(target)
49,51c49
<                 stop(paste("strata", 
<                                paste(i[is.na(indx)], collapse=' '),
<                                'not matched'))
---
>                 stop(gettextf("strata %s not matched", paste(i[is.na(indx)], collapse=' ')))
55c53
<             temp <- rep(1:length(x$strata), x$strata)
---
>             temp <- rep(seq_along(x$strata), x$strata)
109c107
<     if (indx[1]==0) stop("a formula argument is required")
---
>     if (indx[1]==0) stop(gettextf("'%s' argument is required", "formula"))
121c119
<     if (!is.Surv(Y)) stop("Response must be a survival object")
---
>     if (!is.Surv(Y)) stop(gettextf("'%s' argument is not an object of class %s", "formula", dQuote("Surv")))
142c140
<     if (!is.Surv(Y)) stop("y must be a Surv object")
---
>     if (!is.Surv(Y)) stop(gettextf("'%s' argument is not an object of class %s", "y", dQuote("Surv")))
149c147
<             stop("cannot use both the etype argument and mstate survival type")
---
>             stop("cannot use both the 'etype' argument and 'mstate' survival type")
151c149
<             stop("cannot use both the etype and istate arguments")
---
>             stop("cannot use both the 'etype' and 'istate' arguments")
168c166
<         else stop("etype argument incompatable with survival type")
---
>         else stop("'etype' argument incompatable with survival type")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survfit.coxph.R Recommended/survival/R/survfit.coxph.R
119c119
<         stop("Cannot handle \"", type, "\" type survival data")
---
>         stop(gettextf("Cannot handle \"%s\" type survival data", type))
204c204
<             if (individual) stop("newdata must be a data frame")
---
>             if (individual) stop(gettextf("'%s' argument must be a data frame", "newdata"))
206c206
<                 stop("Newdata argument must be a data frame")
---
>                 stop(gettextf("'%s' argument must be a data frame", "newdata"))
270c270
<             stop("The newdata argument must be present when individual=TRUE")
---
>             stop("The newdata argument must be present when 'individual=TRUE'")
273c273
<             if (is.null(id)) stop("id=NULL is an invalid argument")
---
>             if (is.null(id)) stop("'id=NULL' is an invalid argument")
289c289
<             stop("Individual=TRUE is only valid for counting process data")
---
>             stop("'individual=TRUE' is only valid for counting process data")
318c318
<                 indx1 <- split(1:nr, rep(1:length(result$strata), result$strata))
---
>                 indx1 <- split(seq_len(nr), rep(seq_along(result$strata), result$strata))
387c387
<     result <- c(result[1:indx], type=attr(y, 'type'), result[-(1:indx)])
---
>     result <- c(result[seq_len(indx)], type=attr(y, 'type'), result[-seq_len(indx)])
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survfitCI.R Recommended/survival/R/survfitCI.R
32c32
<         for (j in 1:nstate) 
---
>         for (j in seq_len(nstate)) 
96,97c96
<          stop(paste("multi-state computation doesn't support \"", type,
<                           "\" survival data", sep=''))
---
>          stop(gettextf("multi-state computation doesn't support \"%s\" survival data", type))
123c122
<                 stop("istate should be a vector of integers or a factor")
---
>                 stop("'istate' argument should be a vector of integers or a factor")
128c127
<     if (length(id) ==0) id <- 1:n
---
>     if (length(id) ==0) id <- seq_len(n)
132c131
<     if (length(istate) !=n) stop ("wrong length for istate")
---
>     if (length(istate) !=n) stop(gettextf("'%s' argument is of the wrong length", "istate"))
135c134
<     states <- unique(c(1:nstate, istate))
---
>     states <- unique(c(seq_len(nstate), istate))
151,152c150,151
<         transitions <- table(factor(istate, 1:nst), factor(Y[,2], 1:nstate))
<         dimnames(transitions) <-list(from=state.names, to=state.names[1:nstate])
---
>         transitions <- table(factor(istate, seq_len(nst)), factor(Y[,2], seq_len(nstate)))
>         dimnames(transitions) <-list(from=state.names, to=state.names[seq_len(nstate)])
175c174
<             stop("subject is in two different groups, id ", id[indx1[who]])
---
>             stop(gettextf("subject is in two different groups, id %s", id[indx1[who]]))
179c178
<             stop("gap in follow-up, id ", id[indx1[who]])
---
>             stop(gettextf("gap in follow-up, id %s", id[indx1[who]]))
186c185
<             warning("subject changes to the same state, id ", id[indx1[who]])
---
>             warning(gettextf("subject changes to the same state, id %s", id[indx1[who]]))
192,193c191,192
<         transitions <- table(factor(istate[first], 1:nst), 
<                              factor(Y[first,3], 1:nstate))
---
>         transitions <- table(factor(istate[first], seq_len(nst)), 
>                              factor(Y[first,3], seq_len(nstate)))
195,197c194,196
<             transitions <- transitions + table(factor(Y[indx1[same],3], 1:nst),
<                                                factor(Y[indx2[same],3], 1:nstate))
<         dimnames(transitions) = list(from=state.names, to=state.names[1:nstate])
---
>             transitions <- transitions + table(factor(Y[indx1[same],3], seq_len(nst)),
>                                                factor(Y[indx2[same],3], seq_len(nstate)))
>         dimnames(transitions) = list(from=state.names, to=state.names[seq_len(nstate)])
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survfitKM.S Recommended/survival/R/survfitKM.S
23,24c23,24
<     if (!is.Surv(y)) stop("y must be a Surv object")
<     if (!is.factor(x)) stop("x must be a factor")
---
>     if (!is.Surv(y)) stop(gettextf("'%s' argument is not an object of class %s", "y", dQuote("Surv")))
>     if (!is.factor(x)) stop(gettextf("'%s' argument must be a factor", "x"))
26c26
< 	    stop("Can only handle right censored or counting data")
---
> 	    stop("can only handle right censored or counting data")
38,39c38
< 		stop(paste("start.time =", start.time,
< 			   "is greater than all time points."))
---
> 		stop(gettextf("start.time = %s is greater than all time points.", start.time))
73c72
<     for (i in 1:nstrat) {
---
>     for (i in seq_len(nstrat)) {
186c185
< 	zz <- 1:length(events)
---
> 	zz <- seq_len(length(events))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survfitTurnbull.S Recommended/survival/R/survfitTurnbull.S
23,24c23,24
<     if (!is.Surv(y)) stop("y must be a Surv object")
<     if (!is.factor(x)) stop("x must be a factor")
---
>     if (!is.Surv(y)) stop(gettextf("'%s' argument is not an object of class %s", "y", dQuote("Surv")))
>     if (!is.factor(x)) stop(gettextf("'%s' argument must be a factor", "x"))
40,41c40
< 		stop(paste("start.time =", start.time,
< 			   "is greater than all time points."))
---
> 		stop(gettextf("start.time = %s is greater than all time points.", start.time))
53c52
< 	    stop("survfitTurnbull not appropriate for counting process data")
---
> 	    stop("'survfitTurnbull()' is not appropriate for counting process data")
207,209c206,207
<                 cat("\n Iteration = ", iter, "\n")
< 		cat("survival=",
< 		    format(round(tfit$surv[tfit$n.event>0],3)),  "\n")
---
>                 cat("\n ", gettextf("Iteration = %d", iter, domain = "R-survival"), "\n", sep = "")
> 		cat("survival=", format(round(tfit$surv[tfit$n.event>0],3)),  "\n")
245c243
<     for (i in 1:nstrat) {
---
>     for (i in seq_len(nstrat)) {
248c246
< 	time[[i]]   <- approx(1:length(fnumeric), fnumeric, tfit$time)$y
---
> 	time[[i]]   <- approx(seq_len(length(fnumeric)), fnumeric, tfit$time)$y
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survfitms.R Recommended/survival/R/survfitms.R
20c20
<             stop("summary.survfit can only be used for survfit objects")
---
>             stop("'summary.survfit()' function can only be used for objects of class \"survfit\"")
35c35
<         if (length(rmean)==0) stop("Invalid value for rmean option")
---
>         if (length(rmean)==0) stop("Invalid value for 'rmean' option")
80c80
<                 sindx <- rep(1:nstrat, fit$strata)
---
>                 sindx <- rep(seq_len(nstrat), fit$strata)
83c83
<                         fit[[i]] <- unlist(sapply(1:nstrat, function(j) 
---
>                         fit[[i]] <- unlist(sapply(seq_len(nstrat), function(j) 
88c88
<                 fit$strata[] <- as.vector(table(factor(sindx[index], 1:nstrat))) 
---
>                 fit$strata[] <- as.vector(table(factor(sindx[index], seq_len(nstrat)))) 
176c176
<             for (i in 1:nstrat) 
---
>             for (i in seq_len(nstrat)) 
192c192
<         fit$strata <- factor(rep(1:nstrat, fit$strata), 1:nstrat,
---
>         fit$strata <- factor(rep(seq_len(nstrat), fit$strata), seq_len(nstrat),
203c203
<             stop("summary.survfitms can only be used for survfitms objects")
---
>             stop("'summary.survfitms()' can only be used for objects of class \"survfitms\"")
218c218
<         if (length(rmean)==0) stop("Invalid value for rmean option")
---
>         if (length(rmean)==0) stop("Invalid value for 'rmean' option")
226c226
<         if (!is.numeric(times)) stop ("times must be numeric")
---
>         if (!is.numeric(times)) stop(gettextf("'%s' argument must be numeric", "times"))
232c232
<         sindx <- rep(1:nstrat, fit$strata)
---
>         sindx <- rep(seq_len(nstrat), fit$strata)
267c267
<                 sindx <- rep(1:nstrat, fit$strata)
---
>                 sindx <- rep(seq_len(nstrat), fit$strata)
270c270
<                         fit[[i]] <- unlist(sapply(1:nstrat, function(j) 
---
>                         fit[[i]] <- unlist(sapply(seq_len(nstrat), function(j) 
275c275
<                 fit$strata[] <- as.vector(table(factor(sindx[index], 1:nstrat))) 
---
>                 fit$strata[] <- as.vector(table(factor(sindx[index], seq_len(nstrat)))) 
363c363
<             for (i in 1:nstrat) 
---
>             for (i in seq_len(nstrat)) 
383c383
<         cat("Call: ")
---
>         cat(gettext("Call:", domain = "R-survival"))
401c401
<         if (length(rmean)==0) stop("Invalid value for rmean option")
---
>         if (length(rmean)==0) stop("Invalid value for 'rmean' option")
415,417c415,416
<              cat("   *mean time in state, restricted (max time =", 
<                  format(etime, ...), ")\n")
<         else cat("   *mean time in state, restricted (per curve cutoff)\n")
---
>              cat(gettextf("   *mean time in state, restricted (max time = %s)\n", format(etime, ...), domain = "R-survival"))
>         else cat(gettextf("   *mean time in state, restricted (per curve cutoff)\n", domain = "R-survival"))
425c424
<         igrp <- rep(1:ngrp, x$strata)
---
>         igrp <- rep(seq_len(ngrp), x$strata)
438c437
<         dimnames(nevent) <- list(rname, x$states[1:nc])
---
>         dimnames(nevent) <- list(rname, x$states[seq_len(nc)])
447c446
<     outmat[1:length(nevent), 2] <- c(nevent)
---
>     outmat[seq_along(nevent), 2] <- c(nevent)
462c461
<         for (i in 1:ngrp) {
---
>         for (i in seq_len(ngrp)) {
472c471
<             if (length(delta) > nrow(temp)) delta <- delta[1:nrow(temp)]
---
>             if (length(delta) > nrow(temp)) delta <- delta[seq_len(nrow(temp))]
506c505
<         temp <- 1:length(target)
---
>         temp <- seq_along(target)
527c526
<         i2 <- 1:n
---
>         i2 <- seq_len(n)
533c532
<             stop("subscript out of bounds")
---
>             stop("subscript is out of bounds")
536,538c535
<             stop(paste("strata", 
<                        paste(i[is.na(indx)], collapse=' '),
<                        'not matched'))
---
>             stop(gettextf("strata %s not matched", paste(i[is.na(indx)], collapse=' ')))
542c539
<         temp <- rep(1:length(x$strata), x$strata)
---
>         temp <- rep(seq_along(x$strata), x$strata)
552c549
<             stop("subscript out of bounds", j[is.na(indx)])
---
>             stop("subscript is out of bounds")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survobrien.S Recommended/survival/R/survobrien.S
16c16
<         stop("Transform function must be 1 to 1")
---
>         stop("'transform' function must be 1 to 1")
23c23
<     if (indx[1] ==0) stop("A formula argument is required")
---
>     if (indx[1] ==0) stop(gettextf("'%s' argument is required", "formula"))
32c32
<     if (nrow(m) ==0) stop("No (non-missing) observations")
---
>     if (nrow(m) ==0) stop("no (non-missing) observations")
37c37
<     if (!inherits(y, "Surv")) stop ("Response must be a survival object")
---
>     if (!inherits(y, "Surv")) stop(gettextf("response is not an object of class %s", dQuote("Surv")))
39c39
<         stop("Response must be right censored or (start, stop] data")
---
>         stop("response must be right censored or (start, stop] data")
43c43
<         if (length(cluster$terms) >1) stop ("Can have only 1 cluster term")
---
>         if (length(cluster$terms) >1) stop("can have only 1 cluster term")
62c62
<         stop("This function cannot deal with iteraction terms")
---
>         stop("this function cannot deal with iteraction terms")
70c70
<     if (all(keepers)) stop ("No continuous variables to modify")
---
>     if (all(keepers)) stop("no continuous variables to modify")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survreg.S Recommended/survival/R/survreg.S
10c10
<     if (indx[1] ==0) stop("A formula argument is required")
---
>     if (indx[1] ==0) stop(gettextf("'%s' argument is required", "formula"))
23c23
<     if (!inherits(Y, "Surv")) stop("Response must be a survival object")
---
>     if (!inherits(Y, "Surv")) stop(gettextf("response is not an object of class %s", dQuote("Surv")))
38c38
<         if (any(ord>1)) stop ("Cluster can not be used in an interaction")
---
>         if (any(ord>1)) stop("cluster cannot be used in an interaction")
95c95
< 	if (is.null(dlist)) stop(paste(dist, ": distribution not found"))
---
> 	if (is.null(dlist)) stop(gettextf("%s distribution was not found", sQuote(dist)))
98c98
<     else stop("Invalid distribution object")
---
>     else stop("invalid distribution object")
103c103
<     if (!survregDtest(dlist)) stop("Invalid distribution object")
---
>     if (!survregDtest(dlist)) stop("invalid distribution object")
126c126
< 	    stop("Invalid survival times for this distribution")
---
> 	    stop("invalid survival times for this distribution")
134,135c134
<         if (!missing(scale)) warning(paste(dlist$name, 
<                            "has a fixed scale, user specified value ignored"))
---
>         if (!missing(scale)) warning(gettextf("%s distribution has a fixed scale, user specified value ignored", sQuote(dlist$name)))
146,147c145
<         if (!is.null(parms)) stop(paste(dlist$name, 
<                               "distribution has no optional parameters"))
---
>         if (!is.null(parms)) stop(gettextf("%s distribution has no optional parameters", sQuote(dlist$name)))
151c149
<             stop("Default parameters must be a numeric vector")
---
>             stop("default parameters must be a numeric vector")
155c153
<             if (any(is.na(indx))) stop("Invalid parameter names")
---
>             if (any(is.na(indx))) stop("invalid parameter names")
172c170
<     if (any(scale < 0)) stop("Invalid scale value")
---
>     if (any(scale < 0)) stop("invalid scale value")
174c172
< 	    stop("The scale argument is not valid with multiple strata")
---
> 	    stop("the scale argument is not valid with multiple strata")
189c187
< 	if (any(ord>1)) stop ('Penalty terms cannot be in an interaction')
---
> 	if (any(ord>1)) stop("penalty terms cannot be in an interaction")
211c209
< 	    fit$scale <- exp(fit$coefficients[-(1:nvar)])
---
> 	    fit$scale <- exp(fit$coefficients[-seq_len(nvar)])
214c212
< 	    fit$coefficients  <- fit$coefficients[1:nvar]
---
> 	    fit$coefficients  <- fit$coefficients[seq_len(nvar)]
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/survregDtest.S Recommended/survival/R/survregDtest.S
13c13
<     if (is.null(dlist$name)) errlist <- c(errlist, "Missing a name")
---
>     if (is.null(dlist$name)) errlist <- c(errlist, gettext("missing a distribution name"))
15c15
<         errlist <- c(errlist, "Invalid name")
---
>         errlist <- c(errlist, gettext("invalid distribution name"))
23c23
<             errlist <- c(errlist, "Reference distribution not found")
---
>             errlist <- c(errlist, gettext("reference distribution was not found"))
27c27
<                 errlist <- c(errlist, "Missing or invalid trans component")
---
>                 errlist <- c(errlist, gettextf("missing or invalid '%s' component", "trans"))
29c29
<                 errlist <- c(errlist, "Missing or invalid itrans component")
---
>                 errlist <- c(errlist, gettextf("missing or invalid '%s' component", "itrans"))
31c31
<                 errlist <- c(errlist, "Missing or invalid dtrans component")
---
>                 errlist <- c(errlist, gettextf("missing or invalid '%s' component", "dtrans"))
37c37
<                              "trans and itrans must be inverses of each other")
---
>                              gettext("'trans' and 'itrans' components must be inverses of each other"))
39c39
<                 errlist <- c(errlist, "dtrans must be a 1-1 function")
---
>                 errlist <- c(errlist, gettext("'dtrans()' component must be a 1-1 function"))
49c49
< 	    errlist <- c(errlist, "Missing or invalid init function")
---
> 	    errlist <- c(errlist, gettextf("missing or invalid '%s' function", "init"))
51c51
< 	    errlist <- c(errlist, "Missing or invalid deviance function")
---
> 	    errlist <- c(errlist, gettextf("missing or invalid '%s' function", "deviance"))
53c53
< 	    errlist <- c(errlist, "Missing or invalid density function")
---
> 	    errlist <- c(errlist, gettextf("missing or invalid '%s' function", "density"))
61c61
< 			     "Density function must return a 5 column matrix")
---
> 			     gettext("density function must return a 5 column matrix"))
65c65
< 	    errlist <- c(errlist, "Missing or invalid quantile function")
---
> 	    errlist <- c(errlist, gettextf("missing or invalid '%s' function", "quantile"))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/tcut.S Recommended/survival/R/tcut.S
8c8
< 		stop("Must specify at least one interval")
---
> 		stop("'breaks' argument must specify at least one interval")
12c12
< 		stop("Number of labels must equal number of intervals")
---
> 		stop("number of labels must equal number of intervals")
20,21c20
< 	}
<     else {
---
> 	} else {
25,26c24
< 	    labels <- paste(format(breaks[ - length(breaks)]),
< 			"+ thru ", format(breaks[-1]), sep = "")
---
> 	    labels <- gettextf("%s+ thru %s", format(breaks[ - length(breaks)]), format(breaks[-1]))
28c26
< 	   stop("Number of labels must be 1 less than number of break points")
---
> 	   stop("number of labels must be 1 less than number of break points")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/R/tmerge.R Recommended/survival/R/tmerge.R
26,27c26,27
<         stop("the data1, data2, and id arguments are required")
<     if (!inherits(data1, "data.frame")) stop("data1 must be a data frame")
---
>         stop("'data1', 'data2', and 'id' arguments are required")
>     if (!inherits(data1, "data.frame")) stop(gettextf("'%s' argument must be a data frame", "data1"))
33c33
<             stop("unrecognized option(s):", paste(names(extras), collapse=', '))
---
>             stop(sprintf(ngettext(length(extras), "unrecognized option: %s", "unrecognized options: %s", domain = "R-survival"), paste(names(extras), collapse = ", ")), domain = NA)
35c35
<             stop("idname option must be a valid variable name")
---
>             stop(gettextf("'%s' argument must be a variable name", "idname"))
38c38
<             stop("tstart option must be NULL or a valid variable name")
---
>             stop(gettextf("'%s' argument must be NULL or a variable name", "tstartname"))
40c40
<             stop("tstop option must be a valid variable name") 
---
>             stop(gettextf("'%s' argument must be a variable name", "tstopname"))
42c42
<             stop("delay option must be a number >= 0")
---
>             stop(gettextf("'%s' argument must be a number >= 0", "delay"))
44c44
<             stop("na.rm option must be TRUE or FALSE")
---
>             stop(gettextf("'%s' argument must be TRUE or FALSE", "na.rm"))
51c51
<         stop("data1 does not match its own tname attribute")
---
>         stop("'data1' does not match its own 'tname' attribute")
74c74
<     if (missing(id)) stop("the id argument is required")
---
>     if (missing(id)) stop(gettextf("'%s' argument is required", "id"))
84c84
<                  stop("tstop and id must be the same length")
---
>                  stop(gettextf("'%s' and '%s' arguments must be the same length", "tstop", "id"))
91c91
<                 stop("tstart and id must be the same length")
---
>                  stop(gettextf("'%s' and '%s' arguments must be the same length", "tstart", "id"))
93c93
<                 stop("tstart must be < tstop")
---
>                 stop("'tstart' must be < 'tstop'")
98c98
<             stop("tstart and tstop arguments only apply to the first call")
---
>             stop("'tstart' and 'tstop' arguments only apply to the first call")
109c109
<     if (any(argname== "")) stop("all additional argments must have a name")
---
>     if (any(argname== "")) stop("all additional arguments must have a name")
113,114c113
<         stop(paste("argument(s)", argname[is.na(check)], 
<                        "not a recognized type"))
---
>         stop(gettextf("argument(s) %s not a recognized type", argname[is.na(check)]))
130c129
<             warning("overwriting data1 variables", paste(overwrite, collapse=' '))
---
>             warning(gettextf("overwriting data1 variables %s", paste(overwrite, collapse = " ")))
169c168
<             stop("tstart must be > tstop")
---
>             stop("'tstart' must be > 'tstop'")
179c178
<         if (any(tstart >= tstop)) stop("tstart must be < tstop")
---
>         if (any(tstart >= tstop)) stop("'tstart' must be < 'tstop'")
199c198
<             stop("argument ", argname[ii], " is not the same length as id")
---
>             stop(gettextf("'%s' argument is not the same length as '%s' argument", argname[ii], "id"))
202c201
<                 stop("argument", argname[ii], "is not the same length as id")
---
>                 stop(gettextf("'%s' argument is not the same length as '%s' argument", argname[ii], "id"))
279c278
<             jrep <- rep(1:nrow(newdata), irep)  #stutter the duplicated rows
---
>             jrep <- rep(seq_len(nrow(newdata)), irep)  #stutter the duplicated rows
288c287
<             for (j in 1:nfix) temp[[j]] <-  -(seq(n.add[j] -1, 0)) + iend[j]
---
>             for (j in seq_len(nfix)) temp[[j]] <-  -(seq(n.add[j] -1, 0)) + iend[j]
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/inst/NEWS.Rd Recommended/survival/inst/NEWS.Rd
403c403
< 2    \item Change code in the coxpenal.fit routine: the use of a vector of
---
>     \item Change code in the coxpenal.fit routine: the use of a vector of
Only in Recommended/survival/inst: po
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/agreg.Rnw Recommended/survival/noweb/agreg.Rnw
76c76
< 	x <- matrix(as.double(1:n), ncol=1)  #keep the .C call happy
---
> 	x <- matrix(as.double(seq_len(n)), ncol=1)  #keep the .C call happy
135,137c135,136
<             warning(paste("Loglik converged before variable ",
<                           paste((1:nvar)[infs],collapse=","),
< 				      "; beta may be infinite. "))
---
>             warning(gettextf("Loglik converged before variable %s; beta may be infinite.",
>                           paste(seq_len(nvar)[infs], collapse = ", ")))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/concordance.Rnw Recommended/survival/noweb/concordance.Rnw
108c108
<     yet.to.do <- 1:n
---
>     yet.to.do <- seq_len(n)
653c653
<         cat("Call:\n")
---
>         cat(gettext("Call:", domain = "R-survival"), "\n", sep = "")
661c661
<     cat("Concordance= ", format(x$concordance), " se= ", format(x$std.err),
---
>     cat(gettextf("Concordance= %s se= %s", format(x$concordance), format(x$std.err), domain = "R-survival"),
731c731
<         for (i in 1:length(ustrat)) {
---
>         for (i in seq_along(ustrat)) {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/coxph.Rnw Recommended/survival/noweb/coxph.Rnw
26,27c26
< 	stop(paste("Cox model doesn't support \"", type,
< 			  "\" survival data", sep=''))
---
> 	stop(gettextf("Cox model doesn't support \"%s\" survival data", type))
99c98
< if (nrow(mf) ==0) stop("No (non-missing) observations")
---
> if (nrow(mf) ==0) stop("no (non-missing) observations")
111,112c110
<         stop(gettextf("Argument %s not matched", names(extraArgs)[indx==0L]),
<              domain = NA)
---
>         stop(gettextf("argument %s was not matched", names(extraArgs)[indx==0L]), domain = "R-survival")
164c162
<         stop("The tt argument must contain function or list of functions")
---
>         stop(gettextf("'%s' argument must contain a function or list of functions", "tt"))
168c166
<             for (i in 1:ntrans) temp[[i]] <- tt[[1]]
---
>             for (i in seq_len(ntrans)) temp[[i]] <- tt[[1]]
171c169
<         else stop("Wrong length for tt argument")
---
>         else stop(gettextf("wrong length for '%s' argument", "tt"))
174c172
< else stop("The tt argument must contain a function or list of functions")
---
> else stop(gettextf("'%s' argument must contain a function or list of functions", "tt"))
244c242
< strats <- rep(1:length(counts$nrisk), counts$nrisk)
---
> strats <- rep(seq_along(counts$nrisk), counts$nrisk)
252c250
< for (i in 1:ntrans) {
---
> for (i in seq_len(ntrans)) {
575c573
<     if (length(init) != ncol(X)) stop("wrong length for init argument")
---
>     if (length(init) != ncol(X)) stop(gettextf("wrong length for '%s' argument", "init"))
612c610
<     else stop(paste ("Unknown method", method))
---
>     else stop(gettextf("unknown '%s' method", method))
626,628c624,625
<        vars <- (1:length(fit$coefficients))[is.na(fit$coefficients)]
<        msg <-paste("X matrix deemed to be singular; variable",
<     		   paste(vars, collapse=" "))
---
>        vars <- seq_along(fit$coefficients)[is.na(fit$coefficients)]
>        msg <- gettextf("X matrix deemed to be singular; variable %s", paste(vars, collapse=" "))
672c669
<     		  init[1:length(fit$coefficients)])[nabeta]
---
>     		  init[seq_along(fit$coefficients)])[nabeta]
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/coxsurv.Rnw Recommended/survival/noweb/coxsurv.Rnw
217c217
<     stop("Cannot handle \"", type, "\" type survival data")
---
>     stop(gettextf("Cannot handle \"%s\" type survival data", type))
400c400
<     if (individual) stop("newdata must be a data frame")
---
>     if (individual) stop(gettextf("'%s' argument must be a data frame", "newdata"))
402c402
<         stop("Newdata argument must be a data frame")
---
>         stop(gettextf("'%s' argument must be a data frame", "newdata"))
513c513
<         stop("The newdata argument must be present when individual=TRUE")
---
>         stop("The newdata argument must be present when 'individual=TRUE'")
516c516
<         if (is.null(id)) stop("id=NULL is an invalid argument")
---
>         if (is.null(id)) stop("'id=NULL' is an invalid argument")
532c532
<         stop("Individual=TRUE is only valid for counting process data")
---
>         stop("'individual=TRUE' is only valid for counting process data")
582c582
< indx1 <- split(1:nr, rep(1:length(result$strata), result$strata))
---
> indx1 <- split(seq_len(nr), rep(seq_along(result$strata), result$strata))
660c660
< result <- c(result[1:indx], type=attr(y, 'type'), result[-(1:indx)])
---
> result <- c(result[seq_len(indx)], type=attr(y, 'type'), result[-seq_len(indx)])
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/coxsurv2.Rnw Recommended/survival/noweb/coxsurv2.Rnw
51c51
<     for (i in 1:nstrata) {
---
>     for (i in seq_len(nstrata)) {
164c164
<             for (i in 1:nrow(x2)) {
---
>             for (i in seq_len(nrow(x2))) {
235c235
<         for (i in 1:ntarget) {
---
>         for (i in seq_len(ntarget)) {
288c288
<         for (i in 1:length(uid)) {
---
>         for (i in seq_along(uid)) {
385c385
<         indx  <- approx(etime, 1:length(etime), time, method='constant',
---
>         indx  <- approx(etime, seq_along(etime), time, method='constant',
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/finegray.Rnw Recommended/survival/noweb/finegray.Rnw
32c32
<     if (indx[1] ==0) stop("A formula argument is required")
---
>     if (indx[1] ==0) stop(gettextf("'%s' argument is required", "formula"))
42c42
<     if (nrow(mf) ==0) stop("No (non-missing) observations")
---
>     if (nrow(mf) ==0) stop("no (non-missing) observations")
46c46
<     if (!inherits(Y, "Surv")) stop("Response must be a survival object")
---
>     if (!inherits(Y, "Surv")) stop(gettextf("'%s' argument is not an object of class %s", "formula", dQuote("Surv")))
68c68
<         if (!is.null(id)) stop("an id argument and a cluster() term are redundant")
---
>         if (!is.null(id)) stop("'id' argument and a 'cluster()' term are redundant")
105c105
<             stop ("etype argument has a state that is not in the data")
---
>             stop("'etype' argument has a state that is not in the data")
294c294
<     tlist <- lapply(1:max(istrat), stratfun)
---
>     tlist <- lapply(seq_len(max(istrat)), stratfun)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/plot.Rnw Recommended/survival/noweb/plot.Rnw
76c76
<         for (j in 1:ncol(ssurv)) {
---
>         for (j in seq_len(ncol(ssurv))) {
133c133
<     stemp <- rep(1:nstrat, x$strata) # same length as stime
---
>     stemp <- rep(seq_len(nstrat), x$strata) # same length as stime
155c155
<     for (i in 1:nstrat) {
---
>     for (i in seq_len(nstrat)) {
158,159c158,159
<             keepx <- c(keepx, 1:tempn[i] + offset[i])
<             keepy <- c(keepy, 1:tempn[i] + offset[i])
---
>             keepx <- c(keepx, seq_len(tempn[i]) + offset[i])
>             keepy <- c(keepy, seq_len(tempn[i]) + offset[i])
162c162
<             bad <- min((1:tempn[i])[ttime>xmax])
---
>             bad <- min(seq_len(tempn[i])[ttime>xmax])
169,170c169,170
<             else  keepy<- c(keepy, c(1:(bad-1), bad-1) + offset[i])
<             keepx <- c(keepx, (1:bad)+offset[i])
---
>             else  keepy<- c(keepy, c(seq_len(bad-1), bad-1) + offset[i])
>             keepx <- c(keepx, seq_len(bad)+offset[i])
203c203
<     else stop("Invalid 'fun' argument")
---
>     else stop(gettextf("invalid '%s' argument", "fun"))
244c244
<     if (!is.numeric(conf.times)) stop('conf.times must be numeric')
---
>     if (!is.numeric(conf.times)) stop(gettextf("'%s' argument must be numeric", "conf.times"))
251c251
<     if (is.na(temp)) stop("invalid value for conf.int")
---
>     if (is.na(temp)) stop(gettextf("invalid '%s' argument", "conf.int"))
443c443
<     temp.offset <- (1:ncurve - (ncurve-1)/2)* conf.offset* diff(par("usr")[1:2])
---
>     temp.offset <- (seq_len(ncurve) - (ncurve-1)/2)* conf.offset* diff(par("usr")[1:2])
447c447
< for (j in 1:ncol(ssurv)) {
---
> for (j in seq_len(ncol(ssurv))) {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/pyears.Rnw Recommended/survival/noweb/pyears.Rnw
61c61
<         stop("Can have only 1 ratetable() call in a formula")
---
>         stop("Can have only 1 'ratetable()' call in a formula")
84,86c84
<             warning(paste(nzero, 
<                      "observations with an event and 0 follow-up time,",
<                    "any rate calculations are statistically questionable"))
---
>             warning(sprintf(ngettext(nzero, "%d observation with an event and 0 follow-up time, any rate calculations are statistically questionable","%d observations with an event and 0 follow-up time, any rate calculations are statistically questionable", domain = "R-survival"), nzero), domain = NA)
93c91
< if (is.null(n) || n==0) stop("Data set has 0 observations")
---
> if (is.null(n) || n==0) stop("data set has 0 observations")
153c151
<     for (i in 1:odim) {
---
>     for (i in seq_len(odim)) {
252c250
<         else stop("Can't find an appropriate date class\n") 
---
>         else stop("Can't find an appropriate date class") 
261c259
<             cuts[[temp]] <- round(approx(nint*(1:nyear), cuts[[temp]],
---
>             cuts[[temp]] <- round(approx(nint*(seq_len(nyear)), cuts[[temp]],
330c328
<     row.names(df) <- 1:nrow(df)
---
>     row.names(df) <- seq_len(nrow(df))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/statefig.Rnw Recommended/survival/noweb/statefig.Rnw
58c58
<     space <- function(n) (1:n -.5)/n   # centers of the boxes
---
>     space <- function(n) (seq_len(n) -.5)/n   # centers of the boxes
66c66
<         for (i in 1:n) cbox[ix==i,2] <- 1 -space(layout[i])
---
>         for (i in seq_len(n)) cbox[ix==i,2] <- 1 -space(layout[i])
69c69
<         for (i in 1:n) cbox[ix==i,1] <- space(layout[i])
---
>         for (i in seq_len(n)) cbox[ix==i,1] <- space(layout[i])
93c93
<     for (i in 1:nstate) 
---
>     for (i in seq_len(nstate)) 
237,238c237,238
< for (i in 1:nstate) {
<     for (j in 1:nstate) {
---
> for (i in seq_len(nstate)) {
>     for (j in seq_len(nstate)) {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/survexp.Rnw Recommended/survival/noweb/survexp.Rnw
132c132
<         stop("Can have only 1 ratetable() call in a formula")
---
>         stop("Can have only 1 'ratetable()' call in a formula")
140c140
<         stop("The ratetable() call in a formula is depreciated")
---
>         stop("The 'ratetable()' call in a formula is depreciated")
150c150
<         stop ("Invalid rcall argument")
---
>         stop(gettextf("invalid '%s' argument", "rcall"))
166c166
<     stop("Variable not found in the ratetable:", (names(rcall))[is.na(temp)])
---
>     stop(gettextf("Variable not found in the ratetable: %s", (names(rcall))[is.na(temp)]))
204c204
< if (n==0) stop("Data set has 0 rows")
---
> if (n==0) stop("data set has 0 rows")
206c206
<     warning("se.fit value ignored")
---
>     warning("'se.fit' value ignored")
236c236
<             stop("either a times argument or a response is needed")
---
>             stop("either a 'times' argument or a 'response' is needed")
318c318
< 	 temp <- survexp.fit (1:n, R, Y, max(Y), TRUE, ratetable)
---
> 	 temp <- survexp.fit (seq_len(n), R, Y, max(Y), TRUE, ratetable)
322c322
<         temp <- survexp.cfit(1:n, rdata, Y, 'individual', ratetable)
---
>         temp <- survexp.cfit(seq_len(n), rdata, Y, 'individual', ratetable)
345c345
<     for (i in 1:odim) {
---
>     for (i in seq_len(odim)) {
383c383
<         keep <- approx(temp$time, 1:n, xout=times, yleft=0,
---
>         keep <- approx(temp$time, seq_len(n), xout=times, yleft=0,
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/survfit.Rnw Recommended/survival/noweb/survfit.Rnw
78c78
<         temp <- 1:length(target)
---
>         temp <- seq_along(target)
105,107c105
<                 stop(paste("strata", 
<                                paste(i[is.na(indx)], collapse=' '),
<                                'not matched'))
---
>                 stop(gettextf("strata %s not matched", paste(i[is.na(indx)], collapse=' ')))
111c109
<             temp <- rep(1:length(x$strata), x$strata)
---
>             temp <- rep(seq_along(x$strata), x$strata)
178c176
<     if (indx[1]==0) stop("a formula argument is required")
---
>     if (indx[1]==0) stop(gettextf("'%s' argument is required", "formula"))
190c188
<     if (!is.Surv(Y)) stop("Response must be a survival object")
---
>     if (!is.Surv(Y)) stop(gettextf("'%s' argument is not an object of class %s", "formula", dQuote("Surv")))
211c209
<     if (!is.Surv(Y)) stop("y must be a Surv object")
---
>     if (!is.Surv(Y)) stop(gettextf("'%s' argument is not an object of class %s", "y", dQuote("Surv")))
218c216
<             stop("cannot use both the etype argument and mstate survival type")
---
>             stop("cannot use both the 'etype' argument and 'mstate' survival type")
220c218
<             stop("cannot use both the etype and istate arguments")
---
>             stop("cannot use both the 'etype' and 'istate' arguments")
237c235
<         else stop("etype argument incompatable with survival type")
---
>         else stop("'etype' argument incompatable with survival type")
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/survfitCI.Rnw Recommended/survival/noweb/survfitCI.Rnw
70,71c70
<          stop(paste("multi-state computation doesn't support \"", type,
<                           "\" survival data", sep=''))
---
>          stop(gettextf("multi-state computation doesn't support \"%s\" survival data", type))
97c96
<                 stop("istate should be a vector of integers or a factor")
---
>                 stop("'istate' argument should be a vector of integers or a factor")
102c101
<     if (length(id) ==0) id <- 1:n
---
>     if (length(id) ==0) id <- seq_len(n)
106c105
<     if (length(istate) !=n) stop ("wrong length for istate")
---
>     if (length(istate) !=n) stop(gettextf("'%s' argument is of the wrong length", "istate"))
109c108
<     states <- unique(c(1:nstate, istate))
---
>     states <- unique(c(seq_len(nstate), istate))
132,133c131,132
<         transitions <- table(factor(istate, 1:nst), factor(Y[,2], 1:nstate))
<         dimnames(transitions) <-list(from=state.names, to=state.names[1:nstate])
---
>         transitions <- table(factor(istate, seq_len(nst)), factor(Y[,2], seq_len(nstate)))
>         dimnames(transitions) <-list(from=state.names, to=state.names[seq_len(nstate)])
261c260
<     stop("subject is in two different groups, id ", id[indx1[who]])
---
>     stop(gettextf("subject is in two different groups, id %s", id[indx1[who]]))
265c264
<     stop("gap in follow-up, id ", id[indx1[who]])
---
>     stop(gettextf("gap in follow-up, id %s", id[indx1[who]]))
272c271
<     warning("subject changes to the same state, id ", id[indx1[who]])
---
>     warning(gettextf("subject changes to the same state, id %s", id[indx1[who]]))
278,279c277,278
< transitions <- table(factor(istate[first], 1:nst), 
<                      factor(Y[first,3], 1:nstate))
---
> transitions <- table(factor(istate[first], seq_len(nst)), 
>                      factor(Y[first,3], seq_len(nstate)))
281,283c280,282
<     transitions <- transitions + table(factor(Y[indx1[same],3], 1:nst),
<                                        factor(Y[indx2[same],3], 1:nstate))
< dimnames(transitions) = list(from=state.names, to=state.names[1:nstate])
---
>     transitions <- transitions + table(factor(Y[indx1[same],3], seq_len(nst)),
>                                        factor(Y[indx2[same],3], seq_len(nstate)))
> dimnames(transitions) = list(from=state.names, to=state.names[seq_len(nstate)])
461c460
<         for (j in 1:nstate) 
---
>         for (j in seq_len(nstate)) 
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/survfitKM.Rnw Recommended/survival/noweb/survfitKM.Rnw
37,38c37,38
<     if (!is.Surv(y)) stop("y must be a Surv object")
<     if (!is.factor(x)) stop("x must be a factor")
---
>     if (!is.Surv(y)) stop(gettextf("'%s' argument is not an object of class %s", "y", dQuote("Surv")))
>     if (!is.factor(x)) stop(gettextf("'%s' argument must be a factor", "x"))
52,53c52
< 		stop(paste("start.time =", start.time,
< 			   "is greater than all time points."))
---
> 		stop(gettextf("start.time = %s is greater than all time points.", start.time))
78c77
< for (i in 1:nstrat) {
---
> for (i in seq_len(nstrat)) {
117c116
<     stop("subject is in two different groups, id ", (id[indx1])[who])
---
>     stop(gettextf("subject is in two different groups, id %s", (id[indx1])[who]))
121c120
<     stop("gap in follow-up, id ", (id[indx1])[who])
---
>     stop(gettextf("gap in follow-up, id %s", (id[indx1])[who]))
128c127
<     stop("subject changes to the same state, id ", (id[indx1])[who])
---
>     stop(gettextf("subject changes to the same state, id %s", (id[indx1])[who]))
132c131
<     stop("subject changes case weights, id ", (id[indx1])[who])
---
>     stop(gettextf("subject changes case weights, id %s", (id[indx1])[who]))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/survfitms.Rnw Recommended/survival/noweb/survfitms.Rnw
40c40
<         temp <- 1:length(target)
---
>         temp <- seq_along(target)
61c61
<         i2 <- 1:n
---
>         i2 <- seq_len(n)
67c67
<             stop("subscript out of bounds")
---
>             stop("subscript is out of bounds")
70,72c70
<             stop(paste("strata", 
<                        paste(i[is.na(indx)], collapse=' '),
<                        'not matched'))
---
>             stop(gettextf("strata %s not matched", paste(i[is.na(indx)], collapse=' ')))
76c74
<         temp <- rep(1:length(x$strata), x$strata)
---
>         temp <- rep(seq_along(x$strata), x$strata)
86c84
<             stop("subscript out of bounds", j[is.na(indx)])
---
>             stop("subscript is out of bounds")
164c162
< 	    stop("summary.survfit can only be used for survfit objects")
---
> 	    stop("'summary.survfit()' function can only be used for objects of class \"survfit\"")
179c177
<         if (length(rmean)==0) stop("Invalid value for rmean option")
---
>         if (length(rmean)==0) stop("Invalid value for 'rmean' option")
212c210
<             for (i in 1:nstrat) 
---
>             for (i in seq_len(nstrat)) 
228c226
<         fit$strata <- factor(rep(1:nstrat, fit$strata), 1:nstrat,
---
>         fit$strata <- factor(rep(seq_len(nstrat), fit$strata), seq_len(nstrat),
257c255
<         sindx <- rep(1:nstrat, fit$strata)
---
>         sindx <- rep(seq_len(nstrat), fit$strata)
260c258
<                 fit[[i]] <- unlist(sapply(1:nstrat, function(j) 
---
>                 fit[[i]] <- unlist(sapply(seq_len(nstrat), function(j) 
265c263
<         fit$strata[] <- as.vector(table(factor(sindx[index], 1:nstrat))) 
---
>         fit$strata[] <- as.vector(table(factor(sindx[index], seq_len(nstrat)))) 
391c389
< 	    stop("summary.survfitms can only be used for survfitms objects")
---
> 	    stop("'summary.survfitms()' can only be used for objects of class \"survfitms\"")
406c404
<         if (length(rmean)==0) stop("Invalid value for rmean option")
---
>         if (length(rmean)==0) stop("Invalid value for 'rmean' option")
414c412
<         if (!is.numeric(times)) stop ("times must be numeric")
---
>         if (!is.numeric(times)) stop(gettextf("'%s' argument must be numeric", "times"))
420c418
<         sindx <- rep(1:nstrat, fit$strata)
---
>         sindx <- rep(seq_len(nstrat), fit$strata)
443c441
<             for (i in 1:nstrat) 
---
>             for (i in seq_len(nstrat)) 
478c476
< 	cat("Call: ")
---
> 	cat(gettext("Call:", domain = "R-survival"))
496c494
<         if (length(rmean)==0) stop("Invalid value for rmean option")
---
>         if (length(rmean)==0) stop("Invalid value for 'rmean' option")
510,512c508,509
<              cat("   *mean time in state, restricted (max time =", 
<                  format(etime, ...), ")\n")
<         else cat("   *mean time in state, restricted (per curve cutoff)\n")
---
>              cat(gettextf("   *mean time in state, restricted (max time = %s)\n", format(etime, ...), domain = "R-survival"))
>         else cat(gettextf("   *mean time in state, restricted (per curve cutoff)\n", domain = "R-survival"))
525c522
<         igrp <- rep(1:ngrp, x$strata)
---
>         igrp <- rep(seq_len(ngrp), x$strata)
538c535
<         dimnames(nevent) <- list(rname, x$states[1:nc])
---
>         dimnames(nevent) <- list(rname, x$states[seq_len(nc)])
547c544
<     outmat[1:length(nevent), 2] <- c(nevent)
---
>     outmat[seq_along(nevent), 2] <- c(nevent)
562c559
<         for (i in 1:ngrp) {
---
>         for (i in seq_len(ngrp)) {
572c569
<             if (length(delta) > nrow(temp)) delta <- delta[1:nrow(temp)]
---
>             if (length(delta) > nrow(temp)) delta <- delta[seq_len(nrow(temp))]
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/noweb/tmerge.Rnw Recommended/survival/noweb/tmerge.Rnw
62,63c62,63
<         stop("the data1, data2, and id arguments are required")
<     if (!inherits(data1, "data.frame")) stop("data1 must be a data frame")
---
>         stop("'data1', 'data2', and 'id' arguments are required")
>     if (!inherits(data1, "data.frame")) stop(gettextf("'%s' argument must be a data frame", "data1"))
82c82
<         stop("unrecognized option(s):", paste(names(extras), collapse=', '))
---
>         stop(sprintf(ngettext(length(extras), "unrecognized option: %s", "unrecognized options: %s", domain = "R-survival"), paste(names(extras), collapse = ", ")), domain = NA)
84c84
<         stop("idname option must be a valid variable name")
---
>         stop(gettextf("'%s' argument must be a variable name", "idname"))
87c87
<         stop("tstart option must be NULL or a valid variable name")
---
>         stop(gettextf("'%s' argument must be NULL or a variable name", "tstartname"))
89c89
<         stop("tstop option must be a valid variable name") 
---
>         stop(gettextf("'%s' argument must be a variable name", "tstopname"))
91c91
<         stop("delay option must be a number >= 0")
---
>         stop(gettextf("'%s' argument must be a number >= 0", "delay"))
93c93
<         stop("na.rm option must be TRUE or FALSE")
---
>         stop(gettextf("'%s' argument must be TRUE or FALSE", "na.rm"))
100c100
<     stop("data1 does not match its own tname attribute")
---
>     stop("'data1' does not match its own 'tname' attribute")
123c123
< if (missing(id)) stop("the id argument is required")
---
> if (missing(id)) stop(gettextf("'%s' argument is required", "id"))
133c133
<              stop("tstop and id must be the same length")
---
>              stop(gettextf("'%s' and '%s' arguments must be the same length", "tstop", "id"))
140c140
<             stop("tstart and id must be the same length")
---
>              stop(gettextf("'%s' and '%s' arguments must be the same length", "tstart", "id"))
142c142
<             stop("tstart must be < tstop")
---
>             stop("'tstart' must be < 'tstop'")
147c147
<         stop("tstart and tstop arguments only apply to the first call")
---
>         stop("'tstart' and 'tstop' arguments only apply to the first call")
166c166
< if (any(argname== "")) stop("all additional argments must have a name")
---
> if (any(argname== "")) stop("all additional arguments must have a name")
170,171c170
<     stop(paste("argument(s)", argname[is.na(check)], 
<                    "not a recognized type"))
---
>     stop(gettextf("argument(s) %s not a recognized type", argname[is.na(check)]))
212c211
<         warning("overwriting data1 variables", paste(overwrite, collapse=' '))
---
>         warning(gettextf("overwriting data1 variables %s", paste(overwrite, collapse = " ")))
251c250
<         stop("tstart must be > tstop")
---
>         stop("'tstart' must be > 'tstop'")
261c260
<     if (any(tstart >= tstop)) stop("tstart must be < tstop")
---
>     if (any(tstart >= tstop)) stop("'tstart' must be < 'tstop'")
293c292
<         stop("argument ", argname[ii], " is not the same length as id")
---
>         stop(gettextf("'%s' argument is not the same length as '%s' argument", argname[ii], "id"))
296c295
<             stop("argument", argname[ii], "is not the same length as id")
---
>             stop(gettextf("'%s' argument is not the same length as '%s' argument", argname[ii], "id"))
437c436
<     jrep <- rep(1:nrow(newdata), irep)  #stutter the duplicated rows
---
>     jrep <- rep(seq_len(nrow(newdata)), irep)  #stutter the duplicated rows
446c445
<     for (j in 1:nfix) temp[[j]] <-  -(seq(n.add[j] -1, 0)) + iend[j]
---
>     for (j in seq_len(nfix)) temp[[j]] <-  -(seq(n.add[j] -1, 0)) + iend[j]
Only in Recommended/survival: po
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/agexact.c Recommended/survival/src/agexact.c
56,62c56,61
< 	     double *stop,   Sint *event,    double *covar2,double *offset, 
< 	     Sint   *strata, double *means,  double *beta,  double *u, 
< 	     double *imat2,  double loglik[2], Sint *flag,  double *work, 
< 	     Sint   *work2,  double *eps,    double *tol_chol, double *sctest)
< {
<     int i,j,k, l, person;
<     int     iter;
---
> 		double *stop, Sint *event, double *covar2, double *offset, Sint *strata,
> 		double *means, double *beta, double *u, double *imat2, double loglik[2],
> 		Sint *flag, double *work, Sint *work2, double *eps, double *tol_chol,
> 		double *sctest) {
> 	int i, k;
> 
95c94
<     for (i=0; i<nvar; i++) {
---
> 	for (int i = 0; i < nvar; i++) {
97c96,97
< 	for (person=0; person<n; person++) temp += covar[i][person];
---
> 		for (int person = 0; person < n; person++)
> 			temp += covar[i][person];
100c100,101
< 	for (person=0; person<n; person++) covar[i][person] -= temp;
---
> 		for (int person = 0; person < n; person++)
> 			covar[i][person] -= temp;
107c108
<     for (i=0; i<nvar; i++) {
---
> 	for (int i = 0; i < nvar; i++) {
109c110
< 	for (j=0; j<nvar; j++)
---
> 		for (int j = 0; j < nvar; j++)
113c114
<     for (person=0; person<n; person++) {
---
> 	for (int person = 0; person < n; person++) {
115c116
< 	for (i=0; i<nvar; i++)
---
> 		for (int i = 0; i < nvar; i++)
120,121c121,123
<     for (person=0; person<n;) {
< 	if (event[person]==0) person++;
---
> 	for (int person = 0; person < n;) {
> 		if (event[person] == 0)
> 			person++;
124c126
< 	    for (i=0; i<nvar; i++) {
---
> 			for (int i = 0; i < nvar; i++) {
126c128,129
< 		for (j=0; j<nvar; j++)  cmat[i][j]=0;
---
> 				for (int j = 0; j < nvar; j++)
> 					cmat[i][j] = 0;
135,136c138,140
< 	    for (k=person; k<n; k++) {
< 		if (stop[k]==time) deaths += event[k];
---
> 			for (int k = person; k < n; k++) {
> 				if (stop[k] == time)
> 					deaths += event[k];
141c145,146
< 		if (strata[k]==1) break;
---
> 				if (strata[k] == 1)
> 					break;
149c154
< 		for (l=0; l<nrisk; l++) {
---
> 				for (int l = 0; l < nrisk; l++) {
153c158
< 		    for (i=0; i<nvar; i++) {
---
> 					for (int i = 0; i < nvar; i++) {
155c160
< 			for (j=0; j<=i; j++)
---
> 						for (int j = 0; j <= i; j++)
159,160c164
< 		}
< 	    else {
---
> 			} else {
169c173,174
< 		    for (i=0; i<nvar; i++) newvar[i]=0;
---
> 					for (i = 0; i < nvar; i++)
> 						newvar[i] = 0;
171c176
< 		    for (l=0; l<deaths; l++) {
---
> 					for (int l = 0; l < deaths; l++) {
174c179,180
< 			for (i=0; i<nvar; i++)  newvar[i]+= covar[i][k];
---
> 						for (int i = 0; i < nvar; i++)
> 							newvar[i] += covar[i][k];
177c183
< 		    for (i=0; i<nvar; i++) {
---
> 					for (int i = 0; i < nvar; i++) {
179c185
< 			for (j=0; j<=i; j++)
---
> 						for (int j = 0; j <= i; j++)
188c194
< 	    for (i=0; i<nvar; i++) {
---
> 			for (int i = 0; i < nvar; i++) {
190c196
< 		for (j=0; j<=i; j++)
---
> 				for (int j = 0; j <= i; j++)
193c199
< 	    for (k=person; k<n && stop[k]==time; k++) {
---
> 			for (int k = person; k < n && stop[k] == time; k++) {
196c202,203
< 		    for (i=0; i<nvar; i++) u[i] += covar[i][k];
---
> 					for (int i = 0; i < nvar; i++)
> 						u[i] += covar[i][k];
199c206,207
< 		if (strata[k]==1) break;
---
> 				if (strata[k] == 1)
> 					break;
210c218
<     for (i=0; i<nvar; i++) /*use 'a' as a temp to save u0, for the score test*/
---
> 	for (int i = 0; i < nvar; i++) /*use 'a' as a temp to save u0, for the score test*/
217c225
<     for (i=0; i<nvar; i++)
---
> 	for (int i = 0; i < nvar; i++)
224c232
<     for (i=0; i<nvar; i++) {
---
> 	for (int i = 0; i < nvar; i++) {
229,230c237,239
< 	for (i=1; i<nvar; i++)
< 	    for (j=0; j<i; j++)  imat[i][j] = imat[j][i];
---
> 		for (int i = 1; i < nvar; i++)
> 			for (int j = 0; j < i; j++)
> 				imat[i][j] = imat[j][i];
239c248
<     for (iter=1; iter<=*maxiter; iter++) {
---
> 	for (int iter = 1; iter <= *maxiter; iter++) {
241c250
< 	for (i=0; i<nvar; i++) {
---
> 		for (int i = 0; i < nvar; i++) {
243c252
< 	    for (j=0; j<nvar; j++)
---
> 			for (int j = 0; j < nvar; j++)
247c256
< 	for (person=0; person<n; person++) {
---
> 		for (int person = 0; person < n; person++) {
249c258
< 	    for (i=0; i<nvar; i++)
---
> 			for (int i = 0; i < nvar; i++)
254c263
< 	for (person=0; person<n; ) {
---
> 		for (int person = 0; person < n;) {
256c265,266
< 	    if (event[person]==0) person++;
---
> 			if (event[person] == 0)
> 				person++;
259c269
< 		for (i=0; i<nvar; i++) {
---
> 				for (int i = 0; i < nvar; i++) {
261c271,272
< 		    for (j=0; j<nvar; j++)  cmat[i][j]=0;
---
> 					for (int j = 0; j < nvar; j++)
> 						cmat[i][j] = 0;
270,271c281,283
< 		for (k=person; k<n; k++) {
< 		    if (stop[k]==time) deaths += event[k];
---
> 				for (int k = person; k < n; k++) {
> 					if (stop[k] == time)
> 						deaths += event[k];
276c288,289
< 		    if (strata[k]==1) break;
---
> 					if (strata[k] == 1)
> 						break;
284c297
< 		    for (l=0; l<nrisk; l++) {
---
> 					for (int l = 0; l < nrisk; l++) {
288c301
< 			for (i=0; i<nvar; i++) {
---
> 						for (int i = 0; i < nvar; i++) {
290,292c303,305
< 			    for (j=0; j<=i; j++)
< 				cmat[i][j] += weight*covar[i][k]*covar[j][k];
< 			    }
---
> 							for (int j = 0; j <= i; j++)
> 								cmat[i][j] += weight * covar[i][k]
> 										* covar[j][k];
295c308
< 		else {
---
> 				} else {
304c317,318
< 			for (i=0; i<nvar; i++) newvar[i]=0;
---
> 						for (int i = 0; i < nvar; i++)
> 							newvar[i] = 0;
306c320
< 			for (l=0; l<deaths; l++) {
---
> 						for (int l = 0; l < deaths; l++) {
309c323,324
< 			    for (i=0; i<nvar; i++)  newvar[i]+= covar[i][k];
---
> 							for (int i = 0; i < nvar; i++)
> 								newvar[i] += covar[i][k];
312c327
< 			for (i=0; i<nvar; i++) {
---
> 						for (int i = 0; i < nvar; i++) {
314c329
< 			    for (j=0; j<=i; j++)
---
> 							for (int j = 0; j <= i; j++)
323c338
< 		for (i=0; i<nvar; i++) {
---
> 				for (int i = 0; i < nvar; i++) {
325,326c340,342
< 		    for (j=0; j<=i; j++)
< 			imat[j][i] += (cmat[i][j] - a[i]*a[j]/denom)/denom;
---
> 					for (int j = 0; j <= i; j++)
> 						imat[j][i] += (cmat[i][j] - a[i] * a[j] / denom)
> 								/ denom;
328c344
< 		for (k=person; k<n && stop[k]==time; k++) {
---
> 				for (int k = person; k < n && stop[k] == time; k++) {
331c347,348
< 			for (i=0; i<nvar; i++) u[i] += covar[i][k];
---
> 						for (int i = 0; i < nvar; i++)
> 							u[i] += covar[i][k];
334c351,352
< 		    if (strata[k]==1) break;
---
> 					if (strata[k] == 1)
> 						break;
347,349c365,368
< 	    for (i=1; i<nvar; i++)
< 		for (j=0; j<i; j++)  imat[i][j] = imat[j][i];
< 	    for (i=0; i<nvar; i++)
---
> 			for (int i = 1; i < nvar; i++)
> 				for (int j = 0; j < i; j++)
> 					imat[i][j] = imat[j][i];
> 			for (int i = 0; i < nvar; i++)
355c374,375
< 	if (iter==*maxiter) break;  /*skip the step halving and etc */
---
> 		if (iter == *maxiter)
> 			break; /*skip the step halving and etc */
359c379
< 		for (i=0; i<nvar; i++)
---
> 			for (int i = 0; i < nvar; i++)
361,362c381
< 		}
< 	    else {
---
> 		} else {
367,368c386
< 		j=0;
< 		for (i=0; i<nvar; i++) {
---
> 			for (int i = 0; i < nvar; i++) {
377,379c395,398
<     for (i=1; i<nvar; i++)
< 	for (j=0; j<i; j++)  imat[i][j] = imat[j][i];
<     for (i=0; i<nvar; i++)
---
> 	for (int i = 1; i < nvar; i++)
> 		for (int j = 0; j < i; j++)
> 			imat[i][j] = imat[j][i];
> 	for (int i = 0; i < nvar; i++)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/agfit5.c Recommended/survival/src/agfit5.c
93,101c93,97
< void agfit5a(Sint *nusedx, Sint *nvarx, double *yy, 
< 	       double *covar2, double *offset2,
< 	       double *weights2, 
< 	       Sint   *strata,  Sint   *sort,
< 	       double *means, double *beta, double *u, 
< 	       double *loglik, 
< 	       Sint *methodx, Sint *ptype2, Sint *pdiag2,
< 	       Sint *nfrail,  Sint *frail2,
<                void *fexpr1, void *fexpr2, void *rho) {
---
> void agfit5a(Sint *nusedx, Sint *nvarx, double *yy, double *covar2,
> 		double *offset2, double *weights2, Sint *strata, Sint *sort,
> 		double *means, double *beta, double *u, double *loglik, Sint *methodx,
> 		Sint *ptype2, Sint *pdiag2, Sint *nfrail, Sint *frail2, void *fexpr1,
> 		void *fexpr2, void *rho) {
103c99
<     int i,j,k, person;
---
> 	int i, j, k;
148c144
<     for (i=0; i<nused; i++) {
---
> 	for (int i = 0; i < nused; i++) {
162,163c158,165
<     if (nf > nvar) i=nf; else i=nvar;
<     if (nf > nvar*nvar) j=nf; else j=nvar*nvar;
---
> 	if (nf > nvar)
> 		i = nf;
> 	else
> 		i = nvar;
> 	if (nf > nvar * nvar)
> 		j = nf;
> 	else
> 		j = nvar * nvar;
167,168c169,172
<     if (ptype>1)  zflag = Calloc(nvar, Sint);
<     else          zflag = Calloc(2, Sint);
---
> 	if (ptype > 1)
> 		zflag = Calloc(nvar, Sint);
> 	else
> 		zflag = Calloc(2, Sint);
172c176,177
< 	for (i=0; i<nused; i++) frail[i] = frail2[i];
---
> 		for (int i = 0; i < nused; i++)
> 			frail[i] = frail2[i];
179c184
<     for (i=0; i<nvar; i++) {
---
> 	for (int i = 0; i < nvar; i++) {
181c186,187
< 	for (person=0; person<nused; person++) temp += covar[i][person];
---
> 		for (int person = 0; person < nused; person++)
> 			temp += covar[i][person];
184c190,191
< 	for (person=0; person<nused; person++) covar[i][person] -=temp;
---
> 		for (int person = 0; person < nused; person++)
> 			covar[i][person] -= temp;
193c200
<     for (person=0; person<nused; person++) {
---
> 	for (int person = 0; person < nused; person++) {
195c202
<         for (i=0; i<nvar; i++)
---
> 		for (int i = 0; i < nvar; i++)
219c226
<     for (person=0; person<nused;) {
---
> 	for (int person = 0; person < nused;) {
225,226c232
< 	    }
< 	else {
---
> 		} else {
233c239,240
< 		if (start[p] < time) break;
---
> 				if (start[p] < time)
> 					break;
247c254,255
< 		if (stop[p] < time) break;
---
> 				if (stop[p] < time)
> 					break;
298,305c306,310
< void agfit5b(Sint *maxiter, Sint *nusedx, Sint *nvarx, 
< 	       Sint *strata, double *beta, double *u,
< 	       double *imat2,  double *jmat2, double *loglik, 
< 	       Sint *flag,  double *eps, double *tolerch, Sint *methodx, 
< 	       Sint *nfrail, double *fbeta, double *fdiag,
<                void *fexpr1, void *fexpr2, void *rho)
< {
<     int i,j,k, person;
---
> void agfit5b(Sint *maxiter, Sint *nusedx, Sint *nvarx, Sint *strata,
> 		double *beta, double *u, double *imat2, double *jmat2, double *loglik,
> 		Sint *flag, double *eps, double *tolerch, Sint *methodx, Sint *nfrail,
> 		double *fbeta, double *fdiag, void *fexpr1, void *fexpr2, void *rho) {
> 	int i, j, k;
307c312
<     int     iter;
---
> 
331,332c336
<         }
<     else {
---
> 	} else {
337,338c341,344
<     for (i=0; i<nf; i++) oldbeta[i] = fbeta[i];
<     for (i=0; i<nvar; i++) oldbeta[i+nf] = beta[i];
---
> 	for (int i = 0; i < nf; i++)
> 		oldbeta[i] = fbeta[i];
> 	for (int i = 0; i < nvar; i++)
> 		oldbeta[i + nf] = beta[i];
341c347
<     for (iter=0; iter<=*maxiter; iter++) {
---
> 	for (int iter = 0; iter <= *maxiter; iter++) {
343,344c349,351
< 	for (i=0; i<nf; i++) fdiag[i] =0;
< 	for (i=0; i<nvar2; i++) {
---
> 		for (int i = 0; i < nf; i++)
> 			fdiag[i] = 0;
> 		for (int i = 0; i < nvar2; i++) {
346c353,354
< 	    for (j=0; j<nvar; j++) jmat[j][i] =0 ;
---
> 			for (int j = 0; j < nvar; j++)
> 				jmat[j][i] = 0;
349c357
<         for (person=0; person<nused; person++) {
---
> 		for (int person = 0; person < nused; person++) {
353,355c361,363
< 	        }
< 	    else zbeta = offset[person];
< 	    for (i=0; i<nvar; i++)
---
> 			} else
> 				zbeta = offset[person];
> 			for (int i = 0; i < nvar; i++)
386c394
< 		for (i=0; i<nvar; i++)
---
> 				for (int i=0; i<nvar; i++)
388c396
< 		for (i=0; i<nf; i++)
---
> 				for (int i=0; i<nf; i++)
398c406
< 	for (i=0; i<nvar2; i++) {
---
> 		for (int i = 0; i < nvar2; i++) {
400c408
< 	    for (j=0; j<nvar; j++) {
---
> 			for (int j = 0; j < nvar; j++) {
405c413
< 	for (person=0; person<nused; ) {
---
> 		for (int person = 0; person < nused;) {
407,408c415,418
< 	    if (nf>0)  fgrp = frail[p] -1;
< 	    else       fgrp = -1;
---
> 			if (nf > 0)
> 				fgrp = frail[p] - 1;
> 			else
> 				fgrp = -1;
412,413c422,424
< 		if (fgrp >=0) a[fgrp] += risk;
< 		for (i=0; i<nvar; i++) {
---
> 				if (fgrp >= 0)
> 					a[fgrp] += risk;
> 				for (int i = 0; i < nvar; i++) {
415,416c426,428
< 		    if (fgrp >=0) cmat[i][fgrp] += risk * covar[i][p];
< 		    for (j=0; j<=i; j++)
---
> 					if (fgrp >= 0)
> 						cmat[i][fgrp] += risk * covar[i][p];
> 					for (int j = 0; j <= i; j++)
420,421c432
< 		}
< 	    else {
---
> 			} else {
428c439,440
< 		    if (start[p] < time) break;
---
> 					if (start[p] < time)
> 						break;
431,434c443,449
< 		    if (nf >0) fgrp = frail[p] - 1;
< 		    else       fgrp = -1;
< 		    if (fgrp >=0) a[fgrp] -= risk;
< 		    for (i=0; i<nvar; i++) {
---
> 					if (nf > 0)
> 						fgrp = frail[p] - 1;
> 					else
> 						fgrp = -1;
> 					if (fgrp >= 0)
> 						a[fgrp] -= risk;
> 					for (int i = 0; i < nvar; i++) {
436,437c451,453
< 			if (fgrp >=0) cmat[i][fgrp] -= risk* covar[i][p];
< 			for (j=0; j<=i; j++)
---
> 						if (fgrp >= 0)
> 							cmat[i][fgrp] -= risk * covar[i][p];
> 						for (int j = 0; j <= i; j++)
446c462
< 		for (i=0; i<nvar2; i++) {
---
> 				for (int i = 0; i < nvar2; i++) {
448c464
< 		    for (j=0; j<nvar; j++) {
---
> 					for (int j = 0; j < nvar; j++) {
455c471,472
< 		    if (stop[p] < time) break;
---
> 					if (stop[p] < time)
> 						break;
460,463c477,481
< 			if (fgrp>=0) a[fgrp] += risk;
< 			}
< 		    else fgrp = -1;
< 		    for (i=0; i<nvar; i++) {
---
> 						if (fgrp >= 0)
> 							a[fgrp] += risk;
> 					} else
> 						fgrp = -1;
> 					for (int i = 0; i < nvar; i++) {
465,466c483,485
< 			if (fgrp>=0) cmat[i][fgrp] += risk*covar[i][p];
< 			for (j=0; j<=i; j++)
---
> 						if (fgrp >= 0)
> 							cmat[i][fgrp] += risk * covar[i][p];
> 						for (int j = 0; j <= i; j++)
477c496
< 			for (i=0; i<nvar; i++) {
---
> 						for (int i = 0; i < nvar; i++) {
480,482c499,503
< 			    if (fgrp >=0) cmat2[i][fgrp] += risk*covar[i][p];
< 			    for (j=0; j<=i; j++)
< 				cmat2[i][j+nf] += risk*covar[i][p]*covar[j][p];
---
> 							if (fgrp >= 0)
> 								cmat2[i][fgrp] += risk * covar[i][p];
> 							for (int j = 0; j <= i; j++)
> 								cmat2[i][j + nf] += risk * covar[i][p]
> 										* covar[j][p];
498c519
< 			for (i=0; i<nvar2; i++) {  /* by row of full matrix */
---
> 						for (int i = 0; i < nvar2; i++) { /* by row of full matrix */
502c523,524
< 			    if (i<nf) fdiag[i] += temp2 * (1-temp2);
---
> 							if (i < nf)
> 								fdiag[i] += temp2 * (1 - temp2);
505,508c527,531
< 				for (j=0; j<=i; j++) 
< 				    jmat[ii][j] +=  meanwt*(
< 					(cmat[ii][j] - temp*cmat2[ii][j]) /d2 -
< 					temp2*tmean[j]);
---
> 								for (int j = 0; j <= i; j++)
> 									jmat[ii][j] += meanwt
> 											* ((cmat[ii][j]
> 													- temp * cmat2[ii][j]) / d2
> 													- temp2 * tmean[j]);
519c542
< 		for (i=0; i<nvar2; i++) {
---
> 				for (int i = 0; i < nvar2; i++) {
521c544
< 		    for (j=0; j<nvar; j++) {
---
> 					for (int j = 0; j < nvar; j++) {
535c558
< 		for (i=0; i<nf; i++) {
---
> 				for (int i = 0; i < nf; i++) {
538c561,562
< 		    for (j=0; j<nvar; j++) jmat[j][i]=0;
---
> 					for (int j = 0; j < nvar; j++)
> 						jmat[j][i] = 0;
540,542c564,565
< 		}
< 	    else {
< 		for (i=0; i<nf; i++) {
---
> 			} else {
> 				for (int i = 0; i < nf; i++) {
552c575,576
< 	    cox_callback(2, beta, upen, ipen, &logpen, zflag, nvar, fexpr2, rho);
---
> 			cox_callback(2, beta, upen, ipen, &logpen, zflag, nvar, fexpr2,
> 					rho);
555c579
< 		for (i=0; i<nvar; i++) {
---
> 				for (int i = 0; i < nvar; i++) {
559,560c583
< 		}
< 	    else {
---
> 			} else {
562c585
< 		for (i=0; i<nvar; i++) {
---
> 				for (int i = 0; i < nvar; i++) {
564c587,588
< 		    for (j=nf; j<nvar2; j++) jmat[i][j] += ipen[k++];
---
> 					for (int j = nf; j < nvar2; j++)
> 						jmat[i][j] += ipen[k++];
567c591
< 	    for (i=0; i<nvar; i++) {
---
> 			for (int i = 0; i < nvar; i++) {
570c594,595
< 		    for (j=0; j<i; j++) jmat[i][j+nf]=0;
---
> 					for (int j = 0; j < i; j++)
> 						jmat[i][j + nf] = 0;
583c608,609
< 		for (j=0; j<nvar2; j++)  imat[i][j] = jmat[i][j];
---
> 				for (j = 0; j < nvar2; j++)
> 					imat[i][j] = jmat[i][j];
586c612
< 	    for (i=nf; i<nvar2; i++) {       /*nicer output for S user */
---
> 			for (int i = nf; i < nvar2; i++) { /*nicer output for S user */
590c616
< 		for (j=i+1; j<nvar2; j++) {
---
> 				for (int j = i + 1; j < nvar2; j++) {
600c626,627
< 	if (iter==*maxiter) break;  /*skip the step halving and etc */
---
> 		if (iter == *maxiter)
> 			break; /*skip the step halving and etc */
604c631
< 	    for (i=0; i<nvar; i++)
---
> 			for (int i = 0; i < nvar; i++)
606c633
< 	    for (i=0; i<nf; i++)
---
> 			for (int i = 0; i < nf; i++)
608,609c635
< 	    }
< 	else {
---
> 		} else {
615c641
< 	    for (i=0; i<nvar; i++) {
---
> 			for (int i = 0; i < nvar; i++) {
619c645
< 	    for (i=0; i<nf; i++) {
---
> 			for (int i = 0; i < nf; i++) {
627,628c653,654
<     for (i=0; i<nvar; i++) 
< 	for (j=0; j<nvar2; j++) {
---
> 	for (int i = 0; i < nvar; i++)
> 		for (int j = 0; j < nvar2; j++) {
632c658
<     for (i=nf; i<nvar2; i++) {       /*nicer output for S user */
---
> 	for (int i = nf; i < nvar2; i++) { /*nicer output for S user */
636c662
<   	for (j=i+1; j<nvar2; j++) {
---
> 		for (int j = i + 1; j < nvar2; j++) {
645,646c671
< static double **cmatrix(double *data, int ncol, int nrow)
<     {
---
> static double **cmatrix(double *data, int ncol, int nrow) {
658,659c683
<         }
<     else {
---
> 	} else {
662c686,687
< 	    for (j=0; j<ncol; j++) *temp++ = *data++;
---
> 			for (j = 0; j < ncol; j++)
> 				*temp++ = *data++;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/agmart.c Recommended/survival/src/agmart.c
28,32c28,30
< void agmart(Sint   *n,     Sint   *method,  double *start,   double *stop, 
< 	    Sint   *event, double *score,   double *wt,      Sint   *strata, 
< 	    double *resid)
<     {
<     int i,k;
---
> void agmart(Sint *n, Sint *method, double *start, double *stop, Sint *event,
> 		double *score, double *wt, Sint *strata, double *resid) {
> 
38c36
<     int person;
---
> 
43,45c41,45
<     for (i=0; i<nused; i++)  resid[i]=event[i];
<     for (person=0; person<nused;) {
< 	if (event[person]==0) person++;
---
> 	for (int i = 0; i < nused; i++)
> 		resid[i] = event[i];
> 	for (int person = 0; person < nused;) {
> 		if (event[person] == 0)
> 			person++;
52c52
< 	    for (k=person; k<nused; k++) {
---
> 			for (int k = person; k < nused; k++) {
61c61,62
< 		if (strata[k]==1) break;
---
> 				if (strata[k] == 1)
> 					break;
70c71
< 	    for (k=0; k<deaths; k++) {
---
> 			for (int k = 0; k < deaths; k++) {
75c76
< 	    for (k=person; k<nused; k++) {
---
> 			for (int k = person; k < nused; k++) {
79c80,81
< 		    else    resid[k] -= score[k]*hazard;
---
> 					else
> 						resid[k] -= score[k] * hazard;
81,82c83,86
< 		if (stop[k]==time) person++;
< 		if (strata[k]==1) break;
---
> 				if (stop[k] == time)
> 					person++;
> 				if (strata[k] == 1)
> 					break;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/agmart2.c Recommended/survival/src/agmart2.c
28,32c28,30
< void agmart2(Sint   *n,     Sint   *method,  double *start,   double *stop, 
< 	    Sint   *event,  Sint   *nstrat,  Sint *strata,    Sint *sort1,
< 	    Sint   *sort2,  double *score,   double *wt,      
< 	    double *resid,  double *haz)
<     {
---
> void agmart2(Sint *n, Sint *method, double *start, double *stop, Sint *event,
> 		Sint *nstrat, Sint *strata, Sint *sort1, Sint *sort2, double *score,
> 		double *wt, double *resid, double *haz) {
40d37
<     int person;
55c52
<     for (person=0; person<nused;) {
---
> 	for (int person = 0; person < nused;) {
60,61c57
< 	    }
< 	else {
---
> 		} else {
68c64,65
< 		if (stop[p] < time) break;
---
> 				if (stop[p] < time)
> 					break;
83c80,81
< 		if (start[p] < time) break;
---
> 				if (start[p] < time)
> 					break;
109c107,108
< 		if (stop[p] > time) break;
---
> 				if (stop[p] > time)
> 					break;
125c124
< 	    for (i=strata_start; i<person; i++) {
---
> 			for (int i = strata_start; i < person; i++) {
127,129c126,130
< 		for (; k< ndeath && dtimes[k] >= stop[p]; k++);  
< 		for (j=k; j<ndeath; j++)
< 		    if (start[p] < dtimes[j]) resid[p] -= score[p]*haz[j];
---
> 				for (; k < ndeath && dtimes[k] >= stop[p]; k++)
> 					;
> 				for (int j = k; j < ndeath; j++)
> 					if (start[p] < dtimes[j])
> 						resid[p] -= score[p] * haz[j];
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/agmart3.c Recommended/survival/src/agmart3.c
21,22c21,22
< SEXP agmart3(SEXP surv2, SEXP score2, SEXP weight2, SEXP strata2,
< 	     SEXP sortx, SEXP method2) {
---
> SEXP agmart3(SEXP surv2, SEXP score2, SEXP weight2, SEXP strata2, SEXP sortx,
> 		SEXP method2) {
30c30
<     int n, person;
---
> 	int n;
80c80
<     for (person=0; person <n; ) {
---
> 	for (int person = 0; person < n;) {
94c94,95
< 		if (start[p] < time) break;
---
> 				if (start[p] < time)
> 					break;
107c108,109
< 		if (stop[p]  < time) break;  /* only tied times */ 
---
> 				if (stop[p] < time)
> 					break; /* only tied times */
124,125c126
< 	    }
< 	    else { /* Efron */
---
> 			} else { /* Efron */
129c130
< 		for (k=0; k <deaths; k++) {
---
> 				for (int k = 0; k < deaths; k++) {
144,145c145,148
< 		if (event[p] ==1) resid[p] = 1 + temp*score[p];
< 		else resid[p] = cumhaz * score[p];
---
> 				if (event[p] == 1)
> 					resid[p] = 1 + temp * score[p];
> 				else
> 					resid[p] = cumhaz * score[p];
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/agscore.c Recommended/survival/src/agscore.c
26,30c26,28
< void agscore(Sint   *nx,       Sint   *nvarx,      double *y,
< 	     double *covar2,   Sint   *strata,     double *score,
< 	     double *weights,  Sint   *method,     double *resid2, double *a)
<     {
<     int i,k;
---
> void agscore(Sint *nx, Sint *nvarx, double *y, double *covar2, Sint *strata,
> 		double *score, double *weights, Sint *method, double *resid2, double *a) {
> 
32c30
<     int person;
---
> 
39c37
<     int dd;
---
> 
41,42c39
<     double **covar,
< 	   **resid;
---
> 	double **covar, **resid;
62,63c59,61
<     for (person=0; person<n; ) {
< 	if (event[person]==0) person++;
---
> 	for (int person = 0; person < n;) {
> 		if (event[person] == 0)
> 			person++;
72c70
< 	    for (i=0; i<nvar; i++) {
---
> 			for (int i = 0; i < nvar; i++) {
77c75
< 	    for (k=person; k<n; k++) {
---
> 			for (int k = person; k < n; k++) {
81c79
< 		    for (i=0; i<nvar; i++) {
---
> 					for (int i = 0; i < nvar; i++) {
88c86
< 			for (i=0; i<nvar; i++)
---
> 						for (int i = 0; i < nvar; i++)
92c90,91
< 		if (strata[k]==1) break;
---
> 				if (strata[k] == 1)
> 					break;
99,100c98,100
< 		for (i=0; i<nvar; i++) mean[i] = a[i]/denom;
< 		for (k=person; k<n; k++) {
---
> 				for (int i = 0; i < nvar; i++)
> 					mean[i] = a[i] / denom;
> 				for (int k = person; k < n; k++) {
103,104c103,105
< 			for (i=0; i<nvar; i++)
< 			    resid[i][k] -= (covar[i][k] -mean[i])*risk*hazard;
---
> 						for (int i = 0; i < nvar; i++)
> 							resid[i][k] -= (covar[i][k] - mean[i]) * risk
> 									* hazard;
108c109
< 				for (i=0; i<nvar; i++)
---
> 								for (int i = 0; i < nvar; i++)
112c113,114
< 		    if (strata[k]==1) break;
---
> 					if (strata[k] == 1)
> 						break;
128c130
< 		for (i=0; i<nvar; i++) {
---
> 				for (int i = 0; i < nvar; i++) {
134c136
< 		for (dd=0; dd<deaths; dd++){
---
> 				for (int dd = 0; dd < deaths; dd++) {
140c142
< 		    for (i=0; i<nvar; i++) {
---
> 					for (int i = 0; i < nvar; i++) {
147c149
< 		for (k=person; k<n; k++) {
---
> 				for (int k = person; k < n; k++) {
151c153
< 			    for (i=0; i<nvar; i++) {
---
> 							for (int i = 0; i < nvar; i++) {
156,159c158,161
< 			    }
< 			else {
< 			    for (i=0; i<nvar; i++)
< 				resid[i][k] -= risk*(covar[i][k]*temp1 - mh1[i]);
---
> 						} else {
> 							for (int i = 0; i < nvar; i++)
> 								resid[i][k] -= risk
> 										* (covar[i][k] * temp1 - mh1[i]);
162c164,165
< 		    if (strata[k]==1) break;
---
> 					if (strata[k] == 1)
> 						break;
165c168,169
< 		    if (strata[person]==1) break;
---
> 					if (strata[person] == 1)
> 						break;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/agsurv3.c Recommended/survival/src/agsurv3.c
49,56c49
< static double   *y,
< 		*nscore,
< 		**newx,
< 		**surv,
< 		**vsurv,
< 		*isurv,
< 		**used,
< 		**tvar;
---
> static double *y, *nscore, **newx, **surv, **vsurv, *isurv, **used, **tvar;
59,65c52,53
< 		**imat,
< 		*mean;
< static int      death,
< 		ncurve,
< 		se,
< 		nvar,
< 		n;
---
> **imat, *mean;
> static int death, ncurve, se, nvar, n;
68,74c56,60
< void agsurv3(Sint   *sn,    Sint   *snvar,    Sint   *sncurve, 
< 	     Sint   *snpt,  Sint   *sse,      double *score, 
< 	     double *sy,    Sint   *grpx,     double *r,        double *coef, 
< 	     double *var,   double *xmean,    Sint   *scn, 
< 	     double *cy,    double *cx,       double *ssurv,
< 	     double *varh,  double *sused,    Sint   *smethod)
< {
---
> void agsurv3(Sint *sn, Sint *snvar, Sint *sncurve, Sint *snpt, Sint *sse,
> 		double *score, double *sy, Sint *grpx, double *r, double *coef,
> 		double *var, double *xmean, Sint *scn, double *cy, double *cx,
> 		double *ssurv, double *varh, double *sused, Sint *smethod) {
> 
76d61
<     int i,j,k,l;
79,81c64
<     int npt,
< 	nvar2,
< 	method;
---
> 	int npt, nvar2, method;
84c67
<     int person;
---
> 
88,98c71,74
<     double weight=0,
< 	   e_denom,
< 	   denom;
<     double inc,
< 	   sumt,
< 	   km =0;
<     double temp,
< 	   downwt,
< 	   d2;
<     double haz,
< 	   varhaz;
---
> 	double weight = 0, e_denom, denom;
> 	double inc, sumt, km = 0;
> 	double temp, downwt, d2;
> 	double haz, varhaz;
101,103c77,80
< 
<     n = *sn;  nvar = *snvar;
<     cn = *scn; npt = *snpt;
---
> 	n = *sn;
> 	nvar = *snvar;
> 	cn = *scn;
> 	npt = *snpt;
120c97,98
<     for (i=0; i<need; i++) nscore[i] =0.0;  /* R doesn't zero the memory */
---
> 	for (int i = 0; i < need; i++)
> 		nscore[i] = 0.0; /* R doesn't zero the memory */
123c101,102
<     for (i=0; i<n; i++) isurv[i]=1;
---
> 	for (int i = 0; i < n; i++)
> 		isurv[i] = 1;
130c109
< 	for (i=1; i<n; i++)
---
> 		for (int i = 1; i < n; i++)
137c116,117
<     if (se==1) oldx = dmatrix(cx, cn, nvar);
---
> 	if (se == 1)
> 		oldx = dmatrix(cx, cn, nvar);
144,145c124,126
<     for (i=0; i<ncurve; i++)
< 	for (j=0; j<npt; j++)  surv[i][j] =1;
---
> 	for (int i = 0; i < ncurve; i++)
> 		for (int j = 0; j < npt; j++)
> 			surv[i][j] = 1;
150c131
<     for (i=0; i<n; i++) {
---
> 	for (int i = 0; i < n; i++) {
152c133
< 	for (j=0; j<nvar; j++) {
---
> 		for (int j = 0; j < nvar; j++) {
164,165c145,147
<     for (person=0; person<cn;) {
< 	if (event[person]==0) person++;
---
> 	for (int person = 0; person < cn;) {
> 		if (event[person] == 0)
> 			person++;
172c154
< 	    for(i=0; i<nvar2; i++){
---
> 			for (int i = 0; i < nvar2; i++) {
179c161
< 	    for (k=person; k<cn; k++) {
---
> 			for (int k = person; k < cn; k++) {
184c166
< 		    for (i=0; i<nvar2; i++) {
---
> 					for (int i = 0; i < nvar2; i++) {
192c174
< 		    for (i=0; i<nvar2; i++) {
---
> 					for (int i = 0; i < nvar2; i++) {
201c183,185
< 	    if (method <3) for (i=0; i<nvar2; i++) mean[i] = a[i]/denom;
---
> 			if (method < 3)
> 				for (int i = 0; i < nvar2; i++)
> 					mean[i] = a[i] / denom;
203c187
< 		for (psave=person; psave<cn && stop[psave]==ttime; psave++) 
---
> 				for (psave = person; psave < cn && stop[psave] == ttime; psave++) {
207c191,192
< 		if (deaths == nrisk) km=0;
---
> 					if (deaths == nrisk)
> 						km = 0;
210,211c195
< 		    }
< 		else {           /*find the zero of an equation */
---
> 					} else { /*find the zero of an equation */
214c198
< 		    for (l=0; l<35; l++) { /* bisect it to death */
---
> 						for (int l = 0; l < 35; l++) { /* bisect it to death */
216c200
< 			for (k=person; k<psave; k++) {
---
> 							for (int k = person; k < psave; k++) {
220,221c204,207
< 			if (sumt < denom)  km += inc;
< 			     else          km -= inc;
---
> 							if (sumt < denom)
> 								km += inc;
> 							else
> 								km -= inc;
224a211
> 				}
237,241c224,230
< 		for (; person<cn && stop[person]==ttime; person++);
< 		}
< 	    else {
< 		temp =0;  haz=0; varhaz=0;
< 		for (k=person; k<cn && stop[k]==ttime; k++) {
---
> 				for (; person < cn && stop[person] == ttime; person++)
> 					;
> 			} else {
> 				temp = 0;
> 				haz = 0;
> 				varhaz = 0;
> 				for (int k = person; k < cn && stop[k] == ttime; k++) {
247c236
< 			for (i=0; i<nvar2; i++)
---
> 						for (int i = 0; i < nvar2; i++)
261,271c249,252
< int itime;
< double haz, var;
<     {
<     int i, j, k, l;
<     int     pstart,
< 	    ic;
<     double  temp,
< 	    totsurv,
< 	    totvar,
< 	    wt,
< 	    nn;
---
> 	int itime;double haz, var; {
> 	int i;
> 	int pstart, ic;
> 	double temp, totsurv, totvar, wt, nn;
277c258
< 	for (i=0; i<ncurve; i++) {
---
> 		for (int i = 0; i < ncurve; i++) {
279c260,261
< 	    if (nvar>0) vsurv[i][itime]=0;
---
> 			if (nvar > 0)
> 				vsurv[i][itime] = 0;
300,301c282
< 		    }
< 		else {
---
> 				} else {
311c292
< 		for (j=pstart; j<=i; j++) {
---
> 				for (int j = pstart; j <= i; j++) {
313,319c294,302
< 		    for (k=0; k<nvar; k++) {
< 			temp += (newx[k][i]-mean[k])*(newx[k][j]-mean[k])*
< 					  imat[k][k];
< 			for (l=0; l<k; l++)
< 			    temp += ((newx[k][i]-mean[k])*(newx[l][j]-mean[l]) +
< 				     (newx[k][j]-mean[k])*(newx[l][i]-mean[l]))*
< 				     imat[k][l];
---
> 					for (int k = 0; k < nvar; k++) {
> 						temp += (newx[k][i] - mean[k]) * (newx[k][j] - mean[k])
> 								* imat[k][k];
> 						for (int l = 0; l < k; l++)
> 							temp += ((newx[k][i] - mean[k])
> 									* (newx[l][j] - mean[l])
> 									+ (newx[k][j] - mean[k])
> 											* (newx[l][i] - mean[l]))
> 									* imat[k][l];
322,325c305,310
< 		    temp = nscore[i]*nscore[j]* tvar[i][j] *
< 				 isurv[i] * isurv[j];
< 		    if (i==j) totvar += temp;
< 		    else      totvar += temp + temp;
---
> 					temp = nscore[i] * nscore[j] * tvar[i][j] * isurv[i]
> 							* isurv[j];
> 					if (i == j)
> 						totvar += temp;
> 					else
> 						totvar += temp + temp;
335,337c320,325
< 	if (death==0) surv[ic][itime] *= totsurv/wt;
< 	else          surv[ic][itime] *= exp(totsurv/wt);
< 	if (se==1) vsurv[ic][itime] = totvar/(nn*nn);
---
> 		if (death == 0)
> 			surv[ic][itime] *= totsurv / wt;
> 		else
> 			surv[ic][itime] *= exp(totsurv / wt);
> 		if (se == 1)
> 			vsurv[ic][itime] = totvar / (nn * nn);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/chinv2.c Recommended/survival/src/chinv2.c
16,17c16
< void chinv2(double **matrix , int n)
<      {
---
> void chinv2(double **matrix, int n) {
19d17
<      register int i,j,k;
25c23
<      for (i=0; i<n; i++){
---
> 	for (int i = 0; i < n; i++) {
28c26
< 	      for (j= (i+1); j<n; j++) {
---
> 			for (int j = (i + 1); j < n; j++) {
30c28
< 		   for (k=0; k<i; k++)     /*sweep operator */
---
> 				for (int k = 0; k < i; k++) /*sweep operator */
41c39
<      for (i=0; i<n; i++) {
---
> 	for (int i = 0; i < n; i++) {
43,47c41,46
< 		for (j=0; j<i; j++) matrix[j][i]=0;
< 		for (j=i; j<n; j++) matrix[i][j]=0;
< 		}
< 	  else {
< 	      for (j=(i+1); j<n; j++) {
---
> 			for (int j = 0; j < i; j++)
> 				matrix[j][i] = 0;
> 			for (int j = i; j < n; j++)
> 				matrix[i][j] = 0;
> 		} else {
> 			for (int j = (i + 1); j < n; j++) {
49,50c48,50
< 		   if (j!=i) matrix[i][j] = temp;
< 		   for (k=i; k<j; k++)
---
> 				if (j != i)
> 					matrix[i][j] = temp;
> 				for (int k = i; k < j; k++)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/chinv3.c Recommended/survival/src/chinv3.c
20,22c20
< void chinv3(double **matrix , int n, int m, double *fdiag)
<      {
<      int i,j,k;
---
> void chinv3(double **matrix, int n, int m, double *fdiag) {
32c30
<      for (i=0; i<m; i++) {
---
> 	for (int i = 0; i < m; i++) {
35c33
< 	     for (j=0; j<n2; j++) 
---
> 			for (int j = 0; j < n2; j++)
41c39
<      for (i=0; i<n2; i++){
---
> 	for (int i = 0; i < n2; i++) {
45c43
< 	      for (j= (i+1); j<n2; j++) {
---
> 			for (int j = (i + 1); j < n2; j++) {
47c45
< 		   for (k=0; k<ii; k++)     /*sweep operator */
---
> 				for (int k = 0; k < ii; k++) /*sweep operator */
60,63c58
< int  n, m;
< double fdiag[];
< double **matrix;
<      {
---
> 	int n, m;double fdiag[];double **matrix; {
65d59
<      int i,j,k;
79c73
<      for (i=0; i<n2; i++) {
---
> 	for (int i = 0; i < n2; i++) {
82,86c76,81
< 		for (j=0; j<i; j++) matrix[j][ii]=0;
< 		for (j=ii; j<n; j++) matrix[i][j]=0;
< 		}
< 	  else {
< 	      for (j=(i+1); j<n2; j++) {
---
> 			for (int j = 0; j < i; j++)
> 				matrix[j][ii] = 0;
> 			for (int j = ii; j < n; j++)
> 				matrix[i][j] = 0;
> 		} else {
> 			for (int j = (i + 1); j < n2; j++) {
88,89c83,85
< 		   if (j!=i) matrix[i][j+m] = temp;
< 		   for (k=i; k<j; k++)
---
> 				if (j != i)
> 					matrix[i][j + m] = temp;
> 				for (int k = i; k < j; k++)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/cholesky3.c Recommended/survival/src/cholesky3.c
31,32c31
< int cholesky3(double **matrix, int n, int m, double *diag, double toler)
<     {
---
> int cholesky3(double **matrix, int n, int m, double *diag, double toler) {
34c33
<     int  i,j,k;
---
> 	int j;
44,45c43,48
<     for (i=0; i<m; i++) if (diag[i] <eps) eps = diag[i];
<     for (i=0; i<n2; i++) if (matrix[i][i+m] > eps)  eps = matrix[i][i+m];
---
> 	for (int i = 0; i < m; i++)
> 		if (diag[i] < eps)
> 			eps = diag[i];
> 	for (int i = 0; i < n2; i++)
> 		if (matrix[i][i + m] > eps)
> 			eps = matrix[i][i + m];
50c53
<     for (i=0; i<m; i++) {
---
> 	for (int i = 0; i < m; i++) {
53,56c56,60
<             for (j=0; j<n2; j++) matrix[j][i] =0;
<             if (pivot < -8*eps) nonneg= -1;
<             }
< 	else {
---
> 			for (int j = 0; j < n2; j++)
> 				matrix[j][i] = 0;
> 			if (pivot < -8 * eps)
> 				nonneg = -1;
> 		} else {
58c62
< 	    for (j=0; j<n2; j++) {
---
> 			for (int j = 0; j < n2; j++) {
62c66,67
< 		for (k=(j+1); k<n2; k++) matrix[k][j+m] -= temp*matrix[k][i];
---
> 				for (int k = (j + 1); k < n2; k++)
> 					matrix[k][j + m] -= temp * matrix[k][i];
68c73
<     for (i=0; i<n2; i++) {
---
> 	for (int i = 0; i < n2; i++) {
71,74c76,80
< 	    for (j=i; j<n2; j++) matrix[j][i+m] =0;  /* zero the column */
<             if (pivot < -8*eps) nonneg= -1;
< 	    }
< 	else  {
---
> 			for (j = i; j < n2; j++)
> 				matrix[j][i + m] = 0; /* zero the column */
> 			if (pivot < -8 * eps)
> 				nonneg = -1;
> 		} else {
76c82
< 	    for (j=(i+1); j<n2; j++) {
---
> 			for (int j = (i + 1); j < n2; j++) {
80c86,87
< 		for (k=(j+1); k<n2; k++) matrix[k][j+m] -= temp*matrix[k][i+m];
---
> 				for (int k = (j + 1); k < n2; k++)
> 					matrix[k][j + m] -= temp * matrix[k][i + m];
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/chsolve2.c Recommended/survival/src/chsolve2.c
17,19c17
< void chsolve2(double **matrix, int n, double *y)
<      {
<      register int i,j;
---
> void chsolve2(double **matrix, int n, double *y) {
25c23
<      for (i=0; i<n; i++) {
---
> 	for (int i = 0; i < n; i++) {
27c25
< 	  for (j=0; j<i; j++)
---
> 		for (int j = 0; j < i; j++)
34,35c32,34
<      for (i=(n-1); i>=0; i--) {
< 	  if (matrix[i][i]==0)  y[i] =0;
---
> 	for (int i = (n - 1); i >= 0; i--) {
> 		if (matrix[i][i] == 0)
> 			y[i] = 0;
38c37
< 	      for (j= i+1; j<n; j++)
---
> 			for (int j = i + 1; j < n; j++)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/chsolve3.c Recommended/survival/src/chsolve3.c
22,24c22,23
< void chsolve3(double **matrix, int n, int m, double *diag, double *y)
<      {
<      int i,j, n2;
---
> void chsolve3(double **matrix, int n, int m, double *diag, double *y) {
> 	int n2;
31c30
<      for (i=0; i<n2; i++) {
---
> 	for (int i = 0; i < n2; i++) {
33,34c32,35
< 	  for (j=0; j<m; j++) temp -= y[j]   * matrix[i][j];
< 	  for (j=0; j<i; j++) temp -= y[j+m] * matrix[i][j+m] ;
---
> 		for (int j = 0; j < m; j++)
> 			temp -= y[j] * matrix[i][j];
> 		for (int j = 0; j < i; j++)
> 			temp -= y[j + m] * matrix[i][j + m];
41,42c42,44
<      for (i=(n2-1); i>=0; i--) {
< 	  if (matrix[i][i+m]==0)  y[i+m] =0;
---
> 	for (int i = (n2 - 1); i >= 0; i--) {
> 		if (matrix[i][i + m] == 0)
> 			y[i + m] = 0;
45c47
< 	      for (j= i+1; j<n2; j++)
---
> 			for (int j = i + 1; j < n2; j++)
51,52c53,55
<      for (i=(m-1); i>=0; i--) {
< 	 if (diag[i] == 0)  y[i] =0;
---
> 	for (int i = (m - 1); i >= 0; i--) {
> 		if (diag[i] == 0)
> 			y[i] = 0;
55c58
< 	     for (j=0; j<n2; j++)
---
> 			for (int j = 0; j < n2; j++)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/cox_Rcallback.c Recommended/survival/src/cox_Rcallback.c
8c8
< 
---
> #include "localization.h"
22,27c22,23
< int which;
< double *coef, *first, *second;
< double *penalty;
< int *flag,p; 
< SEXP fexpr,rho;
< {
---
> 	int which;double *coef, *first, *second;double *penalty;int *flag, p;SEXP
> 			fexpr, rho; {
53c49
<                 error("coef:invalid type\n");
---
> 		error(_("coef: invalid type\n"));
62c58
<                 error("first: invalid type\n");
---
> 		error(_("first: invalid type\n"));
72c68
<                 error("second: invalid type\n");
---
> 		error(_("second: invalid type\n"));
81c77
<                 error("flag:invalid type\n");
---
> 		error(_("flag: invalid type\n"));
90c86
<                 error("penalty: invalid type\n");
---
> 		error(_("penalty: invalid type\n"));
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/coxdetail.c Recommended/survival/src/coxdetail.c
54,59c54,57
< void coxdetail(Sint   *nusedx,   Sint   *nvarx,    Sint   *ndeadx, 
< 	       double *y,        double *covar2,   Sint   *strata,  
< 	       double *score,    double *weights,  double *means2, 
< 	       double *u2,       double *var,      Sint   *rmat,
< 	       double *nrisk2,   double *work)
< {
---
> void coxdetail(Sint *nusedx, Sint *nvarx, Sint *ndeadx, double *y,
> 		double *covar2, Sint *strata, double *score, double *weights,
> 		double *means2, double *u2, double *var, Sint *rmat, double *nrisk2,
> 		double *work) {
81,83c79
<     double  *start,
< 	    *stop,
< 	    *event;
---
> 	double *start, *stop, *event;
113c109,110
< 	for (person=0; person<nused; person++) temp += covar[i][person];
---
> 		for (person = 0; person < nused; person++)
> 			temp += covar[i][person];
116c113,114
< 	for (person=0; person<nused; person++) covar[i][person] -=temp;
---
> 		for (person = 0; person < nused; person++)
> 			covar[i][person] -= temp;
126c124,125
<     for (i=0; i<ndead*nvar*nvar; i++) var[i]=0;
---
> 	for (i = 0; i < ndead * nvar * nvar; i++)
> 		var[i] = 0;
133c132,133
< 	if (event[person]==0) person++;
---
> 		if (event[person] == 0)
> 			person++;
150c150,151
< 	    deaths=0; wdeath=0;
---
> 			deaths = 0;
> 			wdeath = 0;
155c156,157
< 		    if (rflag) rmat[ideath*nused +k] =1;
---
> 					if (rflag)
> 						rmat[ideath * nused + k] = 1;
175c177,178
< 		if (strata[k]==1) break;
---
> 				if (strata[k] == 1)
> 					break;
195c198,199
< 			u[i][ideath] += weights[k]*covar[i][k] - meanwt*temp2;
---
> 						u[i][ideath] += weights[k] * covar[i][k]
> 								- meanwt * temp2;
197,198c201,202
< 			    temp3 =((cmat[i][j] - temp*cmat2[i][j]) -
< 					       temp2*(a[j]-temp*a2[j]))/d2;
---
> 							temp3 = ((cmat[i][j] - temp * cmat2[i][j])
> 									- temp2 * (a[j] - temp * a2[j])) / d2;
202c206,207
< 				var[j + i*nvar + ideath*nvar*nvar] +=temp3;
---
> 								var[j + i * nvar + ideath * nvar * nvar] +=
> 										temp3;
207c212,213
< 		if (strata[k]==1) break;
---
> 				if (strata[k] == 1)
> 					break;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/coxfit5.c Recommended/survival/src/coxfit5.c
94,100c94,98
< void coxfit5_a(Sint *nusedx,     Sint *nvarx,     double *yy, 
< 	       double *covar2,   double *offset2, double *weights2,
< 	       Sint *strata,     Sint *sorted,    double *means, 
<                double *beta,     double *u,       double *loglik, 
< 	       Sint *methodx,    Sint *ptype2,    Sint *pdiag2,
< 	       Sint *nfrail,     Sint *frail2,
<                void *fexpr1,     void *fexpr2,    void *rho) {
---
> void coxfit5_a(Sint *nusedx, Sint *nvarx, double *yy, double *covar2,
> 		double *offset2, double *weights2, Sint *strata, Sint *sorted,
> 		double *means, double *beta, double *u, double *loglik, Sint *methodx,
> 		Sint *ptype2, Sint *pdiag2, Sint *nfrail, Sint *frail2, void *fexpr1,
> 		void *fexpr2, void *rho) {
103d100
<     int ii; 
144c141
<     for (i=0; i<nused; i++) {
---
> 	for (int i = 0; i < nused; i++) {
156,157c153,160
<     if (nf > nvar) i=nf; else i=nvar;
<     if (nf > nvar*nvar) j=nf; else j=nvar*nvar;
---
> 	if (nf > nvar)
> 		i = nf;
> 	else
> 		i = nvar;
> 	if (nf > nvar * nvar)
> 		j = nf;
> 	else
> 		j = nvar * nvar;
161,162c164,167
<     if (ptype>1)  zflag = Calloc(nvar, Sint);
<     else          zflag = Calloc(2, Sint);
---
> 	if (ptype > 1)
> 		zflag = Calloc(nvar, Sint);
> 	else
> 		zflag = Calloc(2, Sint);
166c171,172
< 	for (i=0; i<nused; i++) frail[i] = frail2[i];
---
> 		for (int i = 0; i < nused; i++)
> 			frail[i] = frail2[i];
178c184
<     for (i=0; i<nused; i++)
---
> 	for (int i = 0; i < nused; i++)
180c186
<     for (i=0; i<nused; ) {
---
> 	for (int i = 0; i < nused;) {
187c193,194
< 		if ((ttime[k] != ttime[p]) || (j==strata[istrat])) break;
---
> 				if ((ttime[k] != ttime[p]) || (j == strata[istrat]))
> 					break;
195,197c202,205
< 	    }
< 	else i++;
< 	if (i==strata[istrat]) istrat++;
---
> 		} else
> 			i++;
> 		if (i == strata[istrat])
> 			istrat++;
204c212
<     for (i=0; i<nvar; i++) {
---
> 	for (int i = 0; i < nvar; i++) {
206c214,215
< 	for (p=0; p<nused; p++) temp += covar[i][p];
---
> 		for (int p = 0; p < nused; p++)
> 			temp += covar[i][p];
209c218,219
< 	for (p=0; p<nused; p++) covar[i][p] -=temp;
---
> 		for (int p = 0; p < nused; p++)
> 			covar[i][p] -= temp;
217c227
<     for (i=0; i<nvar; i++) {
---
> 	for (int i = 0; i < nvar; i++) {
225c235
<     for (ii=0; ii<nused; ii++) {
---
> 	for (int ii = 0; ii < nused; ii++) {
228c238,239
< 	    for (i=0; i<nvar; i++) a[i] = 0;
---
> 			for (int i = 0; i < nvar; i++)
> 				a[i] = 0;
234c245
< 	for (i=0; i<nvar; i++)
---
> 		for (int i = 0; i < nvar; i++)
240c251,252
< 	for (i=0; i<nvar; i++) a[i] += risk*covar[i][p];
---
> 		for (int i = 0; i < nvar; i++)
> 			a[i] += risk * covar[i][p];
244c256
< 	    for (i=0; i<nvar; i++) {
---
> 			for (int i = 0; i < nvar; i++) {
254c266
< 	    for (k=0; k<ndead; k++) {
---
> 			for (int k = 0; k < ndead; k++) {
258c270
< 		for (i=0; i<nvar; i++) {
---
> 				for (int i = 0; i < nvar; i++) {
264c276,277
< 	    for (i=0; i<nvar; i++) a2[i]=0;
---
> 			for (int i = 0; i < nvar; i++)
> 				a2[i] = 0;
284,294c296,302
< void coxfit5_b(Sint *maxiter, Sint *nusedx, Sint *nvarx, 
< 	       Sint *strata, double *beta, double *u,
< 	       double *imat2,  double *jmat2, double *loglik, 
< 	       Sint *flag,  double *eps, double *tolerch, Sint *methodx, 
< 	       Sint *nfrail, double *fbeta, double *fdiag,
<                void *fexpr1, void *fexpr2, void *rho)
< {
< 
<     int i,j,k, p;
<     int ii, istrat, ip;
<     int     iter;
---
> void coxfit5_b(Sint *maxiter, Sint *nusedx, Sint *nvarx, Sint *strata,
> 		double *beta, double *u, double *imat2, double *jmat2, double *loglik,
> 		Sint *flag, double *eps, double *tolerch, Sint *methodx, Sint *nfrail,
> 		double *fbeta, double *fdiag, void *fexpr1, void *fexpr2, void *rho) {
> 
> 	int k, p;
> 	int ii, istrat;
316,317c324
<         }
<     else {
---
> 	} else {
322,323c329,332
<     for (i=0; i<nf; i++) oldbeta[i] = fbeta[i];
<     for (i=0; i<nvar; i++) oldbeta[i+nf] = beta[i];
---
> 	for (int i = 0; i < nf; i++)
> 		oldbeta[i] = fbeta[i];
> 	for (int i = 0; i < nvar; i++)
> 		oldbeta[i + nf] = beta[i];
326c335
<     for (iter=0; iter<=*maxiter; iter++) {
---
> 	for (int iter = 0; iter <= *maxiter; iter++) {
328,329c337,339
< 	for (i=0; i<nf; i++) fdiag[i] =0;
< 	for (i=0; i<nvar2; i++) {
---
> 		for (int i = 0; i < nf; i++)
> 			fdiag[i] = 0;
> 		for (int i = 0; i < nvar2; i++) {
331c341
< 	    for (j=0; j<nvar; j++)
---
> 			for (int j = 0; j < nvar; j++)
336c346
< 	for (ip=0; ip<nused; ip++) {
---
> 		for (int ip = 0; ip < nused; ip++) {
341c351
< 		for (i=0; i<nvar2; i++) {
---
> 				for (int i = 0; i < nvar2; i++) {
344c354
< 		    for (j=0; j<nvar; j++) {
---
> 					for (int j = 0; j < nvar; j++) {
350c360,361
< 	    if (ip==strata[istrat]) istrat++;
---
> 			if (ip == strata[istrat])
> 				istrat++;
355,356c366,367
< 	        }
< 	    else zbeta = offset[p];
---
> 			} else
> 				zbeta = offset[p];
358c369
< 	    for (i=0; i<nvar; i++)
---
> 			for (int i = 0; i < nvar; i++)
365,366c376,378
< 	    if (nf>0) a[fgrp] += risk;
< 	    for (i=0; i<nvar; i++) {
---
> 			if (nf > 0)
> 				a[fgrp] += risk;
> 			for (int i = 0; i < nvar; i++) {
368,369c380,382
< 		if (nf>0) cmat[i][fgrp] += risk*covar[i][p];
< 		for (j=0; j<=i; j++)
---
> 				if (nf > 0)
> 					cmat[i][fgrp] += risk * covar[i][p];
> 				for (int j = 0; j <= i; j++)
380c393
< 		for (i=0; i<nvar; i++) {
---
> 				for (int i = 0; i < nvar; i++) {
383,384c396,398
< 		    if (nf>0) cmat2[i][fgrp] += risk*covar[i][p];	
< 		    for (j=0; j<=i; j++)
---
> 					if (nf > 0)
> 						cmat2[i][fgrp] += risk * covar[i][p];
> 					for (int j = 0; j <= i; j++)
391c405
< 		for (k=0; k<ndead; k++) {
---
> 				for (int k = 0; k < ndead; k++) {
396c410
< 		    for (i=0; i<nvar2; i++) {  /* by row of full matrix */
---
> 					for (int i = 0; i < nvar2; i++) { /* by row of full matrix */
400c414,415
< 			if (i<nf) fdiag[i] += temp2 * (1-temp2);
---
> 						if (i < nf)
> 							fdiag[i] += temp2 * (1 - temp2);
403,406c418,421
< 			    for (j=0; j<=i; j++) 
< 				jmat[ii][j] +=  wtave[p]*(
<                                    (cmat[ii][j] - temp*cmat2[ii][j]) /d2 -
<                                           temp2*tmean[j]);
---
> 							for (int j = 0; j <= i; j++)
> 								jmat[ii][j] += wtave[p]
> 										* ((cmat[ii][j] - temp * cmat2[ii][j])
> 												/ d2 - temp2 * tmean[j]);
411c426
< 		for (i=0; i<nvar2; i++) {
---
> 				for (int i = 0; i < nvar2; i++) {
413c428,429
< 		    for (j=0; j<nvar; j++)  cmat2[j][i]=0;
---
> 					for (int j = 0; j < nvar; j++)
> 						cmat2[j][i] = 0;
425c441
< 		for (i=0; i<nf; i++) {
---
> 				for (int i = 0; i < nf; i++) {
428,429c444,445
< 		    for (j=0; j<nvar; j++) jmat[j][i]=0;
< 		    }
---
> 					for (int j = 0; j < nvar; j++)
> 						jmat[j][i] = 0;
431,432c447,448
< 	    else {
< 		for (i=0; i<nf; i++) {
---
> 			} else {
> 				for (int i = 0; i < nf; i++) {
442c458,459
< 	    cox_callback(2, beta, upen, ipen, &logpen, zflag, nvar, fexpr2,rho);
---
> 			cox_callback(2, beta, upen, ipen, &logpen, zflag, nvar, fexpr2,
> 					rho);
445c462
< 		for (i=0; i<nvar; i++) {
---
> 				for (int i = 0; i < nvar; i++) {
449,450c466
< 	        }
< 	    else {
---
> 			} else {
452c468
< 		for (i=0; i<nvar; i++) {
---
> 				for (int i = 0; i < nvar; i++) {
454c470,471
< 		    for (j=nf; j<nvar2; j++) jmat[i][j] += ipen[k++];
---
> 					for (int j = nf; j < nvar2; j++)
> 						jmat[i][j] += ipen[k++];
457c474
< 	    for (i=0; i<nvar; i++) {
---
> 			for (int i = 0; i < nvar; i++) {
460c477,478
< 		    for (j=0; j<i; j++) jmat[i][j+nf]=0;
---
> 					for (int j = 0; j < i; j++)
> 						jmat[i][j + nf] = 0;
472,473c490,492
< 	    for (i=0; i<nvar; i++) {
< 	        for (j=0; j<nvar2; j++)  imat[i][j] = jmat[i][j];
---
> 			for (int i = 0; i < nvar; i++) {
> 				for (int j = 0; j < nvar2; j++)
> 					imat[i][j] = jmat[i][j];
476c495
< 	    for (i=nf; i<nvar2; i++) {       /*nicer output for S user */
---
> 			for (int i = nf; i < nvar2; i++) { /*nicer output for S user */
480c499
< 		for (j=i+1; j<nvar2; j++) {
---
> 				for (int j = i + 1; j < nvar2; j++) {
490c509,510
< 	if (iter==*maxiter) break;  /*skip the step halving and etc */
---
> 		if (iter == *maxiter)
> 			break; /*skip the step halving and etc */
494c514
< 		for (i=0; i<nvar; i++)
---
> 			for (int i = 0; i < nvar; i++)
496c516
< 		for (i=0; i<nf; i++)
---
> 			for (int i = 0; i < nf; i++)
498,499c518
< 		}
< 	    else {
---
> 		} else {
504,505c523
< 		j=0;
< 		for (i=0; i<nvar; i++) {
---
> 			for (int i = 0; i < nvar; i++) {
509c527
< 		for (i=0; i<nf; i++) {
---
> 			for (int i = 0; i < nf; i++) {
517,518c535,536
<     for (i=0; i<nvar; i++) 
< 	for (j=0; j<nvar2; j++) {
---
> 	for (int i = 0; i < nvar; i++)
> 		for (int j = 0; j < nvar2; j++) {
522c540
<     for (i=nf; i<nvar2; i++) {       /*nicer output for S user */
---
> 	for (int i = nf; i < nvar2; i++) { /*nicer output for S user */
526c544
<   	for (j=i+1; j<nvar2; j++) {
---
> 		for (int j = i + 1; j < nvar2; j++) {
534a553
> static double **cmatrix(double *data, int ncol, int nrow) {
536,539d554
< static double **cmatrix(double *data, int ncol, int nrow)
<     {
< 
<     int i,j;
546c561
< 	for (i=0; i<nrow; i++) {
---
> 		for (int i = 0; i < nrow; i++) {
550,552c565,566
<         }
<     else {
< 	for (i=0; i<nrow; i++) {
---
> 	} else {
> 		for (int i = 0; i < nrow; i++) {
554c568,569
< 	    for (j=0; j<ncol; j++) *temp++ = *data++;
---
> 			for (int j = 0; j < ncol; j++)
> 				*temp++ = *data++;
560,561c575
< static void cmatrix_free(double **data) 
< {
---
> static void cmatrix_free(double **data) {
569,579c582,583
<     double hazard, 
<            denom,
<            temp, temp2,
<            efron_wt,
<            ndead, 
<            hazard2;
<     int    p,
<            nused,
<            method,
< 	   ip, istrat,
<            i, j;
---
> 	double hazard, denom, temp, temp2, efron_wt, ndead, hazard2;
> 	int p, nused, method, istrat, i;
589c593
<     for (ip=0; ip<nused; ip++) {
---
> 	for (int ip = 0; ip < nused; ip++) {
607c611
< 	    for (j=0; j<ndead; j++) {  
---
> 			for (int j = 0; j < ndead; j++) {
617,618c621
< 		}
< 	    else {
---
> 			} else {
622c625
<                 for (j=0; j<ndead; j++) {
---
> 				for (int j = 0; j < ndead; j++) {
637c640
<     for (ip=nused-1; ip>=0; ) {
---
> 	for (int ip = nused - 1; ip >= 0;) {
644c647
< 	    for (j=0; j<ndead; j++) {
---
> 			for (int j = 0; j < ndead; j++) {
650,651c653
< 	    }
< 	else {
---
> 		} else {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/coxmart.c Recommended/survival/src/coxmart.c
24,28c24,25
< void coxmart(Sint   *sn,     Sint   *method,    double *time, 
< 	     Sint   *status, Sint   * strata,   double *score, 
< 	     double *wt,     double *expect)
<     {
<     register int i,j;
---
> void coxmart(Sint *sn, Sint *method, double *time, Sint *status, Sint * strata,
> 		double *score, double *wt, double *expect) {
40,41c37,39
<     for (i= n -1; i>=0; i--) {
< 	if (strata[i]==1) denom =0;
---
> 	for (int i = n - 1; i >= 0; i--) {
> 		if (strata[i] == 1)
> 			denom = 0;
45c43,44
< 	else    expect[i] =0;
---
> 		else
> 			expect[i] = 0;
54,55c53,55
<     for (i= 0; i<n; i++) {
< 	if (expect[i]!=0) denom = expect[i];
---
> 	for (int i = 0; i < n; i++) {
> 		if (expect[i] != 0)
> 			denom = expect[i];
64c64
< 		for (j=lastone; j<=i; j++) {
---
> 				for (int j = lastone; j <= i; j++) {
67,68c67
< 		}
< 	    else {
---
> 			} else {
71c70
< 		for (j=0; j<deaths; j++) {
---
> 				for (int j = 0; j < deaths; j++) {
76,78c75,79
< 		for (j=lastone; j<=i; j++) {
< 		    if (status[j]==0) expect[j] = -score[j]*hazard;
< 		    else  expect[j] -=  score[j]* temp;
---
> 				for (int j = lastone; j <= i; j++) {
> 					if (status[j] == 0)
> 						expect[j] = -score[j] * hazard;
> 					else
> 						expect[j] -= score[j] * temp;
86c87,88
< 	if (strata[i]==1) hazard =0;
---
> 		if (strata[i] == 1)
> 			hazard = 0;
89c91,92
<     for (j=lastone; j<n; j++)  expect[j] -= score[j] * hazard;
---
> 	for (int j = lastone; j < n; j++)
> 		expect[j] -= score[j] * hazard;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/coxmart2.c Recommended/survival/src/coxmart2.c
20,24c20,22
< void coxmart2(Sint   *sn,     double *time, 
< 	     Sint   *status, Sint   * strata,   double *score, 
< 	     double *wt,     double *resid)
<     {
<     int i,j;
---
> void coxmart2(Sint *sn, double *time, Sint *status, Sint * strata,
> 		double *score, double *wt, double *resid) {
> 	int j;
36c34
<     for (i=0; i<n; ) {
---
> 	for (int i = 0; i < n;) {
64c62
<     for (i= n-1; i>=0; i--) {
---
> 	for (int i = n - 1; i >= 0; i--) {
67c65,66
< 	if (strata[i] ==1) expected=0;  /* last obs of a strata */
---
> 		if (strata[i] == 1)
> 			expected = 0; /* last obs of a strata */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/coxph_wtest.c Recommended/survival/src/coxph_wtest.c
9d8
<     int i,j;
21,24c20,26
<     for (i=0; i<nvar; i++) if (var2[i][i] >0) df++;  /* count up the df */
< 
<     for (i=0; i< *ntest; i++) {
< 	for (j=0; j<nvar; j++) solve[j] = b[j];
---
> 	for (int i = 0; i < nvar; i++)
> 		if (var2[i][i] > 0)
> 			df++; /* count up the df */
> 
> 	for (int i = 0; i < *ntest; i++) {
> 		for (int j = 0; j < nvar; j++)
> 			solve[j] = b[j];
28c30,31
< 	for (j=0; j<nvar; j++) sum += b[j]*solve[j];
---
> 		for (int j = 0; j < nvar; j++)
> 			sum += b[j] * solve[j];
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/coxsafe.c Recommended/survival/src/coxsafe.c
30a31
> #include <R_ext/Minmax.h>
35,37c36
<     if (x< SMALL) return(SMALL);
<     if (x> LARGE) return(LARGE);
<     return (x);
---
> 	return min(max(SMALL, x), LARGE);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/coxscho.c Recommended/survival/src/coxscho.c
36,40c36,37
< void coxscho(Sint   *nusedx,    Sint   *nvarx,    double *y, 
< 	     double *covar2,    double *score,    Sint   *strata,  
< 	     Sint   *method2,   double *work)
< {
<     int i,k,person;
---
> void coxscho(Sint *nusedx, Sint *nvarx, double *y, double *covar2,
> 		double *score, Sint *strata, Sint *method2, double *work) {
52,54c49
<     double  *start,
< 	    *stop,
< 	    *event;
---
> 	double *start, *stop, *event;
73,74c68,70
<     for (person=0; person<nused;) {
< 	if (event[person]==0) person++;
---
> 	for (int person = 0; person < nused;) {
> 		if (event[person] == 0)
> 			person++;
81c77
< 	    for (i=0; i<nvar; i++) {
---
> 			for (int i = 0; i < nvar; i++) {
87c83
< 	    for (k=person; k<nused; k++) {
---
> 			for (int k = person; k < nused; k++) {
91c87
< 		    for (i=0; i<nvar; i++) {
---
> 					for (int i = 0; i < nvar; i++) {
97c93,94
< 			for (i=0; i<nvar; i++) a2[i]+= weight*covar[i][k];
---
> 						for (int i = 0; i < nvar; i++)
> 							a2[i] += weight * covar[i][k];
100c97,98
< 		if (strata[k]==1) break;
---
> 				if (strata[k] == 1)
> 					break;
106,107c104,106
< 	    for (i=0; i<nvar; i++) mean[i] =0;
< 	    for (k=0; k<deaths; k++) {
---
> 			for (int i = 0; i < nvar; i++)
> 				mean[i] = 0;
> 			for (int k = 0; k < deaths; k++) {
109,110c108,110
< 		for (i=0; i<nvar; i++)
< 		    mean[i] += (a[i] - temp*a2[i])/(deaths*(denom -temp*efron_wt));
---
> 				for (int i = 0; i < nvar; i++)
> 					mean[i] += (a[i] - temp * a2[i])
> 							/ (deaths * (denom - temp * efron_wt));
115c115
< 	    for (k=person; k<nused && stop[k]==time; k++) {
---
> 			for (int k = person; k < nused && stop[k] == time; k++) {
117c117
< 		    for (i=0; i<nvar; i++) {
---
> 					for (int i = 0; i < nvar; i++) {
122c122,123
< 		if (strata[k]==1) break;
---
> 				if (strata[k] == 1)
> 					break;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/coxscore.c Recommended/survival/src/coxscore.c
29,34c29,31
< void coxscore(Sint   *nx,      Sint   *nvarx,    double *y, 
< 	      double *covar2,  Sint   *strata,   double *score, 
< 	      double *weights, Sint   *method,   double *resid2,
< 	      double *scratch)
<     {
<     int i,j, k;
---
> void coxscore(Sint *nx, Sint *nvarx, double *y, double *covar2, Sint *strata,
> 		double *score, double *weights, Sint *method, double *resid2,
> 		double *scratch) {
38d34
<     int dd;
64c60,61
<     for (i=0; i<nvar; i++) a2[i] =0;
---
> 	for (int i = 0; i < nvar; i++)
> 		a2[i] = 0;
66c63
<     for (i=n-1; i >=0; i--) {
---
> 	for (int i = n - 1; i >= 0; i--) {
69c66,67
< 	    for (j=0; j<nvar; j++) a[j] =0;
---
> 			for (int j = 0; j < nvar; j++)
> 				a[j] = 0;
78c76,77
< 	    for (j=0; j<nvar; j++) a2[j] += risk*covar[j][i];
---
> 			for (int j = 0; j < nvar; j++)
> 				a2[j] += risk * covar[j][i];
80c79
< 	for (j=0; j<nvar; j++) {
---
> 		for (int j = 0; j < nvar; j++) {
85c84,85
< 	if (deaths>0 && (i==0 || strata[i-1]==1 || time[i]!=time[i-1])){
---
> 		if (deaths > 0
> 				&& (i == 0 || strata[i - 1] == 1 || time[i] != time[i - 1])) {
89c89
< 		for (j=0; j<nvar; j++)  {
---
> 				for (int j = 0; j < nvar; j++) {
91c91
< 		    for (k=i; k<n; k++) {
---
> 					for (int k = i; k < n; k++) {
96c96,97
< 			if (strata[k]==1) break;
---
> 						if (strata[k] == 1)
> 							break;
99,100c100
< 		}
< 	    else {  /* the harder case */
---
> 			} else { /* the harder case */
102c102
< 		for (dd=0; dd<deaths; dd++) {
---
> 				for (int dd = 0; dd < deaths; dd++) {
106c106
< 		    for (j=0; j<nvar; j++) {
---
> 					for (int j = 0; j < nvar; j++) {
108c108
< 			for (k=i; k<n; k++) {
---
> 						for (int k = i; k < n; k++) {
112,116c112,117
< 				resid[j][k] -= temp2 * score[k] * hazard *
< 						    (1 - downwt);
< 				}
< 			    else resid[j][k]-= temp2*score[k] * hazard;
< 			    if (strata[k]==1) break;
---
> 								resid[j][k] -= temp2 * score[k] * hazard
> 										* (1 - downwt);
> 							} else
> 								resid[j][k] -= temp2 * score[k] * hazard;
> 							if (strata[k] == 1)
> 								break;
124c125,126
< 	    for (j=0; j<nvar; j++)  a2[j] =0;
---
> 			for (int j = 0; j < nvar; j++)
> 				a2[j] = 0;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/doloop.c Recommended/survival/src/doloop.c
47d46
<     register int i;
50c49,50
< 	for (i=0; i<nloops; i++)  index[i] =minval+i;
---
> 		for (int i = 0; i < nloops; i++)
> 			index[i] = minval + i;
52,53c52,55
< 	if (maxval >= (minval+i)) return (minval+i-1);
< 	    else                  return (minval-1);
---
> 		if (maxval >= (minval + nloops))
> 			return (minval + nloops - 1);
> 		else
> 			return (minval - 1);
59,60c61,64
<     if (index[nloops] <= (maxval-depth)) return(index[nloops]);
<     else if (nloops ==0)                 return(minval - depth);
---
> 	if (index[nloops] <= (maxval - depth))
> 		return (index[nloops]);
> 	else if (nloops == 0)
> 		return (minval - depth);
Only in Recommended/survival/src: localization.h
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/pyears1.c Recommended/survival/src/pyears1.c
49,80c49,60
< void pyears1(Sint   *sn,      Sint   *sny,      Sint   *sdoevent, 
< 	     double *sy,      double *weight,       
<              Sint   *sedim,   Sint   *efac, 
< 	     Sint   *edims,   double *secut,    double *expect, 
< 	     double *sedata,  Sint   *sodim,    Sint   *ofac, 
< 	     Sint   *odims,   double *socut,    Sint   *smethod, 
< 	     double *sodata,  double *pyears,   double *pn, 
< 	     double *pcount,  double *pexpect,  double *offtable)
<     {
< 
<     int i,j;
<     int     n,
< 	    ny,
< 	    doevent,
<             method,
< 	    edim,
< 	    odim;
<     double  *start,
< 	    *stop,
< 	    *event,
< 	    **ecut,
< 	    **ocut,
< 	    **edata,
< 	    **odata;
<     double  *data,
< 	    *data2;
<     double  timeleft,
< 	    thiscell,
< 	    etime,
< 	    et2;
<     int     index,
< 	    indx, indx2;
---
> void pyears1(Sint *sn, Sint *sny, Sint *sdoevent, double *sy, double *weight,
> 		Sint *sedim, Sint *efac, Sint *edims, double *secut, double *expect,
> 		double *sedata, Sint *sodim, Sint *ofac, Sint *odims, double *socut,
> 		Sint *smethod, double *sodata, double *pyears, double *pn,
> 		double *pcount, double *pexpect, double *offtable) {
> 
> 	int i;
> 	int n, ny, doevent, method, edim, odim;
> 	double *start, *stop, *event, **ecut, **ocut, **edata, **odata;
> 	double *data, *data2;
> 	double timeleft, thiscell, etime, et2;
> 	int index, indx, indx2;
99,100c79
< 	}
<     else   {
---
> 	} else {
114c93
<     for (i=0; i<edim; i++) {
---
> 	for (int i = 0; i < edim; i++) {
116,117c95,98
< 	if (efac[i]==0)     secut += edims[i];
< 	else if(efac[i] >1) secut += 1 + (efac[i]-1)*edims[i];
---
> 		if (efac[i] == 0)
> 			secut += edims[i];
> 		else if (efac[i] > 1)
> 			secut += 1 + (efac[i] - 1) * edims[i];
121c102
<     for (i=0; i<odim; i++) {
---
> 	for (int i = 0; i < odim; i++) {
123c104,105
< 	if (ofac[i]==0) socut += odims[i] +1;
---
> 		if (ofac[i] == 0)
> 			socut += odims[i] + 1;
135,136c117,120
< 	if (dostart==1) timeleft = stop[i] - start[i];
< 	else timeleft= stop[i];
---
> 		if (dostart == 1)
> 			timeleft = stop[i] - start[i];
> 		else
> 			timeleft = stop[i];
143,145c127,132
< 	if (dostart==1) timeleft = stop[i] - start[i];
< 	else timeleft= stop[i];
< 	if (timeleft >0 && timeleft < eps) eps = timeleft;
---
> 		if (dostart == 1)
> 			timeleft = stop[i] - start[i];
> 		else
> 			timeleft = stop[i];
> 		if (timeleft > 0 && timeleft < eps)
> 			eps = timeleft;
150c137
<     for (i=0; i<n; i++) {
---
> 	for (int i = 0; i < n; i++) {
154,163c141,156
< 	for (j=0; j<odim; j++) {
< 	    if (ofac[j] ==1 || dostart==0) data[j] = odata[j][i];
< 	    else                           data[j] = odata[j][i] + start[i];
< 	    }
< 	for (j=0; j<edim; j++) {
< 	    if (efac[j] ==1 || dostart==0) data2[j] = edata[j][i];
< 	    else                           data2[j] = edata[j][i] + start[i];
< 	    }
< 	if (dostart==1) timeleft = stop[i] - start[i];
< 	else timeleft= stop[i];
---
> 		for (int j = 0; j < odim; j++) {
> 			if (ofac[j] == 1 || dostart == 0)
> 				data[j] = odata[j][i];
> 			else
> 				data[j] = odata[j][i] + start[i];
> 		}
> 		for (int j = 0; j < edim; j++) {
> 			if (efac[j] == 1 || dostart == 0)
> 				data2[j] = edata[j][i];
> 			else
> 				data2[j] = edata[j][i] + start[i];
> 		}
> 		if (dostart == 1)
> 			timeleft = stop[i] - start[i];
> 		else
> 			timeleft = stop[i];
194,198c187,193
< 		    et2 = pystep(edim, &indx, &indx2, &lwt, data2, efac,
< 				 edims, ecut, etime, 1);
< 		    if (lwt <1) lambda = (lwt*expect[indx] +
< 						     (1-lwt)*expect[indx2]);
< 		    else       lambda =  expect[indx];
---
> 					et2 = pystep(edim, &indx, &indx2, &lwt, data2, efac, edims,
> 							ecut, etime, 1);
> 					if (lwt < 1)
> 						lambda =
> 								(lwt * expect[indx] + (1 - lwt) * expect[indx2]);
> 					else
> 						lambda = expect[indx];
200c195,196
< 			temp += exp(-hazard)*(1-exp(-lambda*et2))/ lambda;
---
> 						temp += exp(-hazard) * (1 - exp(-lambda * et2))
> 								/ lambda;
203,204c199,201
< 		    for (j=0; j<edim; j++)
< 			if (efac[j] !=1) data2[j] += et2;
---
> 					for (int j = 0; j < edim; j++)
> 						if (efac[j] != 1)
> 							data2[j] += et2;
207,208c204,207
< 		if (method==1) pexpect[index] += hazard * weight[i];
< 		else           pexpect[index] += exp(-cumhaz)*temp * weight[i];
---
> 				if (method == 1)
> 					pexpect[index] += hazard * weight[i];
> 				else
> 					pexpect[index] += exp(-cumhaz) * temp * weight[i];
210,211c209
< 		}
< 	    else  {
---
> 			} else {
213,214c211,213
< 		for (j=0; j<edim; j++)
< 		    if (efac[j] !=1) data2[j] += thiscell;
---
> 				for (int j = 0; j < edim; j++)
> 					if (efac[j] != 1)
> 						data2[j] += thiscell;
217,218c216,218
< 	    for (j=0; j<odim; j++)
< 		if (ofac[j] ==0) data[j] += thiscell;
---
> 			for (int j = 0; j < odim; j++)
> 				if (ofac[j] == 0)
> 					data[j] += thiscell;
221c221,222
< 	if (index >=0 && doevent) pcount[index] += event[i] * weight[i];
---
> 		if (index >= 0 && doevent)
> 			pcount[index] += event[i] * weight[i];
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/pyears2.c Recommended/survival/src/pyears2.c
35,51c35,41
< void pyears2(Sint   *sn,      Sint   *sny,   Sint   *sdoevent, 
< 	     double *sy,      double *wt,    Sint   *sodim,    Sint   *ofac, 
< 	     Sint   *odims,   double *socut, double *sodata,
< 	     double *pyears,  double *pn,    double *pcount, 
< 	     double *offtable)
<     {
< 
<     int i,j;
<     int     n,
< 	    ny,
< 	    doevent,
< 	    odim;
<     double  *start,
< 	    *stop,
< 	    *event,
< 	    **ocut,
< 	    **odata;
---
> void pyears2(Sint *sn, Sint *sny, Sint *sdoevent, double *sy, double *wt,
> 		Sint *sodim, Sint *ofac, Sint *odims, double *socut, double *sodata,
> 		double *pyears, double *pn, double *pcount, double *offtable) {
> 
> 	int i;
> 	int n, ny, doevent, odim;
> 	double *start, *stop, *event, **ocut, **odata;
53,54c43
<     double  timeleft,
< 	    thiscell;
---
> 	double timeleft, thiscell;
71,72c60
< 	}
<     else   {
---
> 	} else {
84c72
<     for (i=0; i<odim; i++) {
---
> 	for (int i = 0; i < odim; i++) {
86c74,75
< 	if (ofac[i]==0) socut += odims[i] +1;
---
> 		if (ofac[i] == 0)
> 			socut += odims[i] + 1;
98,99c87,90
< 	if (dostart==1) timeleft = stop[i] - start[i];
< 	else timeleft= stop[i];
---
> 		if (dostart == 1)
> 			timeleft = stop[i] - start[i];
> 		else
> 			timeleft = stop[i];
106,108c97,102
< 	if (dostart==1) timeleft = stop[i] - start[i];
< 	else timeleft= stop[i];
< 	if ((timeleft >0) && (timeleft < eps)) eps = timeleft;
---
> 		if (dostart == 1)
> 			timeleft = stop[i] - start[i];
> 		else
> 			timeleft = stop[i];
> 		if ((timeleft > 0) && (timeleft < eps))
> 			eps = timeleft;
113c107
<     for (i=0; i<n; i++) {
---
> 	for (int i = 0; i < n; i++) {
122,127c116,125
< 	for (j=0; j<odim; j++) {
< 	    if (ofac[j] ==1 || dostart==0) data[j] = odata[j][i];
< 	    else                           data[j] = odata[j][i] + start[i];
< 	    }
< 	if (dostart==1) timeleft = stop[i] - start[i];
< 	else            timeleft = stop[i];
---
> 		for (int j = 0; j < odim; j++) {
> 			if (ofac[j] == 1 || dostart == 0)
> 				data[j] = odata[j][i];
> 			else
> 				data[j] = odata[j][i] + start[i];
> 		}
> 		if (dostart == 1)
> 			timeleft = stop[i] - start[i];
> 		else
> 			timeleft = stop[i];
147,148c145,146
< 		}
< 	    else *offtable += thiscell * wt[i];
---
> 			} else
> 				*offtable += thiscell * wt[i];
150,151c148,150
< 	    for (j=0; j<odim; j++)
< 		if (ofac[j] ==0) data[j] += thiscell;
---
> 			for (int j = 0; j < odim; j++)
> 				if (ofac[j] == 0)
> 					data[j] += thiscell;
154c153,154
< 	if (index >=0 && doevent) pcount[index] += event[i] * wt[i];
---
> 		if (index >= 0 && doevent)
> 			pcount[index] += event[i] * wt[i];
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/pyears3b.c Recommended/survival/src/pyears3b.c
38,47c38,40
< SEXP pyears3b(SEXP   death2,    SEXP   efac2,   SEXP edims2,
< 	      SEXP   ecut2,     SEXP   expect2, SEXP grpx2,
< 	      SEXP   x2, 	SEXP   y2,      SEXP times2,
< 	      SEXP   ngrp2) {
<     int i,j,k;
<     int     n,
< 	    death,
< 	    edim,
< 	    ngrp,
< 	    ntime;
---
> SEXP pyears3b(SEXP death2, SEXP efac2, SEXP edims2, SEXP ecut2, SEXP expect2,
> 		SEXP grpx2, SEXP x2, SEXP y2, SEXP times2, SEXP ngrp2) {
> 	int n, death, edim, ngrp, ntime;
53,60c46,47
<     double  timeleft,
< 	    thiscell,
< 	    etime,
< 	    time,
< 	    et2;
<     int     index,
< 	    indx,
< 	    indx2;
---
> 	double timeleft, thiscell, etime, time, et2;
> 	int index, indx, indx2;
92c78,79
<     for (j=0; j<ntime*ngrp; j++) wvec[j] =0;
---
> 	for (int j = 0; j < ntime * ngrp; j++)
> 		wvec[j] = 0;
99c86
<     for (i=0; i<edim; i++) {
---
> 	for (int i = 0; i < edim; i++) {
101,102c88,91
< 	if (efac[i]==0)     etemp += edims[i];
< 	else if(efac[i] >1) etemp += 1 + (efac[i]-1)*edims[i];
---
> 		if (efac[i] == 0)
> 			etemp += edims[i];
> 		else if (efac[i] > 1)
> 			etemp += 1 + (efac[i] - 1) * edims[i];
112c101
<     for (i=0; i<(ntime*ngrp); i++) {
---
> 	for (int i = 0; i < (ntime * ngrp); i++) {
118c107
<     for (i=0; i<n; i++) {
---
> 	for (int i = 0; i < n; i++) {
124c113,114
< 	for (j=0; j<edim; j++) data2[j] = x[j][i];
---
> 		for (int j = 0; j < edim; j++)
> 			data2[j] = x[j][i];
132c122
< 	for (j=0; j<ntime && timeleft >0; j++) {
---
> 		for (int j = 0; j < ntime && timeleft > 0; j++) {
134c124,125
< 	    if (thiscell > timeleft) thiscell = timeleft;
---
> 			if (thiscell > timeleft)
> 				thiscell = timeleft;
146,151c137,146
< 		et2 = pystep(edim, &indx, &indx2, &wt, data2, efac,
< 			     edims, ecut, etime, 1);
< 		if (wt <1) hazard+= et2*(wt*expect[indx] +(1-wt)*expect[indx2]);
< 		else       hazard+= et2* expect[indx];
< 		for (k=0; k<edim; k++)
< 		    if (efac[k] !=1) data2[k] += et2;
---
> 				et2 = pystep(edim, &indx, &indx2, &wt, data2, efac, edims, ecut,
> 						etime, 1);
> 				if (wt < 1)
> 					hazard += et2
> 							* (wt * expect[indx] + (1 - wt) * expect[indx2]);
> 				else
> 					hazard += et2 * expect[indx];
> 				for (int k = 0; k < edim; k++)
> 					if (efac[k] != 1)
> 						data2[k] += et2;
161,164c156,160
< 		if (death==0) esurv[index]=1;
< 		else          esurv[index]=0;
< 		}
< 	    else if (death==0) {
---
> 				if (death == 0)
> 					esurv[index] = 1;
> 				else
> 					esurv[index] = 0;
> 			} else if (death == 0) {
167,168c163
< 		}
< 	    else {
---
> 			} else {
180c175
<     for (i=0; i<ntime*ngrp; i++) {
---
> 	for (int i = 0; i < ntime * ngrp; i++) {
185,188c180,185
< 	    if (death==0) esurv[i] /= wvec[i];
< 	    else          esurv[i] = exp(-esurv[i]/wvec[i]);
< 	    }
< 	else if (death!=0) esurv[i] = exp(-esurv[i]);
---
> 			if (death == 0)
> 				esurv[i] /= wvec[i];
> 			else
> 				esurv[i] = exp(-esurv[i] / wvec[i]);
> 		} else if (death != 0)
> 			esurv[i] = exp(-esurv[i]);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/pystep.c Recommended/survival/src/pystep.c
32,36c32,34
< double pystep(int nc,        int  *index,  int  *index2,   double *wt, 
< 	      double *data,  Sint *fac,    Sint *dims,     double **cuts, 
< 	      double step,   int  edge)
<     {
<     int i,j;
---
> double pystep(int nc, int *index, int *index2, double *wt, double *data,
> 		Sint *fac, Sint *dims, double **cuts, double step, int edge) {
> 	int j;
44c41,42
<     *index =0;  *index2=0;
---
> 	*index = 0;
> 	*index2 = 0;
48,49c46,48
<     for (i=0; i<nc; i++) {
< 	if (fac[i]==1) *index += (data[i]-1) * kk;
---
> 	for (int i = 0; i < nc; i++) {
> 		if (fac[i] == 1)
> 			*index += (data[i] - 1) * kk;
51,53c50,56
< 	    if (fac[i]>1) dtemp = 1 + (fac[i]-1)*dims[i];
< 	    else          dtemp = dims[i];
< 	    for (j=0; j<dtemp; j++) if (data[i] < cuts[i][j]) break;
---
> 			if (fac[i] > 1)
> 				dtemp = 1 + (fac[i] - 1) * dims[i];
> 			else
> 				dtemp = dims[i];
> 			for (j = 0; j < dtemp; j++)
> 				if (data[i] < cuts[i][j])
> 					break;
58,63c61,68
< 		    if (temp > step) shortfall = step;
< 		    else             shortfall = temp;
< 		    }
< 		if (temp < maxtime)  maxtime = temp;
< 		}
< 	    else if (j==dtemp){  /*bigger than last cutpoint */
---
> 					if (temp > step)
> 						shortfall = step;
> 					else
> 						shortfall = temp;
> 				}
> 				if (temp < maxtime)
> 					maxtime = temp;
> 			} else if (j == dtemp) { /*bigger than last cutpoint */
66,72c71,80
< 		    if (temp <=0) shortfall = step;
< 		    else if (temp < maxtime) maxtime = temp;
< 		    }
< 		if (fac[i] >1) j = dims[i] -1;   /*back to normal indices */
< 		else  j--;
< 		}
< 	    else {
---
> 					if (temp <= 0)
> 						shortfall = step;
> 					else if (temp < maxtime)
> 						maxtime = temp;
> 				}
> 				if (fac[i] > 1)
> 					j = dims[i] - 1; /*back to normal indices */
> 				else
> 					j--;
> 			} else {
74c82,83
< 		if (temp < maxtime)  maxtime = temp;
---
> 				if (temp < maxtime)
> 					maxtime = temp;
88c97,98
<     if (shortfall ==0) return(maxtime);
---
> 	if (shortfall == 0)
> 		return (maxtime);
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/survConcordance.c Recommended/survival/src/survConcordance.c
26,29c26,28
< void survConcordance(Sint *np,    double *time,  Sint *status, 
< 		     double *x,   Sint *n2p,     double *x2,
< 		     Sint   *temp,Sint *result) {
<     int i, j, k=0;
---
> void survConcordance(Sint *np, double *time, Sint *status, double *x, Sint *n2p,
> 		double *x2, Sint *temp, Sint *result) {
> 	int j, k = 0;
40,41c39,42
<     for (i=0; i<5; i++) result[i] =0;  /* redundant I think */
<     for (i=0; i<n2; i++) count1[i]=0;
---
> 	for (int i = 0; i < 5; i++)
> 		result[i] = 0; /* redundant I think */
> 	for (int i = 0; i < n2; i++)
> 		count1[i] = 0;
73c74
<     for (i=0; i<n; i++) {
---
> 	for (int i = 0; i < n; i++) {
80,82c81,86
< 	    start = 0; end= n2-1;  /*start to end of sublist being looked at */
< 	    if (tdeath==0) count=count1;   /* use the appropriate count */
< 	    else           count=count2;
---
> 			start = 0;
> 			end = n2 - 1; /*start to end of sublist being looked at */
> 			if (tdeath == 0)
> 				count = count1; /* use the appropriate count */
> 			else
> 				count = count2;
85c89,90
< 		if (x[i] == x2[k]) break;
---
> 				if (x[i] == x2[k])
> 					break;
90,91c95,96
< 		    }
< 		else  start = k+1;  /*right branch */
---
> 				} else
> 					start = k + 1; /*right branch */
115,116c120,121
< 		    for (j=0; j<n2; j++) count2[j] = count1[j];
< 		    }
---
> 					for (j = 0; j < n2; j++)
> 						count2[j] = count1[j];
118c123
<             else {
---
> 			} else {
122,123c127
<             }
<         else { 
---
> 		} else {
135c139,140
< 	start = 0; end= n2-1;  /*start to end of sublist being looked at */
---
> 		start = 0;
> 		end = n2 - 1; /*start to end of sublist being looked at */
139,141c144,149
< 	    if (x[i] == x2[k]) break;
< 	    if (x[i] < x2[k]) 	end = k-1;  /* left branch */
< 	    else  start = k+1;  /*right branch */
---
> 			if (x[i] == x2[k])
> 				break;
> 			if (x[i] < x2[k])
> 				end = k - 1; /* left branch */
> 			else
> 				start = k + 1; /*right branch */
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/survdiff2.c Recommended/survival/src/survdiff2.c
6,11c6,8
< void survdiff2(Sint   *nn,     Sint   *nngroup,    Sint   *nstrat, 
< 	       double *rho,    double *time,       Sint   *status, 
< 	       Sint   *group,  Sint   *strata,	   double *obs, 
< 	       double *exp,    double *var,        double *risk, 
< 	       double *kaplan)
<     {
---
> void survdiff2(Sint *nn, Sint *nngroup, Sint *nstrat, double *rho, double *time,
> 		Sint *status, Sint *group, Sint *strata, double *obs, double *exp,
> 		double *var, double *risk, double *kaplan) {
21,23c18,22
<     istart=0; koff=0;
<     for (i=0; i< ngroup*ngroup; i++)  var[i]=0;
<     for (i=0; i< *nstrat*ngroup; i++) {
---
> 	istart = 0;
> 	koff = 0;
> 	for (int i = 0; i < ngroup * ngroup; i++)
> 		var[i] = 0;
> 	for (int i = 0; i < *nstrat * ngroup; i++) {
29c28,29
< 	for (i=0; i<ngroup; i++) risk[i]=0;
---
> 		for (int i = 0; i < ngroup; i++)
> 			risk[i] = 0;
33c33,34
< 	    if (strata[i]==1) break;
---
> 			if (strata[i] == 1)
> 				break;
43c43
< 	    for (i=istart; i<n; ) {
---
> 			for (int i = istart; i < n;) {
59,61c59,63
< 	for (i=n-1; i>=istart; i--) {
< 	    if (*rho ==0) wt=1;
< 	    else          wt= pow(kaplan[i], *rho);
---
> 		for (int i = n - 1; i >= istart; i--) {
> 			if (*rho == 0)
> 				wt = 1;
> 			else
> 				wt = pow(kaplan[i], *rho);
74c76
< 		for (k=0; k<ngroup; k++)
---
> 				for (int k = 0; k < ngroup; k++)
77c79,80
< 		if (nrisk==1) continue;  /*only 1 subject, so no variance */
---
> 				if (nrisk == 1)
> 					continue; /*only 1 subject, so no variance */
80,81c83,85
< 		for (j=0; j<ngroup; j++) {
< 		    tmp = wt* deaths* risk[j]* (nrisk-deaths)/(nrisk *(nrisk-1));
---
> 				for (int j = 0; j < ngroup; j++) {
> 					tmp = wt * deaths * risk[j] * (nrisk - deaths)
> 							/ (nrisk * (nrisk - 1));
83c87
< 		    for (k=0; k<ngroup; k++) {
---
> 					for (int k = 0; k < ngroup; k++) {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/survfit4.c Recommended/survival/src/survfit4.c
22d21
<     int i,j;
25c24
<     for (i=0; i< *n; i++) {
---
> 	for (int i = 0; i < *n; i++) {
30,31c29
< 	    }
< 	else if (d==1){
---
> 		} else if (d == 1) {
35,36c33
< 	    }
< 	else {
---
> 		} else {
39c36
< 	    for (j=1; j<d; j++) {
---
> 			for (int j = 1; j < d; j++) {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/survpenal.c Recommended/survival/src/survpenal.c
15,19c15,18
< void survpenal(int whichcase, int nfrail,    int  nvar,    double **hmat, 
< 	       double **JJ,   double *hdiag, double *jdiag,
< 	       double *u,     double *beta,  double *penalty,
< 	       int ptype,     int pdiag,     SEXP pexpr1,   double *cptr1, 
< 	       SEXP pexpr2,   double *cptr2, SEXP rho) {
---
> void survpenal(int whichcase, int nfrail, int nvar, double **hmat, double **JJ,
> 		double *hdiag, double *jdiag, double *u, double *beta, double *penalty,
> 		int ptype, int pdiag, SEXP pexpr1, double *cptr1, SEXP pexpr2,
> 		double *cptr2, SEXP rho) {
21c20
<     int i,j, k;
---
> 	int k;
31c30,31
< 	for (i=0; i<nfrail; i++) cptr1[i] = beta[i];  /* set "coef1" in rho */
---
> 		for (int i = 0; i < nfrail; i++)
> 			cptr1[i] = beta[i]; /* set "coef1" in rho */
42c42,43
< 	    for (i=0; i<nfrail; i++) beta[i] = dptr[i];
---
> 			for (int i = 0; i < nfrail; i++)
> 				beta[i] = dptr[i];
60c61
< 		for (i=0; i<nfrail; i++) {
---
> 				for (int i = 0; i < nfrail; i++) {
64c65,66
< 		    for (j=0; j<nvar; j++) hmat[j][i] =0; 
---
> 					for (int j = 0; j < nvar; j++)
> 						hmat[j][i] = 0;
66,67c68
< 	        }
< 	    else {
---
> 			} else {
69c70,71
< 		for (i=0; i<nfrail; i++) u[i] += dptr[i];
---
> 				for (int i = 0; i < nfrail; i++)
> 					u[i] += dptr[i];
72c74
< 		for (i=0; i<nfrail; i++) {
---
> 				for (int i = 0; i < nfrail; i++) {
87c89,90
< 	for (i=0; i<nvar; i++) cptr2[i] = beta[i+nfrail]; /* set fcn var */
---
> 		for (int i = 0; i < nvar; i++)
> 			cptr2[i] = beta[i + nfrail]; /* set fcn var */
93c96,97
< 	    for (i=0; i<nvar; i++) beta[i+nfrail] = dptr[i];
---
> 			for (int i = 0; i < nvar; i++)
> 				beta[i + nfrail] = dptr[i];
96c100,101
< 	    for (i=0; i<nvar; i++) u[i+nfrail] += dptr[i];
---
> 			for (int i = 0; i < nvar; i++)
> 				u[i + nfrail] += dptr[i];
101c106
< 		for (i=0; i<nvar; i++) {
---
> 				for (int i = 0; i < nvar; i++) {
105,106c110
< 	        }
< 	    else {
---
> 			} else {
109,110c113,114
< 		for (i=0; i<nvar; i++) {
< 		    for (j=nfrail; j<nvar+nfrail; j++) {
---
> 				for (int i = 0; i < nvar; i++) {
> 					for (int j = nfrail; j < nvar + nfrail; j++) {
119c123
< 	    for (i=0; i<nvar; i++) {
---
> 			for (int i = 0; i < nvar; i++) {
123c127,128
< 		    for (j=0; j<i; j++) hmat[i][j+nfrail] =0;
---
> 					for (int j = 0; j < i; j++)
> 						hmat[i][j + nfrail] = 0;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/survreg6.c Recommended/survival/src/survreg6.c
45,52c45,49
< SEXP survreg6(SEXP maxiter2,   SEXP nvarx,  SEXP y,
< 	      SEXP ny2,        SEXP covar2, SEXP wtx,
< 	      SEXP offset2,    SEXP beta2,  SEXP nstratx,
< 	      SEXP stratax,    SEXP epsx,   SEXP  tolx,
< 	      SEXP dist,       SEXP dexpr,  SEXP rho) {
<     int i,j;	
<     int n, maxiter,
< 	ny;
---
> SEXP survreg6(SEXP maxiter2, SEXP nvarx, SEXP y, SEXP ny2, SEXP covar2,
> 		SEXP wtx, SEXP offset2, SEXP beta2, SEXP nstratx, SEXP stratax,
> 		SEXP epsx, SEXP tolx, SEXP dist, SEXP dexpr, SEXP rho) {
> 	int j;
> 	int n, maxiter, ny;
54c51
<     int halving, iter;
---
> 	int halving;
130,131c127,128
<     for (i=nvar; i<LENGTH(beta2); i++) newbeta[i] = beta[i];
<        
---
> 	for (int i = nvar; i < LENGTH(beta2); i++)
> 		newbeta[i] = beta[i];
137,138c134
< 	}
<     else {
---
> 	} else {
147,148c143
< 	}
<     else {
---
> 	} else {
155c150,152
< 	for (i=0; i<n; i++) if (status[i]==3) j++;
---
> 		for (int i = 0; i < n; i++)
> 			if (status[i] == 3)
> 				j++;
165,171c162,166
<     *loglik = (*dolik)(n,      nvar,             nstrat,  0,
< 		       beta,   asInteger(dist),  strat,   offset,
< 		       time1,  time2,            status,  wt,
< 		       covar,  imat,             JJ,      u,
< 		       dexpr,  rho,              zptr,
< 		       0,      NULL,             NULL,    NULL);
<     for (i=0; i<nvar2; i++) usave[i] = u[i];
---
> 	*loglik = (*dolik)(n, nvar, nstrat, 0, beta, asInteger(dist), strat, offset,
> 			time1, time2, status, wt, covar, imat, JJ, u, dexpr, rho, zptr, 0,
> 			NULL, NULL, NULL);
> 	for (int i = 0; i < nvar2; i++)
> 		usave[i] = u[i];
182c177
< 	i = cholesky3(JJ, nvar2, 0, NULL, tol_chol);
---
> 		cholesky3(JJ, nvar2, 0, NULL, tol_chol);
184,185c179,180
< 	}
<     else chsolve2(imat,nvar2,u);        /* a replaced by  a *inverse(i) */
---
> 	} else
> 		chsolve2(imat, nvar2, u); /* a replaced by  a *inverse(i) */
191c186
<     for (i=0; i<nvar2; i++) {
---
> 	for (int i = 0; i < nvar2; i++) {
196,197c191,193
< 	for (i=1; i<nvar2; i++)
< 	    for (j=0; j<i; j++)  imat[i][j] = imat[j][i];
---
> 		for (int i = 1; i < nvar2; i++)
> 			for (int j = 0; j < i; j++)
> 				imat[i][j] = imat[j][i];
207,213c202,206
<     newlk = (*dolik)(n,      nvar,             nstrat,  0,
< 		     newbeta,asInteger(dist),  strat,   offset,
< 		     time1,  time2,            status,  wt,
< 		     covar,  imat,             JJ,      u,
< 		     dexpr,  rho,              zptr,
< 		     0,      NULL,             NULL,    NULL); 
<     for (i=0; i<nvar2; i++) usave[i] = u[i];
---
> 	newlk = (*dolik)(n, nvar, nstrat, 0, newbeta, asInteger(dist), strat,
> 			offset, time1, time2, status, wt, covar, imat, JJ, u, dexpr, rho,
> 			zptr, 0, NULL, NULL, NULL);
> 	for (int i = 0; i < nvar2; i++)
> 		usave[i] = u[i];
215c208
<     for (iter=1; iter<= maxiter; iter++) {
---
> 	for (int iter = 1; iter <= maxiter; iter++) {
224,225c217,219
< 	    for (i=1; i<nvar2; i++){
< 		for (j=0; j<i; j++)  imat[i][j] = imat[j][i];
---
> 			for (int i = 1; i < nvar2; i++) {
> 				for (int j = 0; j < i; j++)
> 					imat[i][j] = imat[j][i];
227c221
< 	    for (i=0; i<nvar2; i++)
---
> 			for (int i = 0; i < nvar2; i++)
229c223,224
< 	    if (halving==1) *flag= 1000; /*didn't converge after all */
---
> 			if (halving == 1)
> 				*flag = 1000; /*didn't converge after all */
235c230
< 	    for (j=0; j<5 && newlk < *loglik; j++) {
---
> 			for (int j = 0; j < 5 && newlk < *loglik; j++) {
237c232
< 		for (i=0; i<nvar2; i++)
---
> 				for (int i = 0; i < nvar2; i++)
250c245
< 		    for (i=0; i<nstrat; i++) {
---
> 					for (int i = 0; i < nstrat; i++) {
255,260c250,252
< 		newlk = (*dolik)(n,      nvar,             nstrat,  1,
< 				 newbeta,asInteger(dist),  strat,   offset,
< 				 time1,  time2,            status,  wt,
< 				 covar,  imat,             JJ,      u,
< 				 dexpr,  rho,              zptr,
< 				 0,      NULL,             NULL,    NULL); 
---
> 				newlk = (*dolik)(n, nvar, nstrat, 1, newbeta, asInteger(dist),
> 						strat, offset, time1, time2, status, wt, covar, imat,
> 						JJ, u, dexpr, rho, zptr, 0, NULL, NULL, NULL);
269c261
< 		i = cholesky3(JJ, nvar2, 0, NULL, tol_chol);
---
> 				cholesky3(JJ, nvar2, 0, NULL, tol_chol);
271,273c263,265
< 		}
< 	    else chsolve2(imat,nvar2,u);
< 	    for (i=0; i<nvar2; i++) {
---
> 			} else
> 				chsolve2(imat, nvar2, u);
> 			for (int i = 0; i < nvar2; i++) {
279,285c271,275
< 	newlk = (*dolik)(n,      nvar,             nstrat,  0,
< 			 newbeta,asInteger(dist),  strat,   offset,
< 			 time1,  time2,            status,  wt,
< 			 covar,  imat,             JJ,      u,
< 			 dexpr,  rho,              zptr,
< 			 0,      NULL,             NULL,    NULL); 
< 	for (i=0; i<nvar2; i++) usave[i] = u[i];
---
> 		newlk = (*dolik)(n, nvar, nstrat, 0, newbeta, asInteger(dist), strat,
> 				offset, time1, time2, status, wt, covar, imat, JJ, u, dexpr,
> 				rho, zptr, 0, NULL, NULL, NULL);
> 		for (int i = 0; i < nvar2; i++)
> 			usave[i] = u[i];
291,292c281,283
<     for (i=1; i<nvar2; i++) {
<         for (j=0; j<i; j++)  imat[i][j] = imat[j][i];
---
> 	for (int i = 1; i < nvar2; i++) {
> 		for (int j = 0; j < i; j++)
> 			imat[i][j] = imat[j][i];
295c286
<     for (i=0; i<nvar2; i++)
---
> 	for (int i = 0; i < nvar2; i++)
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/survreg7.c Recommended/survival/src/survreg7.c
64,70c64,67
< SEXP survreg7(SEXP maxiter2,   SEXP nvarx,  SEXP y,
< 	      SEXP ny2,        SEXP covar2, SEXP wtx,
< 	      SEXP offset2,    SEXP beta2,  SEXP nstratx,
< 	      SEXP stratax,    SEXP epsx,   SEXP tolx,
< 	      SEXP dist,       SEXP dexpr,  SEXP rho,
< 	      SEXP ptype2,     SEXP pdiag2, SEXP nfrail2,
< 	      SEXP fgrp2,      SEXP pexpr1, SEXP pexpr2) {
---
> SEXP survreg7(SEXP maxiter2, SEXP nvarx, SEXP y, SEXP ny2, SEXP covar2,
> 		SEXP wtx, SEXP offset2, SEXP beta2, SEXP nstratx, SEXP stratax,
> 		SEXP epsx, SEXP tolx, SEXP dist, SEXP dexpr, SEXP rho, SEXP ptype2,
> 		SEXP pdiag2, SEXP nfrail2, SEXP fgrp2, SEXP pexpr1, SEXP pexpr2) {
72c69
<     int i,j;	
---
> 
79c76
<     int golden, goright;
---
> 	int goright;
96,98c93
<     double *jdiag, 
< 	   *newbeta,
< 	   *u;
---
> 	double *jdiag, *newbeta, *u;
108,109c103
<     SEXP  out_iter, out_loglik, out_hmat, 
< 	  out_hinv, out_flag,   out_beta;
---
> 	SEXP out_iter, out_loglik, out_hmat, out_hinv, out_flag, out_beta;
186c180,181
<     for (i=nvar; i<LENGTH(beta2); i++) newbeta[i] = beta[i];
---
> 	for (int i = nvar; i < LENGTH(beta2); i++)
> 		newbeta[i] = beta[i];
192,193c187
< 	}
<     else {
---
> 	} else {
202,203c196
< 	}
<     else {
---
> 	} else {
244,248c237,238
<     *loglik = (*dolik)(n,      nvar,             nstrat,  0,
< 		       beta,   asInteger(dist),  strat,   offset,
< 		       time1,  time2,            status,  wt,
< 		       covar,  hmat,             JJ,      u,
< 		       dexpr,  rho,              zptr,
---
> 	*loglik = (*dolik)(n, nvar, nstrat, 0, beta, asInteger(dist), strat, offset,
> 			time1, time2, status, wt, covar, hmat, JJ, u, dexpr, rho, zptr,
250,251c240,241
<     survpenal(0, nfrail, nvar,  hmat,  JJ,     hdiag, jdiag,  u,     beta,  
< 	         penalty, ptype, pdiag, pexpr1, cptr1, pexpr2, cptr2, rho);
---
> 	survpenal(0, nfrail, nvar, hmat, JJ, hdiag, jdiag, u, beta, penalty, ptype,
> 			pdiag, pexpr1, cptr1, pexpr2, cptr2, rho);
253c243,244
<     for (i=0; i<nvar3; i++) usave[i] = u[i];
---
> 	for (int i = 0; i < nvar3; i++)
> 		usave[i] = u[i];
271,272c262
< 	    }
< 	else {  /* Newton-Raphson step */
---
> 		} else { /* Newton-Raphson step */
276c266
< 	for (i=0; i<nvar3; i++) {
---
> 		for (int i = 0; i < nvar3; i++) {
280,287c270,274
< 	newlk = (*dolik)(n,       nvar,             nstrat,  0,
< 			  newbeta, asInteger(dist),  strat,   offset,
< 			  time1,   time2,            status,  wt,
< 			  covar,   hmat,             JJ,      u,
< 			  dexpr,   rho,              zptr,
< 			  nfrail,  fgrp,             hdiag,   jdiag);
< 	survpenal(0, nfrail, nvar,  hmat,  JJ,     hdiag, jdiag,  u, newbeta,  
< 		  &newpen, ptype, pdiag, pexpr1, cptr1, pexpr2, cptr2, rho);
---
> 		newlk = (*dolik)(n, nvar, nstrat, 0, newbeta, asInteger(dist), strat,
> 				offset, time1, time2, status, wt, covar, hmat, JJ, u, dexpr,
> 				rho, zptr, nfrail, fgrp, hdiag, jdiag);
> 		survpenal(0, nfrail, nvar, hmat, JJ, hdiag, jdiag, u, newbeta, &newpen,
> 				ptype, pdiag, pexpr1, cptr1, pexpr2, cptr2, rho);
296c283
< 	    for (i=0; i<nvar3; i++) {
---
> 			for (int i = 0; i < nvar3; i++) {
324,326c311,315
< 	    for (i=0; i<nvar3; i++) u[i] = newbeta[i] - beta[i];
< 	    for (i=0; i<nstrat; i++) 
< 		if (u[i+nvar+nfrail] < -0.7) u[i+nvar+nfrail] = -1.1;
---
> 			for (int i = 0; i < nvar3; i++)
> 				u[i] = newbeta[i] - beta[i];
> 			for (int i = 0; i < nstrat; i++)
> 				if (u[i + nvar + nfrail] < -0.7)
> 					u[i + nvar + nfrail] = -1.1;
342c331
< 		for (i=0; i<nvar3; i++)
---
> 				for (int i = 0; i < nvar3; i++)
345,353c334,339
< 		y1 = (*dolik)(n,      nvar,             nstrat,  1,
< 			      newbeta,asInteger(dist),  strat,   offset,
< 			      time1,  time2,            status,  wt,
< 			      covar,  hmat,             JJ,      u,
< 			      dexpr,  rho,              zptr,
< 			      nfrail, fgrp,             hdiag,   jdiag);
< 		survpenal(1, nfrail,  nvar,   hmat,  JJ, hdiag, jdiag,  
< 			  u, newbeta, &newpen, ptype, pdiag,
< 			  pexpr1, cptr1, pexpr2, cptr2, rho);
---
> 				y1 = (*dolik)(n, nvar, nstrat, 1, newbeta, asInteger(dist),
> 						strat, offset, time1, time2, status, wt, covar, hmat,
> 						JJ, u, dexpr, rho, zptr, nfrail, fgrp, hdiag, jdiag);
> 				survpenal(1, nfrail, nvar, hmat, JJ, hdiag, jdiag, u, newbeta,
> 						&newpen, ptype, pdiag, pexpr1, cptr1, pexpr2, cptr2,
> 						rho);
358c344
< 	    for (i=0; i<nvar3; i++)
---
> 			for (int i = 0; i < nvar3; i++)
360,368c346,350
< 	    y2 = (*dolik)(n,      nvar,             nstrat,  1,
< 			  newbeta,asInteger(dist),  strat,   offset,
< 			  time1,  time2,            status,  wt,
< 			  covar,  hmat,             JJ,      u,
< 			  dexpr,  rho,              zptr,
< 			  nfrail, fgrp,             hdiag,   jdiag);
< 	    survpenal(1, nfrail,  nvar,   hmat,  JJ, hdiag, jdiag,  
< 		      u, newbeta, &newpen, ptype, pdiag,
< 		      pexpr1, cptr1, pexpr2, cptr2, rho);
---
> 			y2 = (*dolik)(n, nvar, nstrat, 1, newbeta, asInteger(dist), strat,
> 					offset, time1, time2, status, wt, covar, hmat, JJ, u, dexpr,
> 					rho, zptr, nfrail, fgrp, hdiag, jdiag);
> 			survpenal(1, nfrail, nvar, hmat, JJ, hdiag, jdiag, u, newbeta,
> 					&newpen, ptype, pdiag, pexpr1, cptr1, pexpr2, cptr2, rho);
371c353
< 	    for (golden=0; golden< 8; golden++) {
---
> 			for (int golden = 0; golden < 8; golden++) {
377c359
< 		    for (i=0; i<nvar3; i++)
---
> 					for (int i = 0; i < nvar3; i++)
380,381c362
< 		    }
< 		else { /* toss away the interval from x3 to x4 */
---
> 				} else { /* toss away the interval from x3 to x4 */
386c367
< 		    for (i=0; i<nvar3; i++)
---
> 					for (int i = 0; i < nvar3; i++)
391,402c372,382
< 		newlk = (*dolik)(n,      nvar,             nstrat,  1,
< 				 newbeta,asInteger(dist),  strat,   offset,
< 				 time1,  time2,            status,  wt,
< 				 covar,  hmat,             JJ,      u,
< 				 dexpr,  rho,              zptr,
< 				 nfrail, fgrp,             hdiag,   jdiag);
< 		survpenal(1, nfrail,  nvar,   hmat,  JJ, hdiag, jdiag,  
< 			  u, newbeta, &newpen, ptype, pdiag,
< 			  pexpr1, cptr1, pexpr2, cptr2, rho);
< 		     
< 		if (goright) y3= newlk + newpen;
< 		else         y2= newlk + newpen;
---
> 				newlk = (*dolik)(n, nvar, nstrat, 1, newbeta, asInteger(dist),
> 						strat, offset, time1, time2, status, wt, covar, hmat,
> 						JJ, u, dexpr, rho, zptr, nfrail, fgrp, hdiag, jdiag);
> 				survpenal(1, nfrail, nvar, hmat, JJ, hdiag, jdiag, u, newbeta,
> 						&newpen, ptype, pdiag, pexpr1, cptr1, pexpr2, cptr2,
> 						rho);
> 
> 				if (goright)
> 					y3 = newlk + newpen;
> 				else
> 					y2 = newlk + newpen;
408,411c388,392
< 		     for (i=0; i<nvar3; i++) newbeta[i] = beta[i] + u[i]*x2;
< 		     }
< 		 else {
< 		     for (i=0; i<nvar3; i++) newbeta[i] = beta[i] + u[i]*x3;
---
> 					for (int i = 0; i < nvar3; i++)
> 						newbeta[i] = beta[i] + u[i] * x2;
> 				} else {
> 					for (int i = 0; i < nvar3; i++)
> 						newbeta[i] = beta[i] + u[i] * x3;
413,421c394,399
< 		 newlk = (*dolik)(n,      nvar,             nstrat,  0,
< 				  newbeta,asInteger(dist),  strat,   offset,
< 				  time1,  time2,            status,  wt,
< 				  covar,  hmat,             JJ,      u,
< 				  dexpr,  rho,              zptr,
< 				  nfrail, fgrp,             hdiag,   jdiag);
< 		 survpenal(0, nfrail,  nvar,   hmat,  JJ, hdiag, jdiag,  
< 			   u, newbeta, &newpen, ptype, pdiag,
< 			   pexpr1, cptr1, pexpr2, cptr2, rho);
---
> 				newlk = (*dolik)(n, nvar, nstrat, 0, newbeta, asInteger(dist),
> 						strat, offset, time1, time2, status, wt, covar, hmat,
> 						JJ, u, dexpr, rho, zptr, nfrail, fgrp, hdiag, jdiag);
> 				survpenal(0, nfrail, nvar, hmat, JJ, hdiag, jdiag, u, newbeta,
> 						&newpen, ptype, pdiag, pexpr1, cptr1, pexpr2, cptr2,
> 						rho);
424,425c402
< 		 }
< 	     else { /* abject failure */
---
> 			} else { /* abject failure */
435c411
< 	for (i=0; i<nvar3; i++) {
---
> 		for (int i = 0; i < nvar3; i++) {
443c419,420
<     if (maxiter > 1) *flag= 1000;  /* no "non convergence" for 0 or 1 iter */
---
> 	if (maxiter > 1)
> 		*flag = 1000; /* no "non convergence" for 0 or 1 iter */
449,452c426,429
< alldone:
<     *flag = cholesky3(hmat, nvar3, nfrail, hdiag, tol_chol);
<     for (i=0; i<nvar2; i++) {
< 	for (j=0; j<nvar3; j++)  hinv[i][j] = hmat[i][j];
---
> 	alldone: *flag = cholesky3(hmat, nvar3, nfrail, hdiag, tol_chol);
> 	for (int i = 0; i < nvar2; i++) {
> 		for (int j = 0; j < nvar3; j++)
> 			hinv[i][j] = hmat[i][j];
456c433
<     for (i=nfrail; i<nvar3; i++) {       /*nicer output for S user */
---
> 	for (int i = nfrail; i < nvar3; i++) { /*nicer output for S user */
460c437
< 	for (j=i+1; j<nvar3; j++) {
---
> 		for (int j = i + 1; j < nvar3; j++) {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/survregc1.c Recommended/survival/src/survregc1.c
43a44
> #include <Rmath.h>
52,53c53,54
< #define  SPI    2.506628274631001     /* sqrt(2*pi) */
< #define  ROOT_2 1.414213562373095
---
> //#define  SPI    2.506628274631001     /* sqrt(2*pi) */
> //#define  ROOT_2 1.414213562373095
55,60c56,60
< double survregc1(int n,          int nvar,      int nstrat,     int whichcase,
< 		 double *beta,   int dist,      Sint *strat,    double *offset,
< 		 double *time1,  double *time2, double *status, double *wt,
< 		 double **covar, double **imat, double **JJ,    double *u, 
< 		 SEXP expr,      SEXP rho,      double *dummy,  int nf,
< 		 Sint *frail,    double *fdiag, double *jdiag ) {
---
> double survregc1(int n, int nvar, int nstrat, int whichcase, double *beta,
> 		int dist, Sint *strat, double *offset, double *time1, double *time2,
> 		double *status, double *wt, double **covar, double **imat, double **JJ,
> 		double *u, SEXP expr, SEXP rho, double *dummy, int nf, Sint *frail,
> 		double *fdiag, double *jdiag) {
62c62
<     int person, i,j,k;
---
> 	int j, k;
66,70c66,67
<     double  eta,
< 	    sigma;
<     double  z, zu,
< 	    loglik,
< 	    temp, temp2;
---
> 	double eta, sigma;
> 	double z, zu, loglik, temp, temp2;
80,82c77,85
< 	case 1: sreg_gg = exvalue_d;  break;
< 	case 2: sreg_gg = logistic_d; break;
< 	case 3: sreg_gg = gauss_d;    break;
---
> 	case 1:
> 		sreg_gg = exvalue_d;
> 		break;
> 	case 2:
> 		sreg_gg = logistic_d;
> 		break;
> 	case 3:
> 		sreg_gg = gauss_d;
> 		break;
90c93
< 	for (i=0; i<nf; i++) {
---
> 		for (int i = 0; i < nf; i++) {
94c97
< 	for (i=0; i<nvar3; i++) {
---
> 		for (int i = 0; i < nvar3; i++) {
96c99
< 	    for (j=0; j<nvar2; j++) {
---
> 			for (int j = 0; j < nvar2; j++) {
110c113
<     for (person=0; person<n; person++) {
---
> 	for (int person = 0; person < n; person++) {
121c124,125
< 	for (i=0; i<nvar; i++) eta += beta[i+nf] * covar[i][person];
---
> 		for (int i = 0; i < nvar; i++)
> 			eta += beta[i + nf] * covar[i][person];
142,144c146,149
< 		    dsig =0; ddsig=0; dsg=0;
< 		    }
< 		else {
---
> 				dsig = 0;
> 				ddsig = 0;
> 				dsg = 0;
> 			} else {
162,164c167,170
< 		    dsig =0; ddsig=0; dsg=0;
< 		    }
< 		else {
---
> 				dsig = 0;
> 				ddsig = 0;
> 				dsg = 0;
> 			} else {
181c187,189
< 		    dsig =0; ddsig=0; dsg=0;
---
> 				dsig = 0;
> 				ddsig = 0;
> 				dsg = 0;
183,184c191
< 		    }
< 		else {
---
> 			} else {
199,200c206,209
< 		if (z>0)  temp = funs[1] - ufun[1]; /*stop roundoff in tails*/
< 		else      temp = ufun[0] - funs[0];
---
> 			if (z > 0)
> 				temp = funs[1] - ufun[1]; /*stop roundoff in tails*/
> 			else
> 				temp = ufun[0] - funs[0];
206,208c215,218
< 		    dsig =0; ddsig=0; dsg=0;
< 		    }
< 		else {
---
> 				dsig = 0;
> 				ddsig = 0;
> 				dsg = 0;
> 			} else {
213,216c223,226
< 		    ddsig= ((zu*zu*ufun[3] - z*z*funs[3])/temp) -
< 			                dsig*(1+dsig);
< 		    dsg = ((zu*ufun[3] - z*funs[3])/ (temp*sigma)) -
< 				      dg * (dsig +1);
---
> 				ddsig = ((zu * zu * ufun[3] - z * z * funs[3]) / temp)
> 						- dsig * (1 + dsig);
> 				dsg = ((zu * ufun[3] - z * funs[3]) / (temp * sigma))
> 						- dg * (dsig + 1);
227c237,238
< 	if (whichcase==1) continue;     /*only needed the loglik */
---
> 		if (whichcase == 1)
> 			continue; /*only needed the loglik */
234c245
< 	for (i=0; i<nvar; i++) {
---
> 		for (int i = 0; i < nvar; i++) {
237,238c248,250
< 	    for (j=0; j<=i; j++) {
< 		imat[i][j+nf] -= covar[i][person] *covar[j][person] *ddg *w;
---
> 			for (int j = 0; j <= i; j++) {
> 				imat[i][j + nf] -= covar[i][person] * covar[j][person] * ddg
> 						* w;
250c262
< 	    for (i=0; i<nvar; i++) {
---
> 			for (int i = 0; i < nvar; i++) {
276,277c287
< static void logistic_d(double z, double ans[4], int j)
<     {
---
> static void logistic_d(double z, double ans[4], int j) {
289,290c299
< 	}
<     else {
---
> 	} else {
297c306,307
< 	case 1:  ans[1] = w/(temp*temp);
---
> 	case 1:
> 		ans[1] = w / (temp * temp);
301c311,312
< 	case 2:  ans[1-ii] = w/temp;
---
> 	case 2:
> 		ans[1 - ii] = w / temp;
309,310c320
< static void gauss_d(double z, double ans[4], int j)
<     {
---
> static void gauss_d(double z, double ans[4], int j) {
313c323
<     f = exp(-z*z/2) /SPI;
---
> 	f = exp(-z * z / 2) * M_1_SQRT_2PI;
315c325,326
< 	case 1: ans[1] =f;
---
> 	case 1:
> 		ans[1] = f;
319,325c330,336
< 	case 2: if (z>0) {
< 		    ans[0] = (1 + erf(z/ROOT_2))/2;
< 		    ans[1] =  erfc(z/ROOT_2) /2;
< 		    }
< 		else {
< 		    ans[1] = (1 + erf(-z/ROOT_2))/2;
< 		    ans[0] =  erfc(-z/ROOT_2) /2;
---
> 	case 2:
> 		if (z > 0) {
> 			ans[0] = (1 + erf(z / M_SQRT2)) / 2;
> 			ans[1] = erfc(z / M_SQRT2) / 2;
> 		} else {
> 			ans[1] = (1 + erf(-z / M_SQRT2)) / 2;
> 			ans[0] = erfc(-z / M_SQRT2) / 2;
341,342c352
< static void exvalue_d(double z, double ans[4], int j)
<     {
---
> static void exvalue_d(double z, double ans[4], int j) {
345,347c355,360
<     if (z < SMALL) w= exp(SMALL);
<     else if (-z < SMALL) w = exp(-SMALL);  /* stop infinite answers */
<     else   w = exp(z);
---
> 	if (z < SMALL)
> 		w = exp(SMALL);
> 	else if (-z < SMALL)
> 		w = exp(-SMALL); /* stop infinite answers */
> 	else
> 		w = exp(z);
351c364,365
< 	case 1:  ans[1] = w*temp;
---
> 	case 1:
> 		ans[1] = w * temp;
355c369,370
< 	case 2:  ans[0] = 1-temp;
---
> 	case 2:
> 		ans[0] = 1 - temp;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/survregc2.c Recommended/survival/src/survregc2.c
15,20c15,19
< double survregc2(int n,          int nvar,     int nstrat,      int whichcase,
< 		 double *beta,   int dist,     Sint *strat,     double *offset,
< 		 double *time1,  double *time2, double *status, double *wt,
< 		 double **covar, double **imat, double **JJ,    double *u, 
< 		 SEXP expr,      SEXP rho,      double *z,      int nf,
< 		 Sint *frail,    double *fdiag, double *jdiag ) {
---
> double survregc2(int n, int nvar, int nstrat, int whichcase, double *beta,
> 		int dist, Sint *strat, double *offset, double *time1, double *time2,
> 		double *status, double *wt, double **covar, double **imat, double **JJ,
> 		double *u, SEXP expr, SEXP rho, double *z, int nf, Sint *frail,
> 		double *fdiag, double *jdiag) {
22c21
<     int person, i,j,k;
---
> 	int person, j, k;
25,26c24
<     double  eta,
< 	    sigma;
---
> 	double eta, sigma;
29,30c27
<     double  loglik,
< 	    temp;
---
> 	double loglik, temp;
44c41
< 	for (i=0; i<nf; i++) {
---
> 		for (int i = 0; i < nf; i++) {
48c45
< 	for (i=0; i<nvar2+nf; i++) {
---
> 		for (int i = 0; i < nvar2 + nf; i++) {
50c47
< 	    for (j=0; j<nvar2; j++) {
---
> 			for (int j = 0; j < nvar2; j++) {
73c70,71
< 	for (i=0; i<nvar; i++) eta += beta[i] * covar[i][person];
---
> 		for (int i = 0; i < nvar; i++)
> 			eta += beta[i] * covar[i][person];
97c95,96
<     for (i=0; i<4; i++) funs[i+1] = funs[i] + icount;
---
> 	for (int i = 0; i < 4; i++)
> 		funs[i + 1] = funs[i] + icount;
104c103
<     for (person=0; person<n; person++) {
---
> 	for (int person = 0; person < n; person++) {
124,126c123,126
< 		    dsig =0; ddsig=0; dsg=0;
< 		    }
< 		else {
---
> 				dsig = 0;
> 				ddsig = 0;
> 				dsg = 0;
> 			} else {
142,144c142,145
< 		    dsig =0; ddsig=0; dsg=0;
< 		    }
< 		else {
---
> 				dsig = 0;
> 				ddsig = 0;
> 				dsg = 0;
> 			} else {
147,148c148,149
< 		    temp2 = -funs[3][person]*funs[2][person]*sig2/
< 			               funs[1][person];
---
> 				temp2 = -funs[3][person] * funs[2][person] * sig2
> 						/ funs[1][person];
161c162,164
< 		    dsig =0; ddsig=0; dsg=0;
---
> 				dsig = 0;
> 				ddsig = 0;
> 				dsg = 0;
163,164c166
< 		    }
< 		else {
---
> 			} else {
167,168c169,170
< 		    temp2 = funs[3][person]*funs[2][person]*sig2/
< 			                      funs[0][person];
---
> 				temp2 = funs[3][person] * funs[2][person] * sig2
> 						/ funs[0][person];
179,180c181,184
< 		if (zz>0)  temp = funs[1][person] - funs[1][icount]; 
< 		else       temp = funs[0][icount] - funs[0][person];
---
> 			if (zz > 0)
> 				temp = funs[1][person] - funs[1][icount];
> 			else
> 				temp = funs[0][icount] - funs[0][person];
186,188c190,193
< 		    dsig =0; ddsig=0; dsg=0;
< 		    }
< 		else {
---
> 				dsig = 0;
> 				ddsig = 0;
> 				dsg = 0;
> 			} else {
193c198,199
< 		    ddg = (funs[3][icount] -funs[3][person])*sig2/temp - dg*dg;
---
> 				ddg = (funs[3][icount] - funs[3][person]) * sig2 / temp
> 						- dg * dg;
197,198c203,204
< 		    dsg = (zu*funs[3][icount] - zz*funs[3][person])/
< 			       (temp*sigma)  - dg *(1+dsig);
---
> 				dsg = (zu * funs[3][icount] - zz * funs[3][person])
> 						/ (temp * sigma) - dg * (1 + dsig);
208c214,215
< 	if (whichcase==1) continue;     /*only needed the loglik */
---
> 		if (whichcase == 1)
> 			continue; /*only needed the loglik */
216c223
< 	for (i=0; i<nvar; i++) {
---
> 		for (int i = 0; i < nvar; i++) {
219,220c226,228
< 	    for (j=0; j<=i; j++) {
< 		imat[i][j+nf] -= covar[i][person] *covar[j][person] *ddg *w;
---
> 			for (int j = 0; j <= i; j++) {
> 				imat[i][j + nf] -= covar[i][person] * covar[j][person] * ddg
> 						* w;
232c240
< 	    for (i=0; i<nvar; i++) {
---
> 			for (int i = 0; i < nvar; i++) {
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/src/tmerge.c Recommended/survival/src/tmerge.c
14,16c14,15
< SEXP tmerge(SEXP id2,  SEXP time2x, SEXP newx2,
<             SEXP nid2, SEXP ntime2, SEXP x2,  SEXP indx2) {
<     int i, k;
---
> SEXP tmerge(SEXP id2, SEXP time2x, SEXP newx2, SEXP nid2, SEXP ntime2, SEXP x2,
> 		SEXP indx2) {
20,21c19
<     double *time2, 
< 	   *ntime, *x;
---
> 	double *time2, *ntime, *x;
49,51c47,50
<     for (k=0; k<n2; k++) {
< 	for (i=indx[k]-1; i<n1; i++) {
< 	    if (id[i] != nid[k] || time2[i] <= ntime[k]) break;
---
> 	for (int k = 0; k < n2; k++) {
> 		for (int i = indx[k] - 1; i < n1; i++) {
> 			if (id[i] != nid[k] || time2[i] <= ntime[k])
> 				break;
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/vignettes/adjcurve.Rnw Recommended/survival/vignettes/adjcurve.Rnw
328,329c328,329
< for (j in 1:dd[2]) {
<     for (k in 1:dd[3]) {
---
> for (j in seq_len(dd[2])) {
>     for (k in seq_len(dd[3])) {
554c554
< id <- 1:nrow(fdata)
---
> id <- seq_len(nrow(fdata))
910c910
< tdata3 <- tdata[rep(1:nrow(tdata), 3),]  #three copies
---
> tdata3 <- tdata[rep(seq_len(nrow(tdata)), 3),]  #three copies
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/vignettes/tests.Rnw Recommended/survival/vignettes/tests.Rnw
606c606
< for (i in 1:nrow(emat))
---
> for (i in seq_len(nrow(emat)))
diff -rEZbwB '--exclude=*.[lo,d,pdf,mo,po,tgz,gz,save]*' '--exclude=MD5' '--exclude=Makefile*' '--exclude=all.R' '--exclude=Changes' R-recommended/survival/vignettes/timedep.Rnw Recommended/survival/vignettes/timedep.Rnw
442c442
< jasa$subject <- 1:nrow(jasa)  #we need an identifier variable
---
> jasa$subject <- seq_len(nrow(jasa))  #we need an identifier variable
